
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155a0  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000168a8  08015870  08015870  00016870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c118  0802c118  0002e594  2**0
                  CONTENTS
  4 .ARM          00000000  0802c118  0802c118  0002e594  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802c118  0802c118  0002e594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c118  0802c118  0002d118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c11c  0802c11c  0002d11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000594  24000000  0802c120  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000127e4  240005a0  0802c6b4  0002e5a0  2**5
                  ALLOC
 10 .RAM_D3       00000000  38000000  38000000  0002e594  2**0
                  CONTENTS
 11 ._user_heap_stack 00001204  24012d84  24012d84  0002ed84  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002e594  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e4e9  00000000  00000000  0002e5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006b75  00000000  00000000  0006caab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002fb8  00000000  00000000  00073620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000236a  00000000  00000000  000765d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c311  00000000  00000000  00078942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035c20  00000000  00000000  00084c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00177350  00000000  00000000  000ba873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000136  00000000  00000000  00231bc3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cce0  00000000  00000000  00231cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0023e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000041f8  00000000  00000000  0023ea36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000001b8  00000000  00000000  00242c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240005a0 	.word	0x240005a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015858 	.word	0x08015858

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240005a4 	.word	0x240005a4
 800030c:	08015858 	.word	0x08015858

08000310 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d103      	bne.n	8000328 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8000320:	f04f 33ff 	mov.w	r3, #4294967295
 8000324:	60fb      	str	r3, [r7, #12]
 8000326:	e02c      	b.n	8000382 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	891a      	ldrh	r2, [r3, #8]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	68da      	ldr	r2, [r3, #12]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	691a      	ldr	r2, [r3, #16]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	695a      	ldr	r2, [r3, #20]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a0c      	ldr	r2, [pc, #48]	@ (800038c <FT5336_RegisterBusIO+0x7c>)
 800035c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a0b      	ldr	r2, [pc, #44]	@ (8000390 <FT5336_RegisterBusIO+0x80>)
 8000362:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d004      	beq.n	800037c <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4798      	blx	r3
 8000378:	60f8      	str	r0, [r7, #12]
 800037a:	e002      	b.n	8000382 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800037c:	f04f 33ff 	mov.w	r3, #4294967295
 8000380:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000382:	68fb      	ldr	r3, [r7, #12]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	080003b5 	.word	0x080003b5
 8000390:	080003e9 	.word	0x080003e9

08000394 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3318      	adds	r3, #24
 80003a2:	6839      	ldr	r1, [r7, #0]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f850 	bl	800044a <ft5336_chip_id>
 80003aa:	4603      	mov	r3, r0
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b087      	sub	sp, #28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	607a      	str	r2, [r7, #4]
 80003be:	461a      	mov	r2, r3
 80003c0:	460b      	mov	r3, r1
 80003c2:	72fb      	strb	r3, [r7, #11]
 80003c4:	4613      	mov	r3, r2
 80003c6:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80003cc:	697b      	ldr	r3, [r7, #20]
 80003ce:	691c      	ldr	r4, [r3, #16]
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	8918      	ldrh	r0, [r3, #8]
 80003d4:	7afb      	ldrb	r3, [r7, #11]
 80003d6:	b299      	uxth	r1, r3
 80003d8:	893b      	ldrh	r3, [r7, #8]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	47a0      	blx	r4
 80003de:	4603      	mov	r3, r0
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	371c      	adds	r7, #28
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd90      	pop	{r4, r7, pc}

080003e8 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80003e8:	b590      	push	{r4, r7, lr}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	60f8      	str	r0, [r7, #12]
 80003f0:	607a      	str	r2, [r7, #4]
 80003f2:	461a      	mov	r2, r3
 80003f4:	460b      	mov	r3, r1
 80003f6:	72fb      	strb	r3, [r7, #11]
 80003f8:	4613      	mov	r3, r2
 80003fa:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	68dc      	ldr	r4, [r3, #12]
 8000404:	697b      	ldr	r3, [r7, #20]
 8000406:	8918      	ldrh	r0, [r3, #8]
 8000408:	7afb      	ldrb	r3, [r7, #11]
 800040a:	b299      	uxth	r1, r3
 800040c:	893b      	ldrh	r3, [r7, #8]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	47a0      	blx	r4
 8000412:	4603      	mov	r3, r0
}
 8000414:	4618      	mov	r0, r3
 8000416:	371c      	adds	r7, #28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd90      	pop	{r4, r7, pc}

0800041c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	607a      	str	r2, [r7, #4]
 8000426:	461a      	mov	r2, r3
 8000428:	460b      	mov	r3, r1
 800042a:	72fb      	strb	r3, [r7, #11]
 800042c:	4613      	mov	r3, r2
 800042e:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	685c      	ldr	r4, [r3, #4]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	6898      	ldr	r0, [r3, #8]
 8000438:	893b      	ldrh	r3, [r7, #8]
 800043a:	7af9      	ldrb	r1, [r7, #11]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	47a0      	blx	r4
 8000440:	4603      	mov	r3, r0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bd90      	pop	{r4, r7, pc}

0800044a <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b084      	sub	sp, #16
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 8000454:	2301      	movs	r3, #1
 8000456:	683a      	ldr	r2, [r7, #0]
 8000458:	21a8      	movs	r1, #168	@ 0xa8
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f7ff ffde 	bl	800041c <ft5336_read_reg>
 8000460:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d107      	bne.n	8000478 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	781a      	ldrb	r2, [r3, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	781a      	ldrb	r2, [r3, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000478:	68fb      	ldr	r3, [r7, #12]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <S70KL1281_EnableMemoryMappedMode>:
  * @brief  Enable memory mapped mode for the OSPI memory.
  * @param  Ctx Component object pointer
  * @retval OSPI memory status
  */
int32_t S70KL1281_EnableMemoryMappedMode(OSPI_HandleTypeDef *Ctx)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b08a      	sub	sp, #40	@ 0x28
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
  OSPI_HyperbusCmdTypeDef  sCommand;
  OSPI_MemoryMappedTypeDef sMemMappedCfg;

  /* OctoSPI Hyperbus command configuration */
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 800048e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000492:	61fb      	str	r3, [r7, #28]
  sCommand.Address      = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000498:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800049c:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.NbData       = 1;
 800049e:	2301      	movs	r3, #1
 80004a0:	623b      	str	r3, [r7, #32]

  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80004a2:	f107 0314 	add.w	r3, r7, #20
 80004a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80004aa:	4619      	mov	r1, r3
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f00b ff5f 	bl	800c370 <HAL_OSPI_HyperbusCmd>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d002      	beq.n	80004be <S70KL1281_EnableMemoryMappedMode+0x3c>
  {
    return S70KL1281_ERROR;
 80004b8:	f04f 33ff 	mov.w	r3, #4294967295
 80004bc:	e00e      	b.n	80004dc <S70KL1281_EnableMemoryMappedMode+0x5a>
  }

  /* OctoSPI activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]

  if (HAL_OSPI_MemoryMapped(Ctx, &sMemMappedCfg) != HAL_OK)
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	4619      	mov	r1, r3
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f00c f8c9 	bl	800c660 <HAL_OSPI_MemoryMapped>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d002      	beq.n	80004da <S70KL1281_EnableMemoryMappedMode+0x58>
  {
    return S70KL1281_ERROR;
 80004d4:	f04f 33ff 	mov.w	r3, #4294967295
 80004d8:	e000      	b.n	80004dc <S70KL1281_EnableMemoryMappedMode+0x5a>
  }

  return S70KL1281_OK;
 80004da:	2300      	movs	r3, #0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3728      	adds	r7, #40	@ 0x28
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <S70KL1281_ReadCfgReg0>:
  * @param  Ctx Component object pointer
  * @param  Value Register value pointer
  * @retval error status
  */
int32_t S70KL1281_ReadCfgReg0(OSPI_HandleTypeDef *Ctx, uint16_t *Value)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  OSPI_HyperbusCmdTypeDef  sCommand;

  /* Initialize the read command */
  sCommand.AddressSpace = HAL_OSPI_REGISTER_ADDRESS_SPACE;
 80004ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80004f2:	60fb      	str	r3, [r7, #12]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 80004f4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80004f8:	617b      	str	r3, [r7, #20]
  sCommand.Address      = S70KL1281_CR0_ADDRESS;
 80004fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004fe:	613b      	str	r3, [r7, #16]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000500:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000504:	61fb      	str	r3, [r7, #28]
  sCommand.NbData       = 2U;
 8000506:	2302      	movs	r3, #2
 8000508:	61bb      	str	r3, [r7, #24]

  /* Configure the command */
  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000512:	4619      	mov	r1, r3
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f00b ff2b 	bl	800c370 <HAL_OSPI_HyperbusCmd>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <S70KL1281_ReadCfgReg0+0x42>
  {
    return S70KL1281_ERROR;
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	e00c      	b.n	8000540 <S70KL1281_ReadCfgReg0+0x5c>
  }

  /* Reception of the data */
  if (HAL_OSPI_Receive(Ctx, (uint8_t *)Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f00b fff3 	bl	800c518 <HAL_OSPI_Receive>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d002      	beq.n	800053e <S70KL1281_ReadCfgReg0+0x5a>
  {
    return S70KL1281_ERROR;
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	e000      	b.n	8000540 <S70KL1281_ReadCfgReg0+0x5c>
  }

  return S70KL1281_OK;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <S70KL1281_WriteCfgReg0>:
  * @param  Ctx Component object pointer
  * @param  Value Value to write to register
  * @retval error status
  */
int32_t S70KL1281_WriteCfgReg0(OSPI_HandleTypeDef *Ctx, uint16_t Value, uint32_t LatencyMode, uint32_t InitialLatency)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08e      	sub	sp, #56	@ 0x38
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	607a      	str	r2, [r7, #4]
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	460b      	mov	r3, r1
 8000556:	817b      	strh	r3, [r7, #10]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  OSPI_HyperbusCmdTypeDef sCommand;

  /* Reconfigure peripheral as no write latency to write in registers */
  sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8000558:	2303      	movs	r3, #3
 800055a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sHyperbusCfg.AccessTime       = InitialLatency;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sHyperbusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8000560:	2302      	movs	r3, #2
 8000562:	633b      	str	r3, [r7, #48]	@ 0x30
  sHyperbusCfg.LatencyMode      = LatencyMode;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_OSPI_HyperbusCfg(Ctx, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000568:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800056c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000570:	4619      	mov	r1, r3
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f00b febd 	bl	800c2f2 <HAL_OSPI_HyperbusCfg>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <S70KL1281_WriteCfgReg0+0x3c>
  {
    return S70KL1281_ERROR;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	e03a      	b.n	80005fa <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Initialize the write command */
  sCommand.AddressSpace = HAL_OSPI_REGISTER_ADDRESS_SPACE;
 8000584:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000588:	617b      	str	r3, [r7, #20]
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 800058a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800058e:	61fb      	str	r3, [r7, #28]
  sCommand.Address      = S70KL1281_CR0_ADDRESS;
 8000590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000594:	61bb      	str	r3, [r7, #24]
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000596:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800059a:	627b      	str	r3, [r7, #36]	@ 0x24
  sCommand.NbData       = 2U;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]

  /* Configure the command */
  if (HAL_OSPI_HyperbusCmd(Ctx, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005a8:	4619      	mov	r1, r3
 80005aa:	68f8      	ldr	r0, [r7, #12]
 80005ac:	f00b fee0 	bl	800c370 <HAL_OSPI_HyperbusCmd>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <S70KL1281_WriteCfgReg0+0x74>
  {
    return S70KL1281_ERROR;
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	e01e      	b.n	80005fa <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Transmission of the data */
  if (HAL_OSPI_Transmit(Ctx, (uint8_t *)(&Value), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005bc:	f107 030a 	add.w	r3, r7, #10
 80005c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005c4:	4619      	mov	r1, r3
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	f00b ff33 	bl	800c432 <HAL_OSPI_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d002      	beq.n	80005d8 <S70KL1281_WriteCfgReg0+0x90>
  {
    return S70KL1281_ERROR;
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	e010      	b.n	80005fa <S70KL1281_WriteCfgReg0+0xb2>
  }

  /* Reconfigure peripheral for correct write access */
  sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 80005d8:	2300      	movs	r3, #0
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30

  if (HAL_OSPI_HyperbusCfg(Ctx, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005e4:	4619      	mov	r1, r3
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f00b fe83 	bl	800c2f2 <HAL_OSPI_HyperbusCfg>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <S70KL1281_WriteCfgReg0+0xb0>
  {
    return S70KL1281_ERROR;
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	e000      	b.n	80005fa <S70KL1281_WriteCfgReg0+0xb2>
  }

  return S70KL1281_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3738      	adds	r7, #56	@ 0x38
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800060e:	2303      	movs	r3, #3
 8000610:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f103 0018 	add.w	r0, r3, #24
 8000618:	f107 020a 	add.w	r2, r7, #10
 800061c:	2302      	movs	r3, #2
 800061e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000622:	f001 fdb1 	bl	8002188 <wm8994_write_reg>
 8000626:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8000628:	2300      	movs	r3, #0
 800062a:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f103 0018 	add.w	r0, r3, #24
 8000632:	f107 020a 	add.w	r2, r7, #10
 8000636:	2302      	movs	r3, #2
 8000638:	f640 0117 	movw	r1, #2071	@ 0x817
 800063c:	f001 fda4 	bl	8002188 <wm8994_write_reg>
 8000640:	4602      	mov	r2, r0
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f103 0018 	add.w	r0, r3, #24
 800064e:	f107 020a 	add.w	r2, r7, #10
 8000652:	2302      	movs	r3, #2
 8000654:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000658:	f001 fd96 	bl	8002188 <wm8994_write_reg>
 800065c:	4602      	mov	r2, r0
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8000664:	236c      	movs	r3, #108	@ 0x6c
 8000666:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f103 0018 	add.w	r0, r3, #24
 800066e:	f107 020a 	add.w	r2, r7, #10
 8000672:	2302      	movs	r3, #2
 8000674:	2139      	movs	r1, #57	@ 0x39
 8000676:	f001 fd87 	bl	8002188 <wm8994_write_reg>
 800067a:	4602      	mov	r2, r0
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4413      	add	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d00f      	beq.n	80006aa <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 800068a:	2313      	movs	r3, #19
 800068c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f103 0018 	add.w	r0, r3, #24
 8000694:	f107 020a 	add.w	r2, r7, #10
 8000698:	2302      	movs	r3, #2
 800069a:	2101      	movs	r1, #1
 800069c:	f001 fd74 	bl	8002188 <wm8994_write_reg>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	e00e      	b.n	80006c8 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 80006aa:	2303      	movs	r3, #3
 80006ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f103 0018 	add.w	r0, r3, #24
 80006b4:	f107 020a 	add.w	r2, r7, #10
 80006b8:	2302      	movs	r3, #2
 80006ba:	2101      	movs	r1, #1
 80006bc:	f001 fd64 	bl	8002188 <wm8994_write_reg>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80006c8:	2132      	movs	r1, #50	@ 0x32
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f001 fce4 	bl	8002098 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	f200 8141 	bhi.w	800095c <WM8994_Init+0x358>
 80006da:	a201      	add	r2, pc, #4	@ (adr r2, 80006e0 <WM8994_Init+0xdc>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	080009f7 	.word	0x080009f7
 80006e4:	080006f1 	.word	0x080006f1
 80006e8:	0800078b 	.word	0x0800078b
 80006ec:	08000825 	.word	0x08000825
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80006f0:	f640 430c 	movw	r3, #3084	@ 0xc0c
 80006f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f103 0018 	add.w	r0, r3, #24
 80006fc:	f107 020a 	add.w	r2, r7, #10
 8000700:	2302      	movs	r3, #2
 8000702:	2105      	movs	r1, #5
 8000704:	f001 fd40 	bl	8002188 <wm8994_write_reg>
 8000708:	4602      	mov	r2, r0
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	4413      	add	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 8000710:	2300      	movs	r3, #0
 8000712:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f103 0018 	add.w	r0, r3, #24
 800071a:	f107 020a 	add.w	r2, r7, #10
 800071e:	2302      	movs	r3, #2
 8000720:	f240 6101 	movw	r1, #1537	@ 0x601
 8000724:	f001 fd30 	bl	8002188 <wm8994_write_reg>
 8000728:	4602      	mov	r2, r0
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4413      	add	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f103 0018 	add.w	r0, r3, #24
 8000736:	f107 020a 	add.w	r2, r7, #10
 800073a:	2302      	movs	r3, #2
 800073c:	f240 6102 	movw	r1, #1538	@ 0x602
 8000740:	f001 fd22 	bl	8002188 <wm8994_write_reg>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 800074c:	2302      	movs	r3, #2
 800074e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f103 0018 	add.w	r0, r3, #24
 8000756:	f107 020a 	add.w	r2, r7, #10
 800075a:	2302      	movs	r3, #2
 800075c:	f240 6104 	movw	r1, #1540	@ 0x604
 8000760:	f001 fd12 	bl	8002188 <wm8994_write_reg>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f103 0018 	add.w	r0, r3, #24
 8000772:	f107 020a 	add.w	r2, r7, #10
 8000776:	2302      	movs	r3, #2
 8000778:	f240 6105 	movw	r1, #1541	@ 0x605
 800077c:	f001 fd04 	bl	8002188 <wm8994_write_reg>
 8000780:	4602      	mov	r2, r0
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4413      	add	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
    break;
 8000788:	e136      	b.n	80009f8 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800078a:	f240 3303 	movw	r3, #771	@ 0x303
 800078e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0018 	add.w	r0, r3, #24
 8000796:	f107 020a 	add.w	r2, r7, #10
 800079a:	2302      	movs	r3, #2
 800079c:	2105      	movs	r1, #5
 800079e:	f001 fcf3 	bl	8002188 <wm8994_write_reg>
 80007a2:	4602      	mov	r2, r0
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4413      	add	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80007aa:	2301      	movs	r3, #1
 80007ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f103 0018 	add.w	r0, r3, #24
 80007b4:	f107 020a 	add.w	r2, r7, #10
 80007b8:	2302      	movs	r3, #2
 80007ba:	f240 6101 	movw	r1, #1537	@ 0x601
 80007be:	f001 fce3 	bl	8002188 <wm8994_write_reg>
 80007c2:	4602      	mov	r2, r0
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f103 0018 	add.w	r0, r3, #24
 80007d0:	f107 020a 	add.w	r2, r7, #10
 80007d4:	2302      	movs	r3, #2
 80007d6:	f240 6102 	movw	r1, #1538	@ 0x602
 80007da:	f001 fcd5 	bl	8002188 <wm8994_write_reg>
 80007de:	4602      	mov	r2, r0
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80007e6:	2300      	movs	r3, #0
 80007e8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f103 0018 	add.w	r0, r3, #24
 80007f0:	f107 020a 	add.w	r2, r7, #10
 80007f4:	2302      	movs	r3, #2
 80007f6:	f240 6104 	movw	r1, #1540	@ 0x604
 80007fa:	f001 fcc5 	bl	8002188 <wm8994_write_reg>
 80007fe:	4602      	mov	r2, r0
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f103 0018 	add.w	r0, r3, #24
 800080c:	f107 020a 	add.w	r2, r7, #10
 8000810:	2302      	movs	r3, #2
 8000812:	f240 6105 	movw	r1, #1541	@ 0x605
 8000816:	f001 fcb7 	bl	8002188 <wm8994_write_reg>
 800081a:	4602      	mov	r2, r0
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
    break;
 8000822:	e0e9      	b.n	80009f8 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b05      	cmp	r3, #5
 800082a:	d14a      	bne.n	80008c2 <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 800082c:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8000830:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f103 0018 	add.w	r0, r3, #24
 8000838:	f107 020a 	add.w	r2, r7, #10
 800083c:	2302      	movs	r3, #2
 800083e:	2105      	movs	r1, #5
 8000840:	f001 fca2 	bl	8002188 <wm8994_write_reg>
 8000844:	4602      	mov	r2, r0
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	4413      	add	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 800084c:	2303      	movs	r3, #3
 800084e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f103 0018 	add.w	r0, r3, #24
 8000856:	f107 020a 	add.w	r2, r7, #10
 800085a:	2302      	movs	r3, #2
 800085c:	f240 6101 	movw	r1, #1537	@ 0x601
 8000860:	f001 fc92 	bl	8002188 <wm8994_write_reg>
 8000864:	4602      	mov	r2, r0
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f103 0018 	add.w	r0, r3, #24
 8000872:	f107 020a 	add.w	r2, r7, #10
 8000876:	2302      	movs	r3, #2
 8000878:	f240 6102 	movw	r1, #1538	@ 0x602
 800087c:	f001 fc84 	bl	8002188 <wm8994_write_reg>
 8000880:	4602      	mov	r2, r0
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4413      	add	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f103 0018 	add.w	r0, r3, #24
 800088e:	f107 020a 	add.w	r2, r7, #10
 8000892:	2302      	movs	r3, #2
 8000894:	f240 6104 	movw	r1, #1540	@ 0x604
 8000898:	f001 fc76 	bl	8002188 <wm8994_write_reg>
 800089c:	4602      	mov	r2, r0
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f103 0018 	add.w	r0, r3, #24
 80008aa:	f107 020a 	add.w	r2, r7, #10
 80008ae:	2302      	movs	r3, #2
 80008b0:	f240 6105 	movw	r1, #1541	@ 0x605
 80008b4:	f001 fc68 	bl	8002188 <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80008c0:	e09a      	b.n	80009f8 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80008c2:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80008c6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f103 0018 	add.w	r0, r3, #24
 80008ce:	f107 020a 	add.w	r2, r7, #10
 80008d2:	2302      	movs	r3, #2
 80008d4:	2105      	movs	r1, #5
 80008d6:	f001 fc57 	bl	8002188 <wm8994_write_reg>
 80008da:	4602      	mov	r2, r0
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80008e2:	2301      	movs	r3, #1
 80008e4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f103 0018 	add.w	r0, r3, #24
 80008ec:	f107 020a 	add.w	r2, r7, #10
 80008f0:	2302      	movs	r3, #2
 80008f2:	f240 6101 	movw	r1, #1537	@ 0x601
 80008f6:	f001 fc47 	bl	8002188 <wm8994_write_reg>
 80008fa:	4602      	mov	r2, r0
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f103 0018 	add.w	r0, r3, #24
 8000908:	f107 020a 	add.w	r2, r7, #10
 800090c:	2302      	movs	r3, #2
 800090e:	f240 6102 	movw	r1, #1538	@ 0x602
 8000912:	f001 fc39 	bl	8002188 <wm8994_write_reg>
 8000916:	4602      	mov	r2, r0
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800091e:	2302      	movs	r3, #2
 8000920:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f103 0018 	add.w	r0, r3, #24
 8000928:	f107 020a 	add.w	r2, r7, #10
 800092c:	2302      	movs	r3, #2
 800092e:	f240 6104 	movw	r1, #1540	@ 0x604
 8000932:	f001 fc29 	bl	8002188 <wm8994_write_reg>
 8000936:	4602      	mov	r2, r0
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f103 0018 	add.w	r0, r3, #24
 8000944:	f107 020a 	add.w	r2, r7, #10
 8000948:	2302      	movs	r3, #2
 800094a:	f240 6105 	movw	r1, #1541	@ 0x605
 800094e:	f001 fc1b 	bl	8002188 <wm8994_write_reg>
 8000952:	4602      	mov	r2, r0
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
    break;
 800095a:	e04d      	b.n	80009f8 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800095c:	f240 3303 	movw	r3, #771	@ 0x303
 8000960:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f103 0018 	add.w	r0, r3, #24
 8000968:	f107 020a 	add.w	r2, r7, #10
 800096c:	2302      	movs	r3, #2
 800096e:	2105      	movs	r1, #5
 8000970:	f001 fc0a 	bl	8002188 <wm8994_write_reg>
 8000974:	4602      	mov	r2, r0
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	4413      	add	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 800097c:	2301      	movs	r3, #1
 800097e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f103 0018 	add.w	r0, r3, #24
 8000986:	f107 020a 	add.w	r2, r7, #10
 800098a:	2302      	movs	r3, #2
 800098c:	f240 6101 	movw	r1, #1537	@ 0x601
 8000990:	f001 fbfa 	bl	8002188 <wm8994_write_reg>
 8000994:	4602      	mov	r2, r0
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4413      	add	r3, r2
 800099a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f103 0018 	add.w	r0, r3, #24
 80009a2:	f107 020a 	add.w	r2, r7, #10
 80009a6:	2302      	movs	r3, #2
 80009a8:	f240 6102 	movw	r1, #1538	@ 0x602
 80009ac:	f001 fbec 	bl	8002188 <wm8994_write_reg>
 80009b0:	4602      	mov	r2, r0
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80009b8:	2300      	movs	r3, #0
 80009ba:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f103 0018 	add.w	r0, r3, #24
 80009c2:	f107 020a 	add.w	r2, r7, #10
 80009c6:	2302      	movs	r3, #2
 80009c8:	f240 6104 	movw	r1, #1540	@ 0x604
 80009cc:	f001 fbdc 	bl	8002188 <wm8994_write_reg>
 80009d0:	4602      	mov	r2, r0
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4413      	add	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f103 0018 	add.w	r0, r3, #24
 80009de:	f107 020a 	add.w	r2, r7, #10
 80009e2:	2302      	movs	r3, #2
 80009e4:	f240 6105 	movw	r1, #1541	@ 0x605
 80009e8:	f001 fbce 	bl	8002188 <wm8994_write_reg>
 80009ec:	4602      	mov	r2, r0
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4413      	add	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
    break;
 80009f4:	e000      	b.n	80009f8 <WM8994_Init+0x3f4>
    break;
 80009f6:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	f200 81df 	bhi.w	8000dc2 <WM8994_Init+0x7be>
 8000a04:	a201      	add	r2, pc, #4	@ (adr r2, 8000a0c <WM8994_Init+0x408>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000bf3 	.word	0x08000bf3
 8000a10:	08000a21 	.word	0x08000a21
 8000a14:	08000adf 	.word	0x08000adf
 8000a18:	08000dc3 	.word	0x08000dc3
 8000a1c:	08000cb1 	.word	0x08000cb1
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 8000a20:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 8000a24:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f103 0018 	add.w	r0, r3, #24
 8000a2c:	f107 020a 	add.w	r2, r7, #10
 8000a30:	2302      	movs	r3, #2
 8000a32:	2104      	movs	r1, #4
 8000a34:	f001 fba8 	bl	8002188 <wm8994_write_reg>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8000a40:	23db      	movs	r3, #219	@ 0xdb
 8000a42:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f103 0018 	add.w	r0, r3, #24
 8000a4a:	f107 020a 	add.w	r2, r7, #10
 8000a4e:	2302      	movs	r3, #2
 8000a50:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000a54:	f001 fb98 	bl	8002188 <wm8994_write_reg>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 8000a60:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000a64:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f103 0018 	add.w	r0, r3, #24
 8000a6c:	f107 020a 	add.w	r2, r7, #10
 8000a70:	2302      	movs	r3, #2
 8000a72:	2102      	movs	r1, #2
 8000a74:	f001 fb88 	bl	8002188 <wm8994_write_reg>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 8000a80:	2302      	movs	r3, #2
 8000a82:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f103 0018 	add.w	r0, r3, #24
 8000a8a:	f107 020a 	add.w	r2, r7, #10
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000a94:	f001 fb78 	bl	8002188 <wm8994_write_reg>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f103 0018 	add.w	r0, r3, #24
 8000aa6:	f107 020a 	add.w	r2, r7, #10
 8000aaa:	2302      	movs	r3, #2
 8000aac:	f240 6109 	movw	r1, #1545	@ 0x609
 8000ab0:	f001 fb6a 	bl	8002188 <wm8994_write_reg>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4413      	add	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 8000abc:	230e      	movs	r3, #14
 8000abe:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f103 0018 	add.w	r0, r3, #24
 8000ac6:	f107 020a 	add.w	r2, r7, #10
 8000aca:	2302      	movs	r3, #2
 8000acc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000ad0:	f001 fb5a 	bl	8002188 <wm8994_write_reg>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
    break;
 8000adc:	e172      	b.n	8000dc4 <WM8994_Init+0x7c0>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 8000ade:	2311      	movs	r3, #17
 8000ae0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f103 0018 	add.w	r0, r3, #24
 8000ae8:	f107 020a 	add.w	r2, r7, #10
 8000aec:	2302      	movs	r3, #2
 8000aee:	2128      	movs	r1, #40	@ 0x28
 8000af0:	f001 fb4a 	bl	8002188 <wm8994_write_reg>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000afc:	2335      	movs	r3, #53	@ 0x35
 8000afe:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f103 0018 	add.w	r0, r3, #24
 8000b06:	f107 020a 	add.w	r2, r7, #10
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	2129      	movs	r1, #41	@ 0x29
 8000b0e:	f001 fb3b 	bl	8002188 <wm8994_write_reg>
 8000b12:	4602      	mov	r2, r0
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f103 0018 	add.w	r0, r3, #24
 8000b20:	f107 020a 	add.w	r2, r7, #10
 8000b24:	2302      	movs	r3, #2
 8000b26:	212a      	movs	r1, #42	@ 0x2a
 8000b28:	f001 fb2e 	bl	8002188 <wm8994_write_reg>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8000b34:	f240 3303 	movw	r3, #771	@ 0x303
 8000b38:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f103 0018 	add.w	r0, r3, #24
 8000b40:	f107 020a 	add.w	r2, r7, #10
 8000b44:	2302      	movs	r3, #2
 8000b46:	2104      	movs	r1, #4
 8000b48:	f001 fb1e 	bl	8002188 <wm8994_write_reg>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4413      	add	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000b54:	23db      	movs	r3, #219	@ 0xdb
 8000b56:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f103 0018 	add.w	r0, r3, #24
 8000b5e:	f107 020a 	add.w	r2, r7, #10
 8000b62:	2302      	movs	r3, #2
 8000b64:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000b68:	f001 fb0e 	bl	8002188 <wm8994_write_reg>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000b74:	f246 3350 	movw	r3, #25424	@ 0x6350
 8000b78:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f103 0018 	add.w	r0, r3, #24
 8000b80:	f107 020a 	add.w	r2, r7, #10
 8000b84:	2302      	movs	r3, #2
 8000b86:	2102      	movs	r1, #2
 8000b88:	f001 fafe 	bl	8002188 <wm8994_write_reg>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4413      	add	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000b94:	2302      	movs	r3, #2
 8000b96:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f103 0018 	add.w	r0, r3, #24
 8000b9e:	f107 020a 	add.w	r2, r7, #10
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f240 6106 	movw	r1, #1542	@ 0x606
 8000ba8:	f001 faee 	bl	8002188 <wm8994_write_reg>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f103 0018 	add.w	r0, r3, #24
 8000bba:	f107 020a 	add.w	r2, r7, #10
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f240 6107 	movw	r1, #1543	@ 0x607
 8000bc4:	f001 fae0 	bl	8002188 <wm8994_write_reg>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4413      	add	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;  /*MD was 800D*/
 8000bd0:	230d      	movs	r3, #13
 8000bd2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f103 0018 	add.w	r0, r3, #24
 8000bda:	f107 020a 	add.w	r2, r7, #10
 8000bde:	2302      	movs	r3, #2
 8000be0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000be4:	f001 fad0 	bl	8002188 <wm8994_write_reg>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	4413      	add	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
    break;
 8000bf0:	e0e8      	b.n	8000dc4 <WM8994_Init+0x7c0>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000bf2:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8000bf6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f103 0018 	add.w	r0, r3, #24
 8000bfe:	f107 020a 	add.w	r2, r7, #10
 8000c02:	2302      	movs	r3, #2
 8000c04:	2104      	movs	r1, #4
 8000c06:	f001 fabf 	bl	8002188 <wm8994_write_reg>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8000c12:	23db      	movs	r3, #219	@ 0xdb
 8000c14:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f103 0018 	add.w	r0, r3, #24
 8000c1c:	f107 020a 	add.w	r2, r7, #10
 8000c20:	2302      	movs	r3, #2
 8000c22:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000c26:	f001 faaf 	bl	8002188 <wm8994_write_reg>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000c32:	f246 3350 	movw	r3, #25424	@ 0x6350
 8000c36:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f103 0018 	add.w	r0, r3, #24
 8000c3e:	f107 020a 	add.w	r2, r7, #10
 8000c42:	2302      	movs	r3, #2
 8000c44:	2102      	movs	r1, #2
 8000c46:	f001 fa9f 	bl	8002188 <wm8994_write_reg>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000c52:	2302      	movs	r3, #2
 8000c54:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f103 0018 	add.w	r0, r3, #24
 8000c5c:	f107 020a 	add.w	r2, r7, #10
 8000c60:	2302      	movs	r3, #2
 8000c62:	f240 6106 	movw	r1, #1542	@ 0x606
 8000c66:	f001 fa8f 	bl	8002188 <wm8994_write_reg>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f103 0018 	add.w	r0, r3, #24
 8000c78:	f107 020a 	add.w	r2, r7, #10
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f240 6107 	movw	r1, #1543	@ 0x607
 8000c82:	f001 fa81 	bl	8002188 <wm8994_write_reg>
 8000c86:	4602      	mov	r2, r0
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000c8e:	230d      	movs	r3, #13
 8000c90:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f103 0018 	add.w	r0, r3, #24
 8000c98:	f107 020a 	add.w	r2, r7, #10
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000ca2:	f001 fa71 	bl	8002188 <wm8994_write_reg>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
    break;
 8000cae:	e089      	b.n	8000dc4 <WM8994_Init+0x7c0>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 8000cb0:	f640 733c 	movw	r3, #3900	@ 0xf3c
 8000cb4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f103 0018 	add.w	r0, r3, #24
 8000cbc:	f107 020a 	add.w	r2, r7, #10
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	f001 fa60 	bl	8002188 <wm8994_write_reg>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8000cd0:	23db      	movs	r3, #219	@ 0xdb
 8000cd2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f103 0018 	add.w	r0, r3, #24
 8000cda:	f107 020a 	add.w	r2, r7, #10
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000ce4:	f001 fa50 	bl	8002188 <wm8994_write_reg>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4413      	add	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f103 0018 	add.w	r0, r3, #24
 8000cf6:	f107 020a 	add.w	r2, r7, #10
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000d00:	f001 fa42 	bl	8002188 <wm8994_write_reg>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4413      	add	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000d0c:	f246 33a0 	movw	r3, #25504	@ 0x63a0
 8000d10:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f103 0018 	add.w	r0, r3, #24
 8000d18:	f107 020a 	add.w	r2, r7, #10
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	2102      	movs	r1, #2
 8000d20:	f001 fa32 	bl	8002188 <wm8994_write_reg>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f103 0018 	add.w	r0, r3, #24
 8000d36:	f107 020a 	add.w	r2, r7, #10
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f240 6106 	movw	r1, #1542	@ 0x606
 8000d40:	f001 fa22 	bl	8002188 <wm8994_write_reg>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4413      	add	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f103 0018 	add.w	r0, r3, #24
 8000d52:	f107 020a 	add.w	r2, r7, #10
 8000d56:	2302      	movs	r3, #2
 8000d58:	f240 6107 	movw	r1, #1543	@ 0x607
 8000d5c:	f001 fa14 	bl	8002188 <wm8994_write_reg>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f103 0018 	add.w	r0, r3, #24
 8000d6e:	f107 020a 	add.w	r2, r7, #10
 8000d72:	2302      	movs	r3, #2
 8000d74:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000d78:	f001 fa06 	bl	8002188 <wm8994_write_reg>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f103 0018 	add.w	r0, r3, #24
 8000d8a:	f107 020a 	add.w	r2, r7, #10
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f240 6109 	movw	r1, #1545	@ 0x609
 8000d94:	f001 f9f8 	bl	8002188 <wm8994_write_reg>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000da0:	230d      	movs	r3, #13
 8000da2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f103 0018 	add.w	r0, r3, #24
 8000daa:	f107 020a 	add.w	r2, r7, #10
 8000dae:	2302      	movs	r3, #2
 8000db0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000db4:	f001 f9e8 	bl	8002188 <wm8994_write_reg>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000dc0:	e000      	b.n	8000dc4 <WM8994_Init+0x7c0>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000dc2:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 fff2 	bl	8001db4 <WM8994_SetFrequency>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	d11a      	bne.n	8000e16 <WM8994_Init+0x812>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 ff52 	bl	8001c8c <WM8994_SetResolution>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000df0:	2103      	movs	r1, #3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 ffa4 	bl	8001d40 <WM8994_SetProtocol>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3318      	adds	r3, #24
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 faee 	bl	80023e8 <wm8994_aif1_control1_adcr_src>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e01b      	b.n	8000e4e <WM8994_Init+0x84a>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 ff35 	bl	8001c8c <WM8994_SetResolution>
 8000e22:	4602      	mov	r2, r0
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 ff87 	bl	8001d40 <WM8994_SetProtocol>
 8000e32:	4602      	mov	r2, r0
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3318      	adds	r3, #24
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fad1 	bl	80023e8 <wm8994_aif1_control1_adcr_src>
 8000e46:	4602      	mov	r2, r0
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f103 0018 	add.w	r0, r3, #24
 8000e58:	f107 020a 	add.w	r2, r7, #10
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f240 3102 	movw	r1, #770	@ 0x302
 8000e62:	f001 f991 	bl	8002188 <wm8994_write_reg>
 8000e66:	4602      	mov	r2, r0
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000e6e:	230a      	movs	r3, #10
 8000e70:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f103 0018 	add.w	r0, r3, #24
 8000e78:	f107 020a 	add.w	r2, r7, #10
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8000e82:	f001 f981 	bl	8002188 <wm8994_write_reg>
 8000e86:	4602      	mov	r2, r0
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f103 0018 	add.w	r0, r3, #24
 8000e98:	f107 020a 	add.w	r2, r7, #10
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea2:	f001 f971 	bl	8002188 <wm8994_write_reg>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 81c2 	beq.w	800123c <WM8994_Init+0xc38>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d164      	bne.n	8000f8a <WM8994_Init+0x986>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d160      	bne.n	8000f8a <WM8994_Init+0x986>
    {    
      tmp = 0x0100;
 8000ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ecc:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	f103 0018 	add.w	r0, r3, #24
 8000ed4:	f107 020a 	add.w	r2, r7, #10
 8000ed8:	2302      	movs	r3, #2
 8000eda:	212d      	movs	r1, #45	@ 0x2d
 8000edc:	f001 f954 	bl	8002188 <wm8994_write_reg>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f103 0018 	add.w	r0, r3, #24
 8000eee:	f107 020a 	add.w	r2, r7, #10
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	212e      	movs	r1, #46	@ 0x2e
 8000ef6:	f001 f947 	bl	8002188 <wm8994_write_reg>
 8000efa:	4602      	mov	r2, r0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000f02:	4b52      	ldr	r3, [pc, #328]	@ (800104c <WM8994_Init+0xa48>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d119      	bne.n	8000f3e <WM8994_Init+0x93a>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000f0a:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000f0e:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f103 0018 	add.w	r0, r3, #24
 8000f16:	f107 020a 	add.w	r2, r7, #10
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000f20:	f001 f932 	bl	8002188 <wm8994_write_reg>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000f2c:	4b47      	ldr	r3, [pc, #284]	@ (800104c <WM8994_Init+0xa48>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000f32:	f240 1145 	movw	r1, #325	@ 0x145
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f001 f8ae 	bl	8002098 <WM8994_Delay>
 8000f3c:	e014      	b.n	8000f68 <WM8994_Init+0x964>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000f3e:	f248 1308 	movw	r3, #33032	@ 0x8108
 8000f42:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f103 0018 	add.w	r0, r3, #24
 8000f4a:	f107 020a 	add.w	r2, r7, #10
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000f54:	f001 f918 	bl	8002188 <wm8994_write_reg>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000f60:	2132      	movs	r1, #50	@ 0x32
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f001 f898 	bl	8002098 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f103 0018 	add.w	r0, r3, #24
 8000f72:	f107 020a 	add.w	r2, r7, #10
 8000f76:	2302      	movs	r3, #2
 8000f78:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000f7c:	f001 f904 	bl	8002188 <wm8994_write_reg>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e0f3      	b.n	8001172 <WM8994_Init+0xb6e>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000f8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f8e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f103 0018 	add.w	r0, r3, #24
 8000f96:	f107 020a 	add.w	r2, r7, #10
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	2103      	movs	r1, #3
 8000f9e:	f001 f8f3 	bl	8002188 <wm8994_write_reg>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000faa:	2300      	movs	r3, #0
 8000fac:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f103 0018 	add.w	r0, r3, #24
 8000fb4:	f107 020a 	add.w	r2, r7, #10
 8000fb8:	2302      	movs	r3, #2
 8000fba:	2122      	movs	r1, #34	@ 0x22
 8000fbc:	f001 f8e4 	bl	8002188 <wm8994_write_reg>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f103 0018 	add.w	r0, r3, #24
 8000fce:	f107 020a 	add.w	r2, r7, #10
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	2123      	movs	r1, #35	@ 0x23
 8000fd6:	f001 f8d7 	bl	8002188 <wm8994_write_reg>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f103 0018 	add.w	r0, r3, #24
 8000fee:	f107 020a 	add.w	r2, r7, #10
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	2136      	movs	r1, #54	@ 0x36
 8000ff6:	f001 f8c7 	bl	8002188 <wm8994_write_reg>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8001002:	f243 0303 	movw	r3, #12291	@ 0x3003
 8001006:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f103 0018 	add.w	r0, r3, #24
 800100e:	f107 020a 	add.w	r2, r7, #10
 8001012:	2302      	movs	r3, #2
 8001014:	2101      	movs	r1, #1
 8001016:	f001 f8b7 	bl	8002188 <wm8994_write_reg>
 800101a:	4602      	mov	r2, r0
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d112      	bne.n	8001050 <WM8994_Init+0xa4c>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 800102a:	f240 2305 	movw	r3, #517	@ 0x205
 800102e:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f103 0018 	add.w	r0, r3, #24
 8001036:	f107 020a 	add.w	r2, r7, #10
 800103a:	2302      	movs	r3, #2
 800103c:	2151      	movs	r1, #81	@ 0x51
 800103e:	f001 f8a3 	bl	8002188 <wm8994_write_reg>
 8001042:	4602      	mov	r2, r0
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e010      	b.n	800106e <WM8994_Init+0xa6a>
 800104c:	24000448 	.word	0x24000448
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8001050:	2305      	movs	r3, #5
 8001052:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f103 0018 	add.w	r0, r3, #24
 800105a:	f107 020a 	add.w	r2, r7, #10
 800105e:	2302      	movs	r3, #2
 8001060:	2151      	movs	r1, #81	@ 0x51
 8001062:	f001 f891 	bl	8002188 <wm8994_write_reg>
 8001066:	4602      	mov	r2, r0
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 800106e:	f243 3303 	movw	r3, #13059	@ 0x3303
 8001072:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f103 0018 	add.w	r0, r3, #24
 800107a:	f107 020a 	add.w	r2, r7, #10
 800107e:	2302      	movs	r3, #2
 8001080:	2101      	movs	r1, #1
 8001082:	f001 f881 	bl	8002188 <wm8994_write_reg>
 8001086:	4602      	mov	r2, r0
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 800108e:	2322      	movs	r3, #34	@ 0x22
 8001090:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f103 0018 	add.w	r0, r3, #24
 8001098:	f107 020a 	add.w	r2, r7, #10
 800109c:	2302      	movs	r3, #2
 800109e:	2160      	movs	r1, #96	@ 0x60
 80010a0:	f001 f872 	bl	8002188 <wm8994_write_reg>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4413      	add	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 80010ac:	f649 7325 	movw	r3, #40741	@ 0x9f25
 80010b0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f103 0018 	add.w	r0, r3, #24
 80010b8:	f107 020a 	add.w	r2, r7, #10
 80010bc:	2302      	movs	r3, #2
 80010be:	214c      	movs	r1, #76	@ 0x4c
 80010c0:	f001 f862 	bl	8002188 <wm8994_write_reg>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 80010cc:	210f      	movs	r1, #15
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 ffe2 	bl	8002098 <WM8994_Delay>
      
      tmp = 0x0001;
 80010d4:	2301      	movs	r3, #1
 80010d6:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f103 0018 	add.w	r0, r3, #24
 80010de:	f107 020a 	add.w	r2, r7, #10
 80010e2:	2302      	movs	r3, #2
 80010e4:	212d      	movs	r1, #45	@ 0x2d
 80010e6:	f001 f84f 	bl	8002188 <wm8994_write_reg>
 80010ea:	4602      	mov	r2, r0
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f103 0018 	add.w	r0, r3, #24
 80010f8:	f107 020a 	add.w	r2, r7, #10
 80010fc:	2302      	movs	r3, #2
 80010fe:	212e      	movs	r1, #46	@ 0x2e
 8001100:	f001 f842 	bl	8002188 <wm8994_write_reg>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 800110c:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8001110:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f103 0018 	add.w	r0, r3, #24
 8001118:	f107 020a 	add.w	r2, r7, #10
 800111c:	2302      	movs	r3, #2
 800111e:	2103      	movs	r1, #3
 8001120:	f001 f832 	bl	8002188 <wm8994_write_reg>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 800112c:	2333      	movs	r3, #51	@ 0x33
 800112e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f103 0018 	add.w	r0, r3, #24
 8001136:	f107 020a 	add.w	r2, r7, #10
 800113a:	2302      	movs	r3, #2
 800113c:	2154      	movs	r1, #84	@ 0x54
 800113e:	f001 f823 	bl	8002188 <wm8994_write_reg>
 8001142:	4602      	mov	r2, r0
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 800114a:	f240 1101 	movw	r1, #257	@ 0x101
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 ffa2 	bl	8002098 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8001154:	23ee      	movs	r3, #238	@ 0xee
 8001156:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f103 0018 	add.w	r0, r3, #24
 800115e:	f107 020a 	add.w	r2, r7, #10
 8001162:	2302      	movs	r3, #2
 8001164:	2160      	movs	r1, #96	@ 0x60
 8001166:	f001 f80f 	bl	8002188 <wm8994_write_reg>
 800116a:	4602      	mov	r2, r0
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8001172:	23c0      	movs	r3, #192	@ 0xc0
 8001174:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f103 0018 	add.w	r0, r3, #24
 800117c:	f107 020a 	add.w	r2, r7, #10
 8001180:	2302      	movs	r3, #2
 8001182:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8001186:	f000 ffff 	bl	8002188 <wm8994_write_reg>
 800118a:	4602      	mov	r2, r0
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f103 0018 	add.w	r0, r3, #24
 8001198:	f107 020a 	add.w	r2, r7, #10
 800119c:	2302      	movs	r3, #2
 800119e:	f240 6111 	movw	r1, #1553	@ 0x611
 80011a2:	f000 fff1 	bl	8002188 <wm8994_write_reg>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 80011ae:	2310      	movs	r3, #16
 80011b0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f103 0018 	add.w	r0, r3, #24
 80011b8:	f107 020a 	add.w	r2, r7, #10
 80011bc:	2302      	movs	r3, #2
 80011be:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80011c2:	f000 ffe1 	bl	8002188 <wm8994_write_reg>
 80011c6:	4602      	mov	r2, r0
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 80011ce:	23c0      	movs	r3, #192	@ 0xc0
 80011d0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f103 0018 	add.w	r0, r3, #24
 80011d8:	f107 020a 	add.w	r2, r7, #10
 80011dc:	2302      	movs	r3, #2
 80011de:	f240 6112 	movw	r1, #1554	@ 0x612
 80011e2:	f000 ffd1 	bl	8002188 <wm8994_write_reg>
 80011e6:	4602      	mov	r2, r0
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f103 0018 	add.w	r0, r3, #24
 80011f4:	f107 020a 	add.w	r2, r7, #10
 80011f8:	2302      	movs	r3, #2
 80011fa:	f240 6113 	movw	r1, #1555	@ 0x613
 80011fe:	f000 ffc3 	bl	8002188 <wm8994_write_reg>
 8001202:	4602      	mov	r2, r0
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 800120a:	2310      	movs	r3, #16
 800120c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f103 0018 	add.w	r0, r3, #24
 8001214:	f107 020a 	add.w	r2, r7, #10
 8001218:	2302      	movs	r3, #2
 800121a:	f240 4122 	movw	r1, #1058	@ 0x422
 800121e:	f000 ffb3 	bl	8002188 <wm8994_write_reg>
 8001222:	4602      	mov	r2, r0
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4413      	add	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t) OUTPUT_LEVEL);
 800122a:	223f      	movs	r2, #63	@ 0x3f
 800122c:	2101      	movs	r1, #1
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f99c 	bl	800156c <WM8994_SetVolume>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	f000 80b2 	beq.w	80013aa <WM8994_Init+0xda6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d003      	beq.n	8001256 <WM8994_Init+0xc52>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <WM8994_Init+0xcb4>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8001256:	2313      	movs	r3, #19
 8001258:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f103 0018 	add.w	r0, r3, #24
 8001260:	f107 020a 	add.w	r2, r7, #10
 8001264:	2302      	movs	r3, #2
 8001266:	2101      	movs	r1, #1
 8001268:	f000 ff8e 	bl	8002188 <wm8994_write_reg>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8001274:	2302      	movs	r3, #2
 8001276:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f103 0018 	add.w	r0, r3, #24
 800127e:	f107 020a 	add.w	r2, r7, #10
 8001282:	2302      	movs	r3, #2
 8001284:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001288:	f000 ff7e 	bl	8002188 <wm8994_write_reg>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4413      	add	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 8001294:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001298:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f103 0018 	add.w	r0, r3, #24
 80012a0:	f107 020a 	add.w	r2, r7, #10
 80012a4:	2302      	movs	r3, #2
 80012a6:	f240 4111 	movw	r1, #1041	@ 0x411
 80012aa:	f000 ff6d 	bl	8002188 <wm8994_write_reg>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e06f      	b.n	8001398 <WM8994_Init+0xd94>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d13e      	bne.n	800133e <WM8994_Init+0xd3a>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 80012c0:	2313      	movs	r3, #19
 80012c2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f103 0018 	add.w	r0, r3, #24
 80012ca:	f107 020a 	add.w	r2, r7, #10
 80012ce:	2302      	movs	r3, #2
 80012d0:	2101      	movs	r1, #1
 80012d2:	f000 ff59 	bl	8002188 <wm8994_write_reg>
 80012d6:	4602      	mov	r2, r0
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 80012de:	2302      	movs	r3, #2
 80012e0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f103 0018 	add.w	r0, r3, #24
 80012e8:	f107 020a 	add.w	r2, r7, #10
 80012ec:	2302      	movs	r3, #2
 80012ee:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80012f2:	f000 ff49 	bl	8002188 <wm8994_write_reg>
 80012f6:	4602      	mov	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 80012fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001302:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f103 0018 	add.w	r0, r3, #24
 800130a:	f107 020a 	add.w	r2, r7, #10
 800130e:	2302      	movs	r3, #2
 8001310:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001314:	f000 ff38 	bl	8002188 <wm8994_write_reg>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f103 0018 	add.w	r0, r3, #24
 8001326:	f107 020a 	add.w	r2, r7, #10
 800132a:	2302      	movs	r3, #2
 800132c:	f240 4111 	movw	r1, #1041	@ 0x411
 8001330:	f000 ff2a 	bl	8002188 <wm8994_write_reg>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4413      	add	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e02c      	b.n	8001398 <WM8994_Init+0xd94>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 800133e:	230b      	movs	r3, #11
 8001340:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f103 0018 	add.w	r0, r3, #24
 8001348:	f107 020a 	add.w	r2, r7, #10
 800134c:	2302      	movs	r3, #2
 800134e:	2118      	movs	r1, #24
 8001350:	f000 ff1a 	bl	8002188 <wm8994_write_reg>
 8001354:	4602      	mov	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 0018 	add.w	r0, r3, #24
 8001362:	f107 020a 	add.w	r2, r7, #10
 8001366:	2302      	movs	r3, #2
 8001368:	211a      	movs	r1, #26
 800136a:	f000 ff0d 	bl	8002188 <wm8994_write_reg>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001376:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800137a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f103 0018 	add.w	r0, r3, #24
 8001382:	f107 020a 	add.w	r2, r7, #10
 8001386:	2302      	movs	r3, #2
 8001388:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800138c:	f000 fefc 	bl	8002188 <wm8994_write_reg>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t) INPUT_LEVEL);
 8001398:	228a      	movs	r2, #138	@ 0x8a
 800139a:	2100      	movs	r1, #0
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f8e5 	bl	800156c <WM8994_SetVolume>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <WM8994_Init+0xdb2>
  {
    ret = WM8994_ERROR;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 80013c8:	2100      	movs	r1, #0
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f861 	bl	8001492 <WM8994_Stop>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3318      	adds	r3, #24
 80013ee:	f107 020a 	add.w	r2, r7, #10
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 ff00 	bl	80021fa <wm8994_sw_reset_r>
 80013fa:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 80013fc:	897b      	ldrh	r3, [r7, #10]
 80013fe:	461a      	mov	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	601a      	str	r2, [r3, #0]
  
  return ret;
 8001404:	68fb      	ldr	r3, [r7, #12]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f9d3 	bl	80017c4 <WM8994_SetMute>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 8001430:	2301      	movs	r3, #1
 8001432:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 8001434:	2101      	movs	r1, #1
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f000 f9c4 	bl	80017c4 <WM8994_SetMute>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e011      	b.n	800146e <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f103 0018 	add.w	r0, r3, #24
 8001450:	f107 020a 	add.w	r2, r7, #10
 8001454:	2302      	movs	r3, #2
 8001456:	2102      	movs	r1, #2
 8001458:	f000 fe96 	bl	8002188 <wm8994_write_reg>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e001      	b.n	800146e <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f99e 	bl	80017c4 <WM8994_SetMute>
 8001488:	4603      	mov	r3, r0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 800149c:	2101      	movs	r1, #1
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f990 	bl	80017c4 <WM8994_SetMute>
 80014a4:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d054      	beq.n	8001556 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 80014ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b0:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f103 0018 	add.w	r0, r3, #24
 80014b8:	f107 020a 	add.w	r2, r7, #10
 80014bc:	2302      	movs	r3, #2
 80014be:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80014c2:	f000 fe61 	bl	8002188 <wm8994_write_reg>
 80014c6:	4602      	mov	r2, r0
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f103 0018 	add.w	r0, r3, #24
 80014d4:	f107 020a 	add.w	r2, r7, #10
 80014d8:	2302      	movs	r3, #2
 80014da:	f240 4122 	movw	r1, #1058	@ 0x422
 80014de:	f000 fe53 	bl	8002188 <wm8994_write_reg>
 80014e2:	4602      	mov	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 80014ea:	2300      	movs	r3, #0
 80014ec:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f103 0018 	add.w	r0, r3, #24
 80014f4:	f107 020a 	add.w	r2, r7, #10
 80014f8:	2302      	movs	r3, #2
 80014fa:	212d      	movs	r1, #45	@ 0x2d
 80014fc:	f000 fe44 	bl	8002188 <wm8994_write_reg>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f103 0018 	add.w	r0, r3, #24
 800150e:	f107 020a 	add.w	r2, r7, #10
 8001512:	2302      	movs	r3, #2
 8001514:	212e      	movs	r1, #46	@ 0x2e
 8001516:	f000 fe37 	bl	8002188 <wm8994_write_reg>
 800151a:	4602      	mov	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f103 0018 	add.w	r0, r3, #24
 8001528:	f107 020a 	add.w	r2, r7, #10
 800152c:	2302      	movs	r3, #2
 800152e:	2105      	movs	r1, #5
 8001530:	f000 fe2a 	bl	8002188 <wm8994_write_reg>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f103 0018 	add.w	r0, r3, #24
 8001542:	f107 020a 	add.w	r2, r7, #10
 8001546:	2302      	movs	r3, #2
 8001548:	2100      	movs	r1, #0
 800154a:	f000 fe1d 	bl	8002188 <wm8994_write_reg>
 800154e:	4602      	mov	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	f040 8089 	bne.w	8001694 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b3e      	cmp	r3, #62	@ 0x3e
 8001586:	d93c      	bls.n	8001602 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001588:	2100      	movs	r1, #0
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f91a 	bl	80017c4 <WM8994_SetMute>
 8001590:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8001592:	f240 137f 	movw	r3, #383	@ 0x17f
 8001596:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f103 0018 	add.w	r0, r3, #24
 800159e:	f107 0212 	add.w	r2, r7, #18
 80015a2:	2302      	movs	r3, #2
 80015a4:	211c      	movs	r1, #28
 80015a6:	f000 fdef 	bl	8002188 <wm8994_write_reg>
 80015aa:	4602      	mov	r2, r0
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	4413      	add	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f103 0018 	add.w	r0, r3, #24
 80015b8:	f107 0212 	add.w	r2, r7, #18
 80015bc:	2302      	movs	r3, #2
 80015be:	211d      	movs	r1, #29
 80015c0:	f000 fde2 	bl	8002188 <wm8994_write_reg>
 80015c4:	4602      	mov	r2, r0
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f103 0018 	add.w	r0, r3, #24
 80015d2:	f107 0212 	add.w	r2, r7, #18
 80015d6:	2302      	movs	r3, #2
 80015d8:	2126      	movs	r1, #38	@ 0x26
 80015da:	f000 fdd5 	bl	8002188 <wm8994_write_reg>
 80015de:	4602      	mov	r2, r0
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f103 0018 	add.w	r0, r3, #24
 80015ec:	f107 0212 	add.w	r2, r7, #18
 80015f0:	2302      	movs	r3, #2
 80015f2:	2127      	movs	r1, #39	@ 0x27
 80015f4:	f000 fdc8 	bl	8002188 <wm8994_write_reg>
 80015f8:	4602      	mov	r2, r0
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4413      	add	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e083      	b.n	800170a <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8001608:	2101      	movs	r1, #1
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f8da 	bl	80017c4 <WM8994_SetMute>
 8001610:	6178      	str	r0, [r7, #20]
 8001612:	e07a      	b.n	800170a <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001614:	2100      	movs	r1, #0
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 f8d4 	bl	80017c4 <WM8994_SetMute>
 800161c:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	b29b      	uxth	r3, r3
 8001622:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8001626:	b29b      	uxth	r3, r3
 8001628:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f103 0018 	add.w	r0, r3, #24
 8001630:	f107 0212 	add.w	r2, r7, #18
 8001634:	2302      	movs	r3, #2
 8001636:	211c      	movs	r1, #28
 8001638:	f000 fda6 	bl	8002188 <wm8994_write_reg>
 800163c:	4602      	mov	r2, r0
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f103 0018 	add.w	r0, r3, #24
 800164a:	f107 0212 	add.w	r2, r7, #18
 800164e:	2302      	movs	r3, #2
 8001650:	211d      	movs	r1, #29
 8001652:	f000 fd99 	bl	8002188 <wm8994_write_reg>
 8001656:	4602      	mov	r2, r0
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f103 0018 	add.w	r0, r3, #24
 8001664:	f107 0212 	add.w	r2, r7, #18
 8001668:	2302      	movs	r3, #2
 800166a:	2126      	movs	r1, #38	@ 0x26
 800166c:	f000 fd8c 	bl	8002188 <wm8994_write_reg>
 8001670:	4602      	mov	r2, r0
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	4413      	add	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f103 0018 	add.w	r0, r3, #24
 800167e:	f107 0212 	add.w	r2, r7, #18
 8001682:	2302      	movs	r3, #2
 8001684:	2127      	movs	r1, #39	@ 0x27
 8001686:	f000 fd7f 	bl	8002188 <wm8994_write_reg>
 800168a:	4602      	mov	r2, r0
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e03a      	b.n	800170a <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	b29b      	uxth	r3, r3
 8001698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169c:	b29b      	uxth	r3, r3
 800169e:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f103 0018 	add.w	r0, r3, #24
 80016a6:	f107 0212 	add.w	r2, r7, #18
 80016aa:	2302      	movs	r3, #2
 80016ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016b0:	f000 fd6a 	bl	8002188 <wm8994_write_reg>
 80016b4:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f103 0018 	add.w	r0, r3, #24
 80016bc:	f107 0212 	add.w	r2, r7, #18
 80016c0:	2302      	movs	r3, #2
 80016c2:	f240 4101 	movw	r1, #1025	@ 0x401
 80016c6:	f000 fd5f 	bl	8002188 <wm8994_write_reg>
 80016ca:	4602      	mov	r2, r0
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f103 0018 	add.w	r0, r3, #24
 80016d8:	f107 0212 	add.w	r2, r7, #18
 80016dc:	2302      	movs	r3, #2
 80016de:	f240 4104 	movw	r1, #1028	@ 0x404
 80016e2:	f000 fd51 	bl	8002188 <wm8994_write_reg>
 80016e6:	4602      	mov	r2, r0
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f103 0018 	add.w	r0, r3, #24
 80016f4:	f107 0212 	add.w	r2, r7, #18
 80016f8:	2302      	movs	r3, #2
 80016fa:	f240 4105 	movw	r1, #1029	@ 0x405
 80016fe:	f000 fd43 	bl	8002188 <wm8994_write_reg>
 8001702:	4602      	mov	r2, r0
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001716:	697b      	ldr	r3, [r7, #20]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d11e      	bne.n	8001774 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3318      	adds	r3, #24
 800173a:	f107 0212 	add.w	r2, r7, #18
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fd6a 	bl	800221a <wm8994_lo_hpout1l_vol_r>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e02d      	b.n	80017b0 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8001754:	8a7b      	ldrh	r3, [r7, #18]
 8001756:	461a      	mov	r2, r3
 8001758:	2364      	movs	r3, #100	@ 0x64
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <WM8994_GetVolume+0x9c>)
 8001760:	fb82 1203 	smull	r1, r2, r2, r3
 8001764:	441a      	add	r2, r3
 8001766:	1152      	asrs	r2, r2, #5
 8001768:	17db      	asrs	r3, r3, #31
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e01d      	b.n	80017b0 <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3318      	adds	r3, #24
 8001778:	f107 0212 	add.w	r2, r7, #18
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fe63 	bl	800244a <wm8994_aif1_adc1_left_vol_adc1l_r>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e00e      	b.n	80017b0 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 8001792:	8a7b      	ldrh	r3, [r7, #18]
 8001794:	461a      	mov	r2, r3
 8001796:	2364      	movs	r3, #100	@ 0x64
 8001798:	fb02 f303 	mul.w	r3, r2, r3
 800179c:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <WM8994_GetVolume+0xa0>)
 800179e:	fb82 1203 	smull	r1, r2, r2, r3
 80017a2:	441a      	add	r2, r3
 80017a4:	11d2      	asrs	r2, r2, #7
 80017a6:	17db      	asrs	r3, r3, #31
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 80017b0:	697b      	ldr	r3, [r7, #20]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	82082083 	.word	0x82082083
 80017c0:	891ac73b 	.word	0x891ac73b

080017c4 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d11c      	bne.n	800180e <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80017d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017d8:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f103 0018 	add.w	r0, r3, #24
 80017e0:	f107 020a 	add.w	r2, r7, #10
 80017e4:	2302      	movs	r3, #2
 80017e6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80017ea:	f000 fccd 	bl	8002188 <wm8994_write_reg>
 80017ee:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 0018 	add.w	r0, r3, #24
 80017f6:	f107 020a 	add.w	r2, r7, #10
 80017fa:	2302      	movs	r3, #2
 80017fc:	f240 4122 	movw	r1, #1058	@ 0x422
 8001800:	f000 fcc2 	bl	8002188 <wm8994_write_reg>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e01a      	b.n	8001844 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 800180e:	2310      	movs	r3, #16
 8001810:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f103 0018 	add.w	r0, r3, #24
 8001818:	f107 020a 	add.w	r2, r7, #10
 800181c:	2302      	movs	r3, #2
 800181e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001822:	f000 fcb1 	bl	8002188 <wm8994_write_reg>
 8001826:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f103 0018 	add.w	r0, r3, #24
 800182e:	f107 020a 	add.w	r2, r7, #10
 8001832:	2302      	movs	r3, #2
 8001834:	f240 4122 	movw	r1, #1058	@ 0x422
 8001838:	f000 fca6 	bl	8002188 <wm8994_write_reg>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001850:	68fb      	ldr	r3, [r7, #12]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <WM8994_SetOutputMode+0x18>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b04      	cmp	r3, #4
 800186e:	f040 809c 	bne.w	80019aa <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 8001872:	2300      	movs	r3, #0
 8001874:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f103 0018 	add.w	r0, r3, #24
 800187c:	f107 020a 	add.w	r2, r7, #10
 8001880:	2302      	movs	r3, #2
 8001882:	2101      	movs	r1, #1
 8001884:	f000 fc80 	bl	8002188 <wm8994_write_reg>
 8001888:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800188a:	f240 3303 	movw	r3, #771	@ 0x303
 800188e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f103 0018 	add.w	r0, r3, #24
 8001896:	f107 020a 	add.w	r2, r7, #10
 800189a:	2302      	movs	r3, #2
 800189c:	2105      	movs	r1, #5
 800189e:	f000 fc73 	bl	8002188 <wm8994_write_reg>
 80018a2:	4602      	mov	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80018aa:	2301      	movs	r3, #1
 80018ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f103 0018 	add.w	r0, r3, #24
 80018b4:	f107 020a 	add.w	r2, r7, #10
 80018b8:	2302      	movs	r3, #2
 80018ba:	f240 6101 	movw	r1, #1537	@ 0x601
 80018be:	f000 fc63 	bl	8002188 <wm8994_write_reg>
 80018c2:	4602      	mov	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f103 0018 	add.w	r0, r3, #24
 80018d0:	f107 020a 	add.w	r2, r7, #10
 80018d4:	2302      	movs	r3, #2
 80018d6:	f240 6102 	movw	r1, #1538	@ 0x602
 80018da:	f000 fc55 	bl	8002188 <wm8994_write_reg>
 80018de:	4602      	mov	r2, r0
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80018e6:	2300      	movs	r3, #0
 80018e8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f103 0018 	add.w	r0, r3, #24
 80018f0:	f107 020a 	add.w	r2, r7, #10
 80018f4:	2302      	movs	r3, #2
 80018f6:	f240 6104 	movw	r1, #1540	@ 0x604
 80018fa:	f000 fc45 	bl	8002188 <wm8994_write_reg>
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f103 0018 	add.w	r0, r3, #24
 800190c:	f107 020a 	add.w	r2, r7, #10
 8001910:	2302      	movs	r3, #2
 8001912:	f240 6105 	movw	r1, #1541	@ 0x605
 8001916:	f000 fc37 	bl	8002188 <wm8994_write_reg>
 800191a:	4602      	mov	r2, r0
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 8001922:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001926:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f103 0018 	add.w	r0, r3, #24
 800192e:	f107 020a 	add.w	r2, r7, #10
 8001932:	2302      	movs	r3, #2
 8001934:	212d      	movs	r1, #45	@ 0x2d
 8001936:	f000 fc27 	bl	8002188 <wm8994_write_reg>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f103 0018 	add.w	r0, r3, #24
 8001948:	f107 020a 	add.w	r2, r7, #10
 800194c:	2302      	movs	r3, #2
 800194e:	212e      	movs	r1, #46	@ 0x2e
 8001950:	f000 fc1a 	bl	8002188 <wm8994_write_reg>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 800195c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001960:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f103 0018 	add.w	r0, r3, #24
 8001968:	f107 020a 	add.w	r2, r7, #10
 800196c:	2302      	movs	r3, #2
 800196e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001972:	f000 fc09 	bl	8002188 <wm8994_write_reg>
 8001976:	4602      	mov	r2, r0
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 800197e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fb88 	bl	8002098 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 8001988:	2300      	movs	r3, #0
 800198a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f103 0018 	add.w	r0, r3, #24
 8001992:	f107 020a 	add.w	r2, r7, #10
 8001996:	2302      	movs	r3, #2
 8001998:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800199c:	f000 fbf4 	bl	8002188 <wm8994_write_reg>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e165      	b.n	8001c76 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d149      	bne.n	8001a44 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 80019b0:	f640 430c 	movw	r3, #3084	@ 0xc0c
 80019b4:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f103 0018 	add.w	r0, r3, #24
 80019bc:	f107 020a 	add.w	r2, r7, #10
 80019c0:	2302      	movs	r3, #2
 80019c2:	2105      	movs	r1, #5
 80019c4:	f000 fbe0 	bl	8002188 <wm8994_write_reg>
 80019c8:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 80019ca:	2300      	movs	r3, #0
 80019cc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f103 0018 	add.w	r0, r3, #24
 80019d4:	f107 020a 	add.w	r2, r7, #10
 80019d8:	2302      	movs	r3, #2
 80019da:	f240 6101 	movw	r1, #1537	@ 0x601
 80019de:	f000 fbd3 	bl	8002188 <wm8994_write_reg>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f103 0018 	add.w	r0, r3, #24
 80019f0:	f107 020a 	add.w	r2, r7, #10
 80019f4:	2302      	movs	r3, #2
 80019f6:	f240 6102 	movw	r1, #1538	@ 0x602
 80019fa:	f000 fbc5 	bl	8002188 <wm8994_write_reg>
 80019fe:	4602      	mov	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001a06:	2302      	movs	r3, #2
 8001a08:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f103 0018 	add.w	r0, r3, #24
 8001a10:	f107 020a 	add.w	r2, r7, #10
 8001a14:	2302      	movs	r3, #2
 8001a16:	f240 6104 	movw	r1, #1540	@ 0x604
 8001a1a:	f000 fbb5 	bl	8002188 <wm8994_write_reg>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f103 0018 	add.w	r0, r3, #24
 8001a2c:	f107 020a 	add.w	r2, r7, #10
 8001a30:	2302      	movs	r3, #2
 8001a32:	f240 6105 	movw	r1, #1541	@ 0x605
 8001a36:	f000 fba7 	bl	8002188 <wm8994_write_reg>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
      break;
 8001a42:	e03b      	b.n	8001abc <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8001a44:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8001a48:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f103 0018 	add.w	r0, r3, #24
 8001a50:	f107 020a 	add.w	r2, r7, #10
 8001a54:	2302      	movs	r3, #2
 8001a56:	2105      	movs	r1, #5
 8001a58:	f000 fb96 	bl	8002188 <wm8994_write_reg>
 8001a5c:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f103 0018 	add.w	r0, r3, #24
 8001a68:	f107 020a 	add.w	r2, r7, #10
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f240 6101 	movw	r1, #1537	@ 0x601
 8001a72:	f000 fb89 	bl	8002188 <wm8994_write_reg>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f103 0018 	add.w	r0, r3, #24
 8001a84:	f107 020a 	add.w	r2, r7, #10
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f240 6102 	movw	r1, #1538	@ 0x602
 8001a8e:	f000 fb7b 	bl	8002188 <wm8994_write_reg>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f103 0018 	add.w	r0, r3, #24
 8001aa4:	f107 020a 	add.w	r2, r7, #10
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	f240 6104 	movw	r1, #1540	@ 0x604
 8001aae:	f000 fb6b 	bl	8002188 <wm8994_write_reg>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
      break;
 8001aba:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 8001abc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ac0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f103 0018 	add.w	r0, r3, #24
 8001ac8:	f107 020a 	add.w	r2, r7, #10
 8001acc:	2302      	movs	r3, #2
 8001ace:	2103      	movs	r1, #3
 8001ad0:	f000 fb5a 	bl	8002188 <wm8994_write_reg>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4413      	add	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 8001adc:	2300      	movs	r3, #0
 8001ade:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f103 0018 	add.w	r0, r3, #24
 8001ae6:	f107 020a 	add.w	r2, r7, #10
 8001aea:	2302      	movs	r3, #2
 8001aec:	2122      	movs	r1, #34	@ 0x22
 8001aee:	f000 fb4b 	bl	8002188 <wm8994_write_reg>
 8001af2:	4602      	mov	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f103 0018 	add.w	r0, r3, #24
 8001b00:	f107 020a 	add.w	r2, r7, #10
 8001b04:	2302      	movs	r3, #2
 8001b06:	2123      	movs	r1, #35	@ 0x23
 8001b08:	f000 fb3e 	bl	8002188 <wm8994_write_reg>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 8001b14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b18:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f103 0018 	add.w	r0, r3, #24
 8001b20:	f107 020a 	add.w	r2, r7, #10
 8001b24:	2302      	movs	r3, #2
 8001b26:	2136      	movs	r1, #54	@ 0x36
 8001b28:	f000 fb2e 	bl	8002188 <wm8994_write_reg>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 8001b34:	f243 0303 	movw	r3, #12291	@ 0x3003
 8001b38:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f103 0018 	add.w	r0, r3, #24
 8001b40:	f107 020a 	add.w	r2, r7, #10
 8001b44:	2302      	movs	r3, #2
 8001b46:	2101      	movs	r1, #1
 8001b48:	f000 fb1e 	bl	8002188 <wm8994_write_reg>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8001b54:	2305      	movs	r3, #5
 8001b56:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f103 0018 	add.w	r0, r3, #24
 8001b5e:	f107 020a 	add.w	r2, r7, #10
 8001b62:	2302      	movs	r3, #2
 8001b64:	2151      	movs	r1, #81	@ 0x51
 8001b66:	f000 fb0f 	bl	8002188 <wm8994_write_reg>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 8001b72:	f243 3303 	movw	r3, #13059	@ 0x3303
 8001b76:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f103 0018 	add.w	r0, r3, #24
 8001b7e:	f107 020a 	add.w	r2, r7, #10
 8001b82:	2302      	movs	r3, #2
 8001b84:	2101      	movs	r1, #1
 8001b86:	f000 faff 	bl	8002188 <wm8994_write_reg>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 8001b92:	2322      	movs	r3, #34	@ 0x22
 8001b94:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f103 0018 	add.w	r0, r3, #24
 8001b9c:	f107 020a 	add.w	r2, r7, #10
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	2160      	movs	r1, #96	@ 0x60
 8001ba4:	f000 faf0 	bl	8002188 <wm8994_write_reg>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 8001bb0:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8001bb4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f103 0018 	add.w	r0, r3, #24
 8001bbc:	f107 020a 	add.w	r2, r7, #10
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	214c      	movs	r1, #76	@ 0x4c
 8001bc4:	f000 fae0 	bl	8002188 <wm8994_write_reg>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 fa60 	bl	8002098 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f103 0018 	add.w	r0, r3, #24
 8001be2:	f107 020a 	add.w	r2, r7, #10
 8001be6:	2302      	movs	r3, #2
 8001be8:	212d      	movs	r1, #45	@ 0x2d
 8001bea:	f000 facd 	bl	8002188 <wm8994_write_reg>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f103 0018 	add.w	r0, r3, #24
 8001bfc:	f107 020a 	add.w	r2, r7, #10
 8001c00:	2302      	movs	r3, #2
 8001c02:	212e      	movs	r1, #46	@ 0x2e
 8001c04:	f000 fac0 	bl	8002188 <wm8994_write_reg>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 8001c10:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8001c14:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f103 0018 	add.w	r0, r3, #24
 8001c1c:	f107 020a 	add.w	r2, r7, #10
 8001c20:	2302      	movs	r3, #2
 8001c22:	2103      	movs	r1, #3
 8001c24:	f000 fab0 	bl	8002188 <wm8994_write_reg>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 8001c30:	2333      	movs	r3, #51	@ 0x33
 8001c32:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f103 0018 	add.w	r0, r3, #24
 8001c3a:	f107 020a 	add.w	r2, r7, #10
 8001c3e:	2302      	movs	r3, #2
 8001c40:	2154      	movs	r1, #84	@ 0x54
 8001c42:	f000 faa1 	bl	8002188 <wm8994_write_reg>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 8001c4e:	f240 1101 	movw	r1, #257	@ 0x101
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa20 	bl	8002098 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8001c58:	23ee      	movs	r3, #238	@ 0xee
 8001c5a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f103 0018 	add.w	r0, r3, #24
 8001c62:	f107 020a 	add.w	r2, r7, #10
 8001c66:	2302      	movs	r3, #2
 8001c68:	2160      	movs	r1, #96	@ 0x60
 8001c6a:	f000 fa8d 	bl	8002188 <wm8994_write_reg>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3318      	adds	r3, #24
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f000 fb4c 	bl	8002342 <wm8994_aif1_control1_wl>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3318      	adds	r3, #24
 8001cd6:	f107 020a 	add.w	r2, r7, #10
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fb61 	bl	80023a4 <wm8994_aif1_control1_wl_r>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e021      	b.n	8001d34 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d81a      	bhi.n	8001d2c <WM8994_GetResolution+0x6c>
 8001cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <WM8994_GetResolution+0x3c>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d0d 	.word	0x08001d0d
 8001d00:	08001d15 	.word	0x08001d15
 8001d04:	08001d1d 	.word	0x08001d1d
 8001d08:	08001d25 	.word	0x08001d25
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
      break;
 8001d12:	e00f      	b.n	8001d34 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
      break;
 8001d1a:	e00b      	b.n	8001d34 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	601a      	str	r2, [r3, #0]
      break;
 8001d22:	e007      	b.n	8001d34 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	2203      	movs	r2, #3
 8001d28:	601a      	str	r2, [r3, #0]
      break; 
 8001d2a:	e003      	b.n	8001d34 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
      break;
 8001d32:	bf00      	nop
    }
  }
  
  return ret;
 8001d34:	68fb      	ldr	r3, [r7, #12]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop

08001d40 <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3318      	adds	r3, #24
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	b292      	uxth	r2, r2
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fa9f 	bl	800229c <wm8994_aif1_control1_fmt>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3318      	adds	r3, #24
 8001d86:	f107 020a 	add.w	r2, r7, #10
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fab6 	bl	80022fe <wm8994_aif1_control1_fmt_r>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e003      	b.n	8001da8 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8001da0:	897b      	ldrh	r3, [r7, #10]
 8001da2:	461a      	mov	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8001da8:	68fb      	ldr	r3, [r7, #12]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4a55      	ldr	r2, [pc, #340]	@ (8001f18 <WM8994_SetFrequency+0x164>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d05d      	beq.n	8001e82 <WM8994_SetFrequency+0xce>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	4a53      	ldr	r2, [pc, #332]	@ (8001f18 <WM8994_SetFrequency+0x164>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	f200 8091 	bhi.w	8001ef2 <WM8994_SetFrequency+0x13e>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d07d      	beq.n	8001ed6 <WM8994_SetFrequency+0x122>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001de0:	4293      	cmp	r3, r2
 8001de2:	f200 8086 	bhi.w	8001ef2 <WM8994_SetFrequency+0x13e>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001dec:	d03b      	beq.n	8001e66 <WM8994_SetFrequency+0xb2>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001df4:	d87d      	bhi.n	8001ef2 <WM8994_SetFrequency+0x13e>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d05c      	beq.n	8001eba <WM8994_SetFrequency+0x106>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d873      	bhi.n	8001ef2 <WM8994_SetFrequency+0x13e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001e10:	d01b      	beq.n	8001e4a <WM8994_SetFrequency+0x96>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001e18:	d86b      	bhi.n	8001ef2 <WM8994_SetFrequency+0x13e>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001e20:	d005      	beq.n	8001e2e <WM8994_SetFrequency+0x7a>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d038      	beq.n	8001e9e <WM8994_SetFrequency+0xea>
 8001e2c:	e061      	b.n	8001ef2 <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f103 0018 	add.w	r0, r3, #24
 8001e38:	f107 020a 	add.w	r2, r7, #10
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001e42:	f000 f9a1 	bl	8002188 <wm8994_write_reg>
 8001e46:	60f8      	str	r0, [r7, #12]
    break;
 8001e48:	e061      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001e4a:	2333      	movs	r3, #51	@ 0x33
 8001e4c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f103 0018 	add.w	r0, r3, #24
 8001e54:	f107 020a 	add.w	r2, r7, #10
 8001e58:	2302      	movs	r3, #2
 8001e5a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001e5e:	f000 f993 	bl	8002188 <wm8994_write_reg>
 8001e62:	60f8      	str	r0, [r7, #12]
    break;
 8001e64:	e053      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001e66:	2363      	movs	r3, #99	@ 0x63
 8001e68:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f103 0018 	add.w	r0, r3, #24
 8001e70:	f107 020a 	add.w	r2, r7, #10
 8001e74:	2302      	movs	r3, #2
 8001e76:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001e7a:	f000 f985 	bl	8002188 <wm8994_write_reg>
 8001e7e:	60f8      	str	r0, [r7, #12]
    break;
 8001e80:	e045      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8001e82:	23a3      	movs	r3, #163	@ 0xa3
 8001e84:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f103 0018 	add.w	r0, r3, #24
 8001e8c:	f107 020a 	add.w	r2, r7, #10
 8001e90:	2302      	movs	r3, #2
 8001e92:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001e96:	f000 f977 	bl	8002188 <wm8994_write_reg>
 8001e9a:	60f8      	str	r0, [r7, #12]
    break;
 8001e9c:	e037      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8001e9e:	2313      	movs	r3, #19
 8001ea0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f103 0018 	add.w	r0, r3, #24
 8001ea8:	f107 020a 	add.w	r2, r7, #10
 8001eac:	2302      	movs	r3, #2
 8001eae:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001eb2:	f000 f969 	bl	8002188 <wm8994_write_reg>
 8001eb6:	60f8      	str	r0, [r7, #12]
    break;
 8001eb8:	e029      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001eba:	2343      	movs	r3, #67	@ 0x43
 8001ebc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f103 0018 	add.w	r0, r3, #24
 8001ec4:	f107 020a 	add.w	r2, r7, #10
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001ece:	f000 f95b 	bl	8002188 <wm8994_write_reg>
 8001ed2:	60f8      	str	r0, [r7, #12]
    break;
 8001ed4:	e01b      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8001ed6:	2373      	movs	r3, #115	@ 0x73
 8001ed8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f103 0018 	add.w	r0, r3, #24
 8001ee0:	f107 020a 	add.w	r2, r7, #10
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001eea:	f000 f94d 	bl	8002188 <wm8994_write_reg>
 8001eee:	60f8      	str	r0, [r7, #12]
    break; 
 8001ef0:	e00d      	b.n	8001f0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8001ef2:	2383      	movs	r3, #131	@ 0x83
 8001ef4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f103 0018 	add.w	r0, r3, #24
 8001efc:	f107 020a 	add.w	r2, r7, #10
 8001f00:	2302      	movs	r3, #2
 8001f02:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001f06:	f000 f93f 	bl	8002188 <wm8994_write_reg>
 8001f0a:	60f8      	str	r0, [r7, #12]
    break; 
 8001f0c:	bf00      	nop
  }
  
  return ret;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	00017700 	.word	0x00017700

08001f1c <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3318      	adds	r3, #24
 8001f32:	f107 020a 	add.w	r2, r7, #10
 8001f36:	4611      	mov	r1, r2
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f98d 	bl	8002258 <wm8994_aif1_sr_r>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	e043      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8001f4c:	897b      	ldrh	r3, [r7, #10]
 8001f4e:	2b0a      	cmp	r3, #10
 8001f50:	d83f      	bhi.n	8001fd2 <WM8994_GetFrequency+0xb6>
 8001f52:	a201      	add	r2, pc, #4	@ (adr r2, 8001f58 <WM8994_GetFrequency+0x3c>)
 8001f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f58:	08001f85 	.word	0x08001f85
 8001f5c:	08001f8f 	.word	0x08001f8f
 8001f60:	08001fd3 	.word	0x08001fd3
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	08001fa3 	.word	0x08001fa3
 8001f6c:	08001fd3 	.word	0x08001fd3
 8001f70:	08001fad 	.word	0x08001fad
 8001f74:	08001fb7 	.word	0x08001fb7
 8001f78:	08001fc1 	.word	0x08001fc1
 8001f7c:	08001fd3 	.word	0x08001fd3
 8001f80:	08001fcb 	.word	0x08001fcb
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001f8a:	601a      	str	r2, [r3, #0]
      break;
 8001f8c:	e022      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001f94:	601a      	str	r2, [r3, #0]
      break;    
 8001f96:	e01d      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001f9e:	601a      	str	r2, [r3, #0]
      break;
 8001fa0:	e018      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001fa8:	601a      	str	r2, [r3, #0]
      break; 
 8001faa:	e013      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001fb2:	601a      	str	r2, [r3, #0]
      break; 
 8001fb4:	e00e      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001fbc:	601a      	str	r2, [r3, #0]
      break;    
 8001fbe:	e009      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001fc6:	601a      	str	r2, [r3, #0]
      break;
 8001fc8:	e004      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4a04      	ldr	r2, [pc, #16]	@ (8001fe0 <WM8994_GetFrequency+0xc4>)
 8001fce:	601a      	str	r2, [r3, #0]
      break;    
 8001fd0:	e000      	b.n	8001fd4 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8001fd2:	bf00      	nop
    }
  }
  
  return ret;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	00017700 	.word	0x00017700

08001fe4 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3318      	adds	r3, #24
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f8ee 	bl	80021d8 <wm8994_sw_reset_w>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8002008:	68fb      	ldr	r3, [r7, #12]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8002024:	f04f 33ff 	mov.w	r3, #4294967295
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	e02c      	b.n	8002086 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	891a      	ldrh	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <WM8994_RegisterBusIO+0x7c>)
 8002060:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a0b      	ldr	r2, [pc, #44]	@ (8002094 <WM8994_RegisterBusIO+0x80>)
 8002066:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4798      	blx	r3
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	e002      	b.n	8002086 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
 8002084:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	080020cd 	.word	0x080020cd
 8002094:	080020ff 	.word	0x080020ff

08002098 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	4798      	blx	r3
 80020a8:	4603      	mov	r3, r0
 80020aa:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80020ac:	bf00      	nop
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	4798      	blx	r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d8f5      	bhi.n	80020ae <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	461a      	mov	r2, r3
 80020d8:	460b      	mov	r3, r1
 80020da:	817b      	strh	r3, [r7, #10]
 80020dc:	4613      	mov	r3, r2
 80020de:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	691c      	ldr	r4, [r3, #16]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	8918      	ldrh	r0, [r3, #8]
 80020ec:	893b      	ldrh	r3, [r7, #8]
 80020ee:	8979      	ldrh	r1, [r7, #10]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	47a0      	blx	r4
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}

080020fe <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80020fe:	b590      	push	{r4, r7, lr}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	461a      	mov	r2, r3
 800210a:	460b      	mov	r3, r1
 800210c:	817b      	strh	r3, [r7, #10]
 800210e:	4613      	mov	r3, r2
 8002110:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	68dc      	ldr	r4, [r3, #12]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	8918      	ldrh	r0, [r3, #8]
 800211e:	893b      	ldrh	r3, [r7, #8]
 8002120:	8979      	ldrh	r1, [r7, #10]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	47a0      	blx	r4
 8002126:	4603      	mov	r3, r0
}
 8002128:	4618      	mov	r0, r3
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}

08002130 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	461a      	mov	r2, r3
 800213c:	460b      	mov	r3, r1
 800213e:	817b      	strh	r3, [r7, #10]
 8002140:	4613      	mov	r3, r2
 8002142:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685c      	ldr	r4, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6898      	ldr	r0, [r3, #8]
 800214c:	893b      	ldrh	r3, [r7, #8]
 800214e:	8979      	ldrh	r1, [r7, #10]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	47a0      	blx	r4
 8002154:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db10      	blt.n	800217e <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	b21b      	sxth	r3, r3
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8a7a      	ldrh	r2, [r7, #18]
 800217c:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 800217e:	697b      	ldr	r3, [r7, #20]
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	461a      	mov	r2, r3
 8002194:	460b      	mov	r3, r1
 8002196:	817b      	strh	r3, [r7, #10]
 8002198:	4613      	mov	r3, r2
 800219a:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b21a      	sxth	r2, r3
 80021b0:	8afb      	ldrh	r3, [r7, #22]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681c      	ldr	r4, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6898      	ldr	r0, [r3, #8]
 80021c4:	893b      	ldrh	r3, [r7, #8]
 80021c6:	f107 0216 	add.w	r2, r7, #22
 80021ca:	8979      	ldrh	r1, [r7, #10]
 80021cc:	47a0      	blx	r4
 80021ce:	4603      	mov	r3, r0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 80021e4:	1cba      	adds	r2, r7, #2
 80021e6:	2302      	movs	r3, #2
 80021e8:	2100      	movs	r1, #0
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffcc 	bl	8002188 <wm8994_write_reg>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8002204:	2302      	movs	r3, #2
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	2100      	movs	r1, #0
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ff90 	bl	8002130 <wm8994_read_reg>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 8002224:	2302      	movs	r3, #2
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	211c      	movs	r1, #28
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff ff80 	bl	8002130 <wm8994_read_reg>
 8002230:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002240:	b29a      	uxth	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 8002262:	2302      	movs	r3, #2
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ff60 	bl	8002130 <wm8994_read_reg>
 8002270:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10c      	bne.n	8002292 <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002280:	b29a      	uxth	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	091b      	lsrs	r3, r3, #4
 800228c:	b29a      	uxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80022ac:	f107 020a 	add.w	r2, r7, #10
 80022b0:	2302      	movs	r3, #2
 80022b2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff3a 	bl	8002130 <wm8994_read_reg>
 80022bc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d117      	bne.n	80022f4 <wm8994_aif1_control1_fmt+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 80022c4:	897b      	ldrh	r3, [r7, #10]
 80022c6:	f023 0318 	bic.w	r3, r3, #24
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 80022ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	897b      	ldrh	r3, [r7, #10]
 80022d8:	b21b      	sxth	r3, r3
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21b      	sxth	r3, r3
 80022de:	b29b      	uxth	r3, r3
 80022e0:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80022e2:	f107 020a 	add.w	r2, r7, #10
 80022e6:	2302      	movs	r3, #2
 80022e8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff4b 	bl	8002188 <wm8994_write_reg>
 80022f2:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80022f4:	68fb      	ldr	r3, [r7, #12]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 8002308:	2302      	movs	r3, #2
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff0d 	bl	8002130 <wm8994_read_reg>
 8002316:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f003 0318 	and.w	r3, r3, #24
 8002326:	b29a      	uxth	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	08db      	lsrs	r3, r3, #3
 8002332:	b29a      	uxth	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8002338:	68fb      	ldr	r3, [r7, #12]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002352:	f107 020a 	add.w	r2, r7, #10
 8002356:	2302      	movs	r3, #2
 8002358:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fee7 	bl	8002130 <wm8994_read_reg>
 8002362:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d117      	bne.n	800239a <wm8994_aif1_control1_wl+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002370:	b29b      	uxth	r3, r3
 8002372:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8002374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002378:	015b      	lsls	r3, r3, #5
 800237a:	b21a      	sxth	r2, r3
 800237c:	897b      	ldrh	r3, [r7, #10]
 800237e:	b21b      	sxth	r3, r3
 8002380:	4313      	orrs	r3, r2
 8002382:	b21b      	sxth	r3, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002388:	f107 020a 	add.w	r2, r7, #10
 800238c:	2302      	movs	r3, #2
 800238e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fef8 	bl	8002188 <wm8994_write_reg>
 8002398:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 80023ae:	2302      	movs	r3, #2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff feba 	bl	8002130 <wm8994_read_reg>
 80023bc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10c      	bne.n	80023de <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	b29a      	uxth	r2, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80023f8:	f107 020a 	add.w	r2, r7, #10
 80023fc:	2302      	movs	r3, #2
 80023fe:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fe94 	bl	8002130 <wm8994_read_reg>
 8002408:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d117      	bne.n	8002440 <wm8994_aif1_control1_adcr_src+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 8002410:	897b      	ldrh	r3, [r7, #10]
 8002412:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002416:	b29b      	uxth	r3, r3
 8002418:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 800241a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800241e:	039b      	lsls	r3, r3, #14
 8002420:	b21a      	sxth	r2, r3
 8002422:	897b      	ldrh	r3, [r7, #10]
 8002424:	b21b      	sxth	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b21b      	sxth	r3, r3
 800242a:	b29b      	uxth	r3, r3
 800242c:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800242e:	f107 020a 	add.w	r2, r7, #10
 8002432:	2302      	movs	r3, #2
 8002434:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff fea5 	bl	8002188 <wm8994_write_reg>
 800243e:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002440:	68fb      	ldr	r3, [r7, #12]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 8002454:	2302      	movs	r3, #2
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff fe67 	bl	8002130 <wm8994_read_reg>
 8002462:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	b29a      	uxth	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	@ 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10f      	bne.n	80024bc <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 800249c:	4b26      	ldr	r3, [pc, #152]	@ (8002538 <BSP_LED_Init+0xb0>)
 800249e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a2:	4a25      	ldr	r2, [pc, #148]	@ (8002538 <BSP_LED_Init+0xb0>)
 80024a4:	f043 0304 	orr.w	r3, r3, #4
 80024a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ac:	4b22      	ldr	r3, [pc, #136]	@ (8002538 <BSP_LED_Init+0xb0>)
 80024ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	e015      	b.n	80024e8 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10f      	bne.n	80024e2 <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 80024c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <BSP_LED_Init+0xb0>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002538 <BSP_LED_Init+0xb0>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d2:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <BSP_LED_Init+0xb0>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	e002      	b.n	80024e8 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024e2:	f06f 0301 	mvn.w	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80024ec:	2301      	movs	r3, #1
 80024ee:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f0:	2302      	movs	r3, #2
 80024f2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	4a11      	ldr	r2, [pc, #68]	@ (800253c <BSP_LED_Init+0xb4>)
 80024f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <BSP_LED_Init+0xb8>)
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	f107 0210 	add.w	r2, r7, #16
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f008 f9c3 	bl	800a898 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <BSP_LED_Init+0xb8>)
 8002516:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4a07      	ldr	r2, [pc, #28]	@ (800253c <BSP_LED_Init+0xb4>)
 800251e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002522:	b29b      	uxth	r3, r3
 8002524:	2201      	movs	r2, #1
 8002526:	4619      	mov	r1, r3
 8002528:	f008 fc60 	bl	800adec <HAL_GPIO_WritePin>

  return ret;
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800252e:	4618      	mov	r0, r3
 8002530:	3728      	adds	r7, #40	@ 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	58024400 	.word	0x58024400
 800253c:	080159b8 	.word	0x080159b8
 8002540:	2400044c 	.word	0x2400044c

08002544 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	460a      	mov	r2, r1
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	4613      	mov	r3, r2
 8002552:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002554:	4b2d      	ldr	r3, [pc, #180]	@ (800260c <BSP_PB_Init+0xc8>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800255a:	4a2c      	ldr	r2, [pc, #176]	@ (800260c <BSP_PB_Init+0xc8>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002564:	4b29      	ldr	r3, [pc, #164]	@ (800260c <BSP_PB_Init+0xc8>)
 8002566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002572:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002576:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002578:	2302      	movs	r3, #2
 800257a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800257c:	2302      	movs	r3, #2
 800257e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002580:	79bb      	ldrb	r3, [r7, #6]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4a20      	ldr	r2, [pc, #128]	@ (8002610 <BSP_PB_Init+0xcc>)
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	f107 020c 	add.w	r2, r7, #12
 8002596:	4611      	mov	r1, r2
 8002598:	4618      	mov	r0, r3
 800259a:	f008 f97d 	bl	800a898 <HAL_GPIO_Init>
 800259e:	e030      	b.n	8002602 <BSP_PB_Init+0xbe>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80025a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <BSP_PB_Init+0xd0>)
 80025a2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002610 <BSP_PB_Init+0xcc>)
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	f107 020c 	add.w	r2, r7, #12
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f008 f970 	bl	800a898 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4a16      	ldr	r2, [pc, #88]	@ (8002618 <BSP_PB_Init+0xd4>)
 80025be:	441a      	add	r2, r3
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4916      	ldr	r1, [pc, #88]	@ (800261c <BSP_PB_Init+0xd8>)
 80025c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f008 f91f 	bl	800a80e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4a10      	ldr	r2, [pc, #64]	@ (8002618 <BSP_PB_Init+0xd4>)
 80025d6:	1898      	adds	r0, r3, r2
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	4a11      	ldr	r2, [pc, #68]	@ (8002620 <BSP_PB_Init+0xdc>)
 80025dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e0:	461a      	mov	r2, r3
 80025e2:	2100      	movs	r1, #0
 80025e4:	f008 f8f4 	bl	800a7d0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80025e8:	2028      	movs	r0, #40	@ 0x28
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <BSP_PB_Init+0xe0>)
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	2200      	movs	r2, #0
 80025f4:	4619      	mov	r1, r3
 80025f6:	f004 ff72 	bl	80074de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80025fa:	2328      	movs	r3, #40	@ 0x28
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 ff88 	bl	8007512 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	58024400 	.word	0x58024400
 8002610:	24000454 	.word	0x24000454
 8002614:	11110000 	.word	0x11110000
 8002618:	240005c0 	.word	0x240005c0
 800261c:	080159c0 	.word	0x080159c0
 8002620:	24000458 	.word	0x24000458
 8002624:	2400045c 	.word	0x2400045c

08002628 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4a04      	ldr	r2, [pc, #16]	@ (8002648 <BSP_PB_IRQHandler+0x20>)
 8002638:	4413      	add	r3, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f008 f8fc 	bl	800a838 <HAL_EXTI_IRQHandler>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	240005c0 	.word	0x240005c0

0800264c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002650:	2000      	movs	r0, #0
 8002652:	f00f f8a1 	bl	8011798 <BSP_PB_Callback>
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}

0800265a <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI confiruration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002676:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv               = 0;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_ENABLE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026e8:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai->Init.PdmInit.Activation   = DISABLE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800270e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800271c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	669a      	str	r2, [r3, #104]	@ 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b18      	cmp	r3, #24
 800272a:	d003      	beq.n	8002734 <MX_SAI1_Block_B_Init+0xda>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b20      	cmp	r3, #32
 8002732:	d103      	bne.n	800273c <MX_SAI1_Block_B_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2280      	movs	r2, #128	@ 0x80
 8002738:	66da      	str	r2, [r3, #108]	@ 0x6c
 800273a:	e002      	b.n	8002742 <MX_SAI1_Block_B_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2240      	movs	r2, #64	@ 0x40
 8002740:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  hsai->SlotInit.SlotNumber         = 4;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2204      	movs	r2, #4
 8002746:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f00d f9f7 	bl	800fb44 <HAL_SAI_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_SAI1_Block_B_Init+0x106>
  {
    ret = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800276e:	601a      	str	r2, [r3, #0]

  return ret;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
	...

0800277c <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <BSP_AUDIO_OUT_Play+0x36>
 8002792:	492d      	ldr	r1, [pc, #180]	@ (8002848 <BSP_AUDIO_OUT_Play+0xcc>)
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	330c      	adds	r3, #12
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b0:	d303      	bcc.n	80027ba <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027b2:	f06f 0301 	mvn.w	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e040      	b.n	800283c <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 80027ba:	4923      	ldr	r1, [pc, #140]	@ (8002848 <BSP_AUDIO_OUT_Play+0xcc>)
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	331c      	adds	r3, #28
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d003      	beq.n	80027d8 <BSP_AUDIO_OUT_Play+0x5c>
  {
    ret = BSP_ERROR_BUSY;
 80027d0:	f06f 0302 	mvn.w	r3, #2
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e031      	b.n	800283c <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 80027d8:	491b      	ldr	r1, [pc, #108]	@ (8002848 <BSP_AUDIO_OUT_Play+0xcc>)
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	330c      	adds	r3, #12
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	08db      	lsrs	r3, r3, #3
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	68b9      	ldr	r1, [r7, #8]
 80027f8:	4814      	ldr	r0, [pc, #80]	@ (800284c <BSP_AUDIO_OUT_Play+0xd0>)
 80027fa:	f00d fbc1 	bl	800ff80 <HAL_SAI_Transmit_DMA>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <BSP_AUDIO_OUT_Play+0x90>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8002804:	f06f 0303 	mvn.w	r3, #3
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e017      	b.n	800283c <BSP_AUDIO_OUT_Play+0xc0>
  }
  else if(Audio_Drv->Play(Audio_CompObj) < 0)
 800280c:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <BSP_AUDIO_OUT_Play+0xd4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a10      	ldr	r2, [pc, #64]	@ (8002854 <BSP_AUDIO_OUT_Play+0xd8>)
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4610      	mov	r0, r2
 8002818:	4798      	blx	r3
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	da03      	bge.n	8002828 <BSP_AUDIO_OUT_Play+0xac>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002820:	f06f 0304 	mvn.w	r3, #4
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e009      	b.n	800283c <BSP_AUDIO_OUT_Play+0xc0>
  }
  else
  {
    /* Update BSP AUDIO OUT state */
    Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 8002828:	4907      	ldr	r1, [pc, #28]	@ (8002848 <BSP_AUDIO_OUT_Play+0xcc>)
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	331c      	adds	r3, #28
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 800283c:	697b      	ldr	r3, [r7, #20]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	24000664 	.word	0x24000664
 800284c:	240005cc 	.word	0x240005cc
 8002850:	24000a78 	.word	0x24000a78
 8002854:	240005c8 	.word	0x240005c8

08002858 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <BSP_AUDIO_OUT_IRQHandler+0x1c>)
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002866:	4618      	mov	r0, r3
 8002868:	f006 f9be 	bl	8008be8 <HAL_DMA_IRQHandler>
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	240005cc 	.word	0x240005cc

08002878 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 8002880:	2000      	movs	r0, #0
 8002882:	f000 f825 	bl	80028d0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h735g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f824 	bl	80028e4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a06      	ldr	r2, [pc, #24]	@ (80028cc <HAL_SAI_ErrorCallback+0x28>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d103      	bne.n	80028be <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f000 f81e 	bl	80028f8 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 80028bc:	e002      	b.n	80028c4 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 80028be:	2000      	movs	r0, #0
 80028c0:	f002 f914 	bl	8004aec <BSP_AUDIO_IN_Error_CallBack>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40015824 	.word	0x40015824

080028d0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 8002916:	2334      	movs	r3, #52	@ 0x34
 8002918:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 800291a:	4b20      	ldr	r3, [pc, #128]	@ (800299c <WM8994_Probe+0x90>)
 800291c:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800291e:	4b20      	ldr	r3, [pc, #128]	@ (80029a0 <WM8994_Probe+0x94>)
 8002920:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8002922:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <WM8994_Probe+0x98>)
 8002924:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <WM8994_Probe+0x9c>)
 8002928:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 800292a:	4b20      	ldr	r3, [pc, #128]	@ (80029ac <WM8994_Probe+0xa0>)
 800292c:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	481f      	ldr	r0, [pc, #124]	@ (80029b0 <WM8994_Probe+0xa4>)
 8002934:	f7ff fb6e 	bl	8002014 <WM8994_RegisterBusIO>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800293e:	f06f 0307 	mvn.w	r3, #7
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e024      	b.n	8002990 <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 8002946:	481a      	ldr	r0, [pc, #104]	@ (80029b0 <WM8994_Probe+0xa4>)
 8002948:	f7ff fb4c 	bl	8001fe4 <WM8994_Reset>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002952:	f06f 0304 	mvn.w	r3, #4
 8002956:	61fb      	str	r3, [r7, #28]
 8002958:	e01a      	b.n	8002990 <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 800295a:	463b      	mov	r3, r7
 800295c:	4619      	mov	r1, r3
 800295e:	4814      	ldr	r0, [pc, #80]	@ (80029b0 <WM8994_Probe+0xa4>)
 8002960:	f7fe fd3b 	bl	80013da <WM8994_ReadID>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800296a:	f06f 0304 	mvn.w	r3, #4
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	e00e      	b.n	8002990 <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f648 1294 	movw	r2, #35220	@ 0x8994
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800297c:	f06f 0306 	mvn.w	r3, #6
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e005      	b.n	8002990 <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <WM8994_Probe+0xa8>)
 8002986:	4a0c      	ldr	r2, [pc, #48]	@ (80029b8 <WM8994_Probe+0xac>)
 8002988:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 800298a:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <WM8994_Probe+0xb0>)
 800298c:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <WM8994_Probe+0xa4>)
 800298e:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 8002990:	69fb      	ldr	r3, [r7, #28]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	0800509d 	.word	0x0800509d
 80029a0:	08005111 	.word	0x08005111
 80029a4:	0800529d 	.word	0x0800529d
 80029a8:	08005241 	.word	0x08005241
 80029ac:	080052f9 	.word	0x080052f9
 80029b0:	24004d24 	.word	0x24004d24
 80029b4:	24000a78 	.word	0x24000a78
 80029b8:	24000400 	.word	0x24000400
 80029bc:	240005c8 	.word	0x240005c8

080029c0 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b096      	sub	sp, #88	@ 0x58
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;
    /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80029c8:	4b61      	ldr	r3, [pc, #388]	@ (8002b50 <SAI_MspInit+0x190>)
 80029ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ce:	4a60      	ldr	r2, [pc, #384]	@ (8002b50 <SAI_MspInit+0x190>)
 80029d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002b50 <SAI_MspInit+0x190>)
 80029da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80029e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80029e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b50 <SAI_MspInit+0x190>)
 80029e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029ec:	4a58      	ldr	r2, [pc, #352]	@ (8002b50 <SAI_MspInit+0x190>)
 80029ee:	f043 0320 	orr.w	r3, r3, #32
 80029f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029f6:	4b56      	ldr	r3, [pc, #344]	@ (8002b50 <SAI_MspInit+0x190>)
 80029f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8002a04:	4b52      	ldr	r3, [pc, #328]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0a:	4a51      	ldr	r2, [pc, #324]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a0c:	f043 0320 	orr.w	r3, r3, #32
 8002a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a14:	4b4e      	ldr	r3, [pc, #312]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  AUDIO_OUT_SAIx_SD_ENABLE();
 8002a22:	4b4b      	ldr	r3, [pc, #300]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a28:	4a49      	ldr	r2, [pc, #292]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a2a:	f043 0320 	orr.w	r3, r3, #32
 8002a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a32:	4b47      	ldr	r3, [pc, #284]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  AUDIO_OUT_SAIx_FS_ENABLE();
 8002a40:	4b43      	ldr	r3, [pc, #268]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a46:	4a42      	ldr	r2, [pc, #264]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a50:	4b3f      	ldr	r3, [pc, #252]	@ (8002b50 <SAI_MspInit+0x190>)
 8002a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8002a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a62:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002a64:	2302      	movs	r3, #2
 8002a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	653b      	str	r3, [r7, #80]	@ 0x50
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8002a70:	2306      	movs	r3, #6
 8002a72:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8002a74:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4836      	ldr	r0, [pc, #216]	@ (8002b54 <SAI_MspInit+0x194>)
 8002a7c:	f007 ff0c 	bl	800a898 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a84:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8002a86:	2306      	movs	r3, #6
 8002a88:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 8002a8a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4830      	ldr	r0, [pc, #192]	@ (8002b54 <SAI_MspInit+0x194>)
 8002a92:	f007 ff01 	bl	800a898 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8002a96:	2340      	movs	r3, #64	@ 0x40
 8002a98:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002a9e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	482b      	ldr	r0, [pc, #172]	@ (8002b54 <SAI_MspInit+0x194>)
 8002aa6:	f007 fef7 	bl	800a898 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2a      	ldr	r2, [pc, #168]	@ (8002b58 <SAI_MspInit+0x198>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d01e      	beq.n	8002af2 <SAI_MspInit+0x132>
    {
      if(haudio_in_sai[0].State != HAL_SAI_STATE_READY)
 8002ab4:	4b29      	ldr	r3, [pc, #164]	@ (8002b5c <SAI_MspInit+0x19c>)
 8002ab6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d018      	beq.n	8002af2 <SAI_MspInit+0x132>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 8002ac0:	4b23      	ldr	r3, [pc, #140]	@ (8002b50 <SAI_MspInit+0x190>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ac6:	4a22      	ldr	r2, [pc, #136]	@ (8002b50 <SAI_MspInit+0x190>)
 8002ac8:	f043 0320 	orr.w	r3, r3, #32
 8002acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <SAI_MspInit+0x190>)
 8002ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	647b      	str	r3, [r7, #68]	@ 0x44
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	657b      	str	r3, [r7, #84]	@ 0x54
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002ae6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002aea:	4619      	mov	r1, r3
 8002aec:	4819      	ldr	r0, [pc, #100]	@ (8002b54 <SAI_MspInit+0x194>)
 8002aee:	f007 fed3 	bl	800a898 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b60 <SAI_MspInit+0x1a0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d16b      	bne.n	8002bd4 <SAI_MspInit+0x214>
  {
  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <SAI_MspInit+0x190>)
 8002afe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b02:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <SAI_MspInit+0x190>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002b0c:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <SAI_MspInit+0x190>)
 8002b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 8002b1a:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <SAI_MspInit+0x1a4>)
 8002b1c:	2258      	movs	r2, #88	@ 0x58
 8002b1e:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002b20:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <SAI_MspInit+0x1a4>)
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002b26:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <SAI_MspInit+0x1a4>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <SAI_MspInit+0x1a4>)
 8002b2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b32:	611a      	str	r2, [r3, #16]
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <SAI_MspInit+0x1a8>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d117      	bne.n	8002b6c <SAI_MspInit+0x1ac>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <SAI_MspInit+0x1a4>)
 8002b3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b42:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <SAI_MspInit+0x1a4>)
 8002b46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b4a:	619a      	str	r2, [r3, #24]
 8002b4c:	e016      	b.n	8002b7c <SAI_MspInit+0x1bc>
 8002b4e:	bf00      	nop
 8002b50:	58024400 	.word	0x58024400
 8002b54:	58021400 	.word	0x58021400
 8002b58:	58005404 	.word	0x58005404
 8002b5c:	240008b8 	.word	0x240008b8
 8002b60:	40015824 	.word	0x40015824
 8002b64:	24004d4c 	.word	0x24004d4c
 8002b68:	24000664 	.word	0x24000664
    }
    else /* AUDIO_RESOLUTION_32B */
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b6c:	4b53      	ldr	r3, [pc, #332]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002b6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b72:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002b74:	4b51      	ldr	r3, [pc, #324]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b7a:	619a      	str	r2, [r3, #24]
    }
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002b7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b82:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002b84:	4b4d      	ldr	r3, [pc, #308]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002b86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b8a:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002b8e:	2204      	movs	r2, #4
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002b92:	4b4a      	ldr	r3, [pc, #296]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002b94:	2203      	movs	r2, #3
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002b98:	4b48      	ldr	r3, [pc, #288]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002b9e:	4b47      	ldr	r3, [pc, #284]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8002ba4:	4b45      	ldr	r3, [pc, #276]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002ba6:	4a46      	ldr	r2, [pc, #280]	@ (8002cc0 <SAI_MspInit+0x300>)
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a43      	ldr	r2, [pc, #268]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002bae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002bb2:	4a42      	ldr	r2, [pc, #264]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 8002bb8:	4840      	ldr	r0, [pc, #256]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002bba:	f005 fbf5 	bl	80083a8 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 8002bbe:	483f      	ldr	r0, [pc, #252]	@ (8002cbc <SAI_MspInit+0x2fc>)
 8002bc0:	f005 f89a 	bl	8007cf8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	210e      	movs	r1, #14
 8002bc8:	2045      	movs	r0, #69	@ 0x45
 8002bca:	f004 fc88 	bl	80074de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8002bce:	2045      	movs	r0, #69	@ 0x45
 8002bd0:	f004 fc9f 	bl	8007512 <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc4 <SAI_MspInit+0x304>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	f040 809b 	bne.w	8002d16 <SAI_MspInit+0x356>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8002be0:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002be6:	4a38      	ldr	r2, [pc, #224]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002be8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002bf0:	4b35      	ldr	r3, [pc, #212]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8002bfe:	4b32      	ldr	r3, [pc, #200]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c04:	4a30      	ldr	r2, [pc, #192]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002c06:	f043 0310 	orr.w	r3, r3, #16
 8002c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8002c1c:	2340      	movs	r3, #64	@ 0x40
 8002c1e:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002c30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c34:	4619      	mov	r1, r3
 8002c36:	4825      	ldr	r0, [pc, #148]	@ (8002ccc <SAI_MspInit+0x30c>)
 8002c38:	f007 fe2e 	bl	800a898 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002c3c:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c42:	4a21      	ldr	r2, [pc, #132]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <SAI_MspInit+0x308>)
 8002c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	69fb      	ldr	r3, [r7, #28]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance                 = AUDIO_IN_SAIx_DMAx_STREAM;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <SAI_MspInit+0x314>)
 8002c5e:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c62:	2257      	movs	r2, #87	@ 0x57
 8002c64:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c6c:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002c6e:	4b18      	ldr	r3, [pc, #96]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c74:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002c76:	4b16      	ldr	r3, [pc, #88]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002c7c:	4b14      	ldr	r3, [pc, #80]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002c82:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c88:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002c8a:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c92:	2203      	movs	r2, #3
 8002c94:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002c96:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30

    if(Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <SAI_MspInit+0x318>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b10      	cmp	r3, #16
 8002ca8:	d118      	bne.n	8002cdc <SAI_MspInit+0x31c>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002caa:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002cac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cb0:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <SAI_MspInit+0x310>)
 8002cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cb8:	619a      	str	r2, [r3, #24]
 8002cba:	e017      	b.n	8002cec <SAI_MspInit+0x32c>
 8002cbc:	24004d4c 	.word	0x24004d4c
 8002cc0:	400204a0 	.word	0x400204a0
 8002cc4:	40015804 	.word	0x40015804
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58021000 	.word	0x58021000
 8002cd0:	24004dc4 	.word	0x24004dc4
 8002cd4:	40020470 	.word	0x40020470
 8002cd8:	240009e8 	.word	0x240009e8
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cdc:	4b5f      	ldr	r3, [pc, #380]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002cde:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ce2:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002ce6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cea:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a5b      	ldr	r2, [pc, #364]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002cf0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002cf4:	4a59      	ldr	r2, [pc, #356]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 8002cfa:	4858      	ldr	r0, [pc, #352]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002cfc:	f005 fb54 	bl	80083a8 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8002d00:	4856      	ldr	r0, [pc, #344]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002d02:	f004 fff9 	bl	8007cf8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	210f      	movs	r1, #15
 8002d0a:	203c      	movs	r0, #60	@ 0x3c
 8002d0c:	f004 fbe7 	bl	80074de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002d10:	203c      	movs	r0, #60	@ 0x3c
 8002d12:	f004 fbfe 	bl	8007512 <HAL_NVIC_EnableIRQ>
  }

  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a51      	ldr	r2, [pc, #324]	@ (8002e60 <SAI_MspInit+0x4a0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	f040 8099 	bne.w	8002e54 <SAI_MspInit+0x494>
  {
/* Enable SAI clock */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8002d22:	4b50      	ldr	r3, [pc, #320]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d28:	4a4e      	ldr	r2, [pc, #312]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d2e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002d32:	4b4c      	ldr	r3, [pc, #304]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	69bb      	ldr	r3, [r7, #24]

    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8002d40:	4b48      	ldr	r3, [pc, #288]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d46:	4a47      	ldr	r2, [pc, #284]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d48:	f043 0310 	orr.w	r3, r3, #16
 8002d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d50:	4b44      	ldr	r3, [pc, #272]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002d62:	2302      	movs	r3, #2
 8002d64:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pin       = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 8002d66:	2310      	movs	r3, #16
 8002d68:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 8002d6a:	230a      	movs	r3, #10
 8002d6c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 8002d6e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002d72:	4619      	mov	r1, r3
 8002d74:	483c      	ldr	r0, [pc, #240]	@ (8002e68 <SAI_MspInit+0x4a8>)
 8002d76:	f007 fd8f 	bl	800a898 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_CLK_OUT_ENABLE();
 8002d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d80:	4a38      	ldr	r2, [pc, #224]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d82:	f043 0310 	orr.w	r3, r3, #16
 8002d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d8a:	4b36      	ldr	r3, [pc, #216]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002da0:	2302      	movs	r3, #2
 8002da2:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pin       = AUDIO_IN_SAI_PDMx_CLK_OUT_PIN;
 8002da4:	2320      	movs	r3, #32
 8002da6:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 8002da8:	230a      	movs	r3, #10
 8002daa:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_OUT_PORT, &gpio_init_structure);
 8002dac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002db0:	4619      	mov	r1, r3
 8002db2:	482d      	ldr	r0, [pc, #180]	@ (8002e68 <SAI_MspInit+0x4a8>)
 8002db4:	f007 fd70 	bl	800a898 <HAL_GPIO_Init>
    /* Enable the DMA clock */
    AUDIO_IN_SAI_PDMx_DMAx_CLK_ENABLE();
 8002db8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dbe:	4a29      	ldr	r2, [pc, #164]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002dc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dc8:	4b26      	ldr	r3, [pc, #152]	@ (8002e64 <SAI_MspInit+0x4a4>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8002dd6:	4b21      	ldr	r3, [pc, #132]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002dd8:	220f      	movs	r2, #15
 8002dda:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002de2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002de8:	4b1c      	ldr	r3, [pc, #112]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002dea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dee:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8002df6:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002dfc:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002dfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e02:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e04:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e0a:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002e0c:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e12:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e14:	2203      	movs	r2, #3
 8002e16:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e18:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8002e24:	4b0d      	ldr	r3, [pc, #52]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e26:	4a11      	ldr	r2, [pc, #68]	@ (8002e6c <SAI_MspInit+0x4ac>)
 8002e28:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e32:	4a0a      	ldr	r2, [pc, #40]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002e38:	4808      	ldr	r0, [pc, #32]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e3a:	f005 fab5 	bl	80083a8 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8002e3e:	4807      	ldr	r0, [pc, #28]	@ (8002e5c <SAI_MspInit+0x49c>)
 8002e40:	f004 ff5a 	bl	8007cf8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8002e44:	2200      	movs	r2, #0
 8002e46:	210f      	movs	r1, #15
 8002e48:	2082      	movs	r0, #130	@ 0x82
 8002e4a:	f004 fb48 	bl	80074de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8002e4e:	2082      	movs	r0, #130	@ 0x82
 8002e50:	f004 fb5f 	bl	8007512 <HAL_NVIC_EnableIRQ>
  }
}
 8002e54:	bf00      	nop
 8002e56:	3758      	adds	r7, #88	@ 0x58
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	24004dc4 	.word	0x24004dc4
 8002e60:	58005404 	.word	0x58005404
 8002e64:	58024400 	.word	0x58024400
 8002e68:	58021000 	.word	0x58021000
 8002e6c:	5802541c 	.word	0x5802541c

08002e70 <BSP_AUDIO_IN_Init>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b0a9      	sub	sp, #164	@ 0xa4
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t ret = BSP_ERROR_NONE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d905      	bls.n	8002e92 <BSP_AUDIO_IN_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e86:	f06f 0301 	mvn.w	r3, #1
 8002e8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e8e:	f000 bc0b 	b.w	80036a8 <BSP_AUDIO_IN_Init+0x838>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6819      	ldr	r1, [r3, #0]
 8002e96:	489a      	ldr	r0, [pc, #616]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	4403      	add	r3, r0
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68d9      	ldr	r1, [r3, #12]
 8002eac:	4894      	ldr	r0, [pc, #592]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	4403      	add	r3, r0
 8002eba:	3310      	adds	r3, #16
 8002ebc:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	488f      	ldr	r0, [pc, #572]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	4403      	add	r3, r0
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	4889      	ldr	r0, [pc, #548]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	4403      	add	r3, r0
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6919      	ldr	r1, [r3, #16]
 8002eee:	4884      	ldr	r0, [pc, #528]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	4403      	add	r3, r0
 8002efc:	3320      	adds	r3, #32
 8002efe:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8002f00:	497f      	ldr	r1, [pc, #508]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3324      	adds	r3, #36	@ 0x24
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 80cc 	bne.w	80030b4 <BSP_AUDIO_IN_Init+0x244>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2298      	movs	r2, #152	@ 0x98
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	4a77      	ldr	r2, [pc, #476]	@ (8003104 <BSP_AUDIO_IN_Init+0x294>)
 8002f26:	441a      	add	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f002 f860 	bl	8004ff4 <MX_SAI1_ClockConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d004      	beq.n	8002f44 <BSP_AUDIO_IN_Init+0xd4>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8002f3a:	f06f 0308 	mvn.w	r3, #8
 8002f3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f42:	e3a7      	b.n	8003694 <BSP_AUDIO_IN_Init+0x824>
      }
      else
      {
        haudio_in_sai[Instance].Instance    = AUDIO_IN_SAIx;
 8002f44:	4a6f      	ldr	r2, [pc, #444]	@ (8003104 <BSP_AUDIO_IN_Init+0x294>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2198      	movs	r1, #152	@ 0x98
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	4a6d      	ldr	r2, [pc, #436]	@ (8003108 <BSP_AUDIO_IN_Init+0x298>)
 8002f52:	601a      	str	r2, [r3, #0]
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8002f54:	4b6d      	ldr	r3, [pc, #436]	@ (800310c <BSP_AUDIO_IN_Init+0x29c>)
 8002f56:	4a6e      	ldr	r2, [pc, #440]	@ (8003110 <BSP_AUDIO_IN_Init+0x2a0>)
 8002f58:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[Instance]);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2298      	movs	r2, #152	@ 0x98
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	4a68      	ldr	r2, [pc, #416]	@ (8003104 <BSP_AUDIO_IN_Init+0x294>)
 8002f64:	4413      	add	r3, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fd2a 	bl	80029c0 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8002f6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 838f 	bne.w	8003694 <BSP_AUDIO_IN_Init+0x824>
        {
          MX_SAI_Config mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.AudioFrequency        = Audio_In_Ctx[Instance].SampleRate;
 8002f76:	4962      	ldr	r1, [pc, #392]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	3308      	adds	r3, #8
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60bb      	str	r3, [r7, #8]
          mx_config.AudioMode             = SAI_MODESLAVE_RX;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	60fb      	str	r3, [r7, #12]
          mx_config.ClockStrobing         = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
          mx_config.MonoStereoMode        = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d102      	bne.n	8002fa0 <BSP_AUDIO_IN_Init+0x130>
 8002f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f9e:	e000      	b.n	8002fa2 <BSP_AUDIO_IN_Init+0x132>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
          mx_config.DataSize              = SAI_DATASIZE_16;
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	613b      	str	r3, [r7, #16]
          mx_config.FrameLength           = 128;
 8002fa8:	2380      	movs	r3, #128	@ 0x80
 8002faa:	62bb      	str	r3, [r7, #40]	@ 0x28
          mx_config.ActiveFrameLength     = 64;
 8002fac:	2340      	movs	r3, #64	@ 0x40
 8002fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
          mx_config.OutputDrive           = SAI_OUTPUTDRIVE_ENABLE;
 8002fb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fb4:	623b      	str	r3, [r7, #32]
          mx_config.Synchro               = SAI_SYNCHRONOUS;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
          mx_config.SynchroExt            = SAI_SYNCEXT_DISABLE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
          mx_config.SlotActive            = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	633b      	str	r3, [r7, #48]	@ 0x30

          if(MX_SAI1_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2298      	movs	r2, #152	@ 0x98
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	4a4e      	ldr	r2, [pc, #312]	@ (8003104 <BSP_AUDIO_IN_Init+0x294>)
 8002fcc:	4413      	add	r3, r2
 8002fce:	f107 0208 	add.w	r2, r7, #8
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fde6 	bl	8003ba6 <MX_SAI1_Block_A_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <BSP_AUDIO_IN_Init+0x17a>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8002fe0:	f06f 0303 	mvn.w	r3, #3
 8002fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fe8:	e010      	b.n	800300c <BSP_AUDIO_IN_Init+0x19c>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
            mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]

            if(MX_SAI1_Block_B_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8002ff2:	f107 0308 	add.w	r3, r7, #8
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4844      	ldr	r0, [pc, #272]	@ (800310c <BSP_AUDIO_IN_Init+0x29c>)
 8002ffa:	f7ff fb2e 	bl	800265a <MX_SAI1_Block_B_Init>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <BSP_AUDIO_IN_Init+0x19c>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8003004:	f06f 0303 	mvn.w	r3, #3
 8003008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 800300c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003010:	2b00      	cmp	r3, #0
 8003012:	f040 833f 	bne.w	8003694 <BSP_AUDIO_IN_Init+0x824>
          {
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = (Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 8003016:	4b3f      	ldr	r3, [pc, #252]	@ (8003114 <BSP_AUDIO_IN_Init+0x2a4>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <BSP_AUDIO_IN_Init+0x1b2>
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <BSP_AUDIO_IN_Init+0x1b4>
 8003022:	2302      	movs	r3, #2
 8003024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            codec_init.Frequency    = AudioInit->SampleRate;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b20      	cmp	r3, #32
 8003036:	d101      	bne.n	800303c <BSP_AUDIO_IN_Init+0x1cc>
 8003038:	2303      	movs	r3, #3
 800303a:	e000      	b.n	800303e <BSP_AUDIO_IN_Init+0x1ce>
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            codec_init.InputDevice  = (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <BSP_AUDIO_IN_Init+0x1de>
 800304a:	2303      	movs	r3, #3
 800304c:	e000      	b.n	8003050 <BSP_AUDIO_IN_Init+0x1e0>
 800304e:	2302      	movs	r3, #2
 8003050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b63      	cmp	r3, #99	@ 0x63
 800305a:	d80c      	bhi.n	8003076 <BSP_AUDIO_IN_Init+0x206>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	4a2b      	ldr	r2, [pc, #172]	@ (8003118 <BSP_AUDIO_IN_Init+0x2a8>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e000      	b.n	8003078 <BSP_AUDIO_IN_Init+0x208>
 8003076:	23ef      	movs	r3, #239	@ 0xef
 8003078:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 800307c:	4b27      	ldr	r3, [pc, #156]	@ (800311c <BSP_AUDIO_IN_Init+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a27      	ldr	r2, [pc, #156]	@ (8003120 <BSP_AUDIO_IN_Init+0x2b0>)
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 800308a:	4610      	mov	r0, r2
 800308c:	4798      	blx	r3
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	da04      	bge.n	800309e <BSP_AUDIO_IN_Init+0x22e>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8003094:	f06f 0304 	mvn.w	r3, #4
 8003098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800309c:	e2fa      	b.n	8003694 <BSP_AUDIO_IN_Init+0x824>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 800309e:	4918      	ldr	r1, [pc, #96]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	440b      	add	r3, r1
 80030ac:	3324      	adds	r3, #36	@ 0x24
 80030ae:	2202      	movs	r2, #2
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e2ef      	b.n	8003694 <BSP_AUDIO_IN_Init+0x824>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(Instance == 1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f040 8095 	bne.w	80031e6 <BSP_AUDIO_IN_Init+0x376>
    {
      if(Audio_In_Ctx[Instance].Device != AUDIO_IN_DEVICE_DIGITAL_MIC1)
 80030bc:	4910      	ldr	r1, [pc, #64]	@ (8003100 <BSP_AUDIO_IN_Init+0x290>)
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	440b      	add	r3, r1
 80030ca:	3304      	adds	r3, #4
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d004      	beq.n	80030dc <BSP_AUDIO_IN_Init+0x26c>
      {
        ret = BSP_ERROR_WRONG_PARAM;
 80030d2:	f06f 0301 	mvn.w	r3, #1
 80030d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80030da:	e2db      	b.n	8003694 <BSP_AUDIO_IN_Init+0x824>
      }
      else
      {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai[Instance], AudioInit->SampleRate) != HAL_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2298      	movs	r2, #152	@ 0x98
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	4a07      	ldr	r2, [pc, #28]	@ (8003104 <BSP_AUDIO_IN_Init+0x294>)
 80030e6:	441a      	add	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f001 ff90 	bl	8005014 <MX_SAI4_ClockConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d014      	beq.n	8003124 <BSP_AUDIO_IN_Init+0x2b4>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 80030fa:	f06f 0308 	mvn.w	r3, #8
 80030fe:	e2d5      	b.n	80036ac <BSP_AUDIO_IN_Init+0x83c>
 8003100:	240009e8 	.word	0x240009e8
 8003104:	240008b8 	.word	0x240008b8
 8003108:	40015804 	.word	0x40015804
 800310c:	240005cc 	.word	0x240005cc
 8003110:	40015824 	.word	0x40015824
 8003114:	24000664 	.word	0x24000664
 8003118:	51eb851f 	.word	0x51eb851f
 800311c:	24000a78 	.word	0x24000a78
 8003120:	240005c8 	.word	0x240005c8
      }
      haudio_in_sai[Instance].Instance = AUDIO_IN_SAI_PDMx;
 8003124:	4aa6      	ldr	r2, [pc, #664]	@ (80033c0 <BSP_AUDIO_IN_Init+0x550>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2198      	movs	r1, #152	@ 0x98
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	4aa4      	ldr	r2, [pc, #656]	@ (80033c4 <BSP_AUDIO_IN_Init+0x554>)
 8003132:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai[Instance]);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2298      	movs	r2, #152	@ 0x98
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	4aa0      	ldr	r2, [pc, #640]	@ (80033c0 <BSP_AUDIO_IN_Init+0x550>)
 800313e:	4413      	add	r3, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fc3d 	bl	80029c0 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_8;
 800314a:	2340      	movs	r3, #64	@ 0x40
 800314c:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 32;
 800314e:	2320      	movs	r3, #32
 8003150:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_2;
 800315a:	2304      	movs	r3, #4
 800315c:	633b      	str	r3, [r7, #48]	@ 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*16;
 800315e:	499a      	ldr	r1, [pc, #616]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4413      	add	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	440b      	add	r3, r1
 800316c:	3308      	adds	r3, #8
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8003174:	2301      	movs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 800317c:	2300      	movs	r3, #0
 800317e:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai[Instance], &mx_config) != HAL_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2298      	movs	r2, #152	@ 0x98
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	4a8c      	ldr	r2, [pc, #560]	@ (80033c0 <BSP_AUDIO_IN_Init+0x550>)
 800318e:	4413      	add	r3, r2
 8003190:	f107 0208 	add.w	r2, r7, #8
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fd8d 	bl	8003cb6 <MX_SAI4_Block_A_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <BSP_AUDIO_IN_Init+0x338>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 80031a2:	f06f 0303 	mvn.w	r3, #3
 80031a6:	e281      	b.n	80036ac <BSP_AUDIO_IN_Init+0x83c>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_BSP_PDM_LIB_FEATURE > 0U)
      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	4886      	ldr	r0, [pc, #536]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4403      	add	r3, r0
 80031ba:	3310      	adds	r3, #16
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	4c82      	ldr	r4, [pc, #520]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	4423      	add	r3, r4
 80031cc:	3310      	adds	r3, #16
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4602      	mov	r2, r0
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fdf4 	bl	8003dc0 <BSP_AUDIO_IN_PDMToPCM_Init>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 825a 	beq.w	8003694 <BSP_AUDIO_IN_Init+0x824>
      {
        return BSP_ERROR_NO_INIT;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	e262      	b.n	80036ac <BSP_AUDIO_IN_Init+0x83c>
#endif
    }
    }
    else /* (Instance == 2U) */
    {
      DFSDM_Filter_TypeDef* FilterInstnace[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_FILTER, AUDIO_DFSDMx_MIC2_FILTER,AUDIO_DFSDMx_MIC3_FILTER,AUDIO_DFSDMx_MIC4_FILTER};
 80031e6:	4b79      	ldr	r3, [pc, #484]	@ (80033cc <BSP_AUDIO_IN_Init+0x55c>)
 80031e8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80031ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      DFSDM_Channel_TypeDef* ChannelInstance[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL, AUDIO_DFSDMx_MIC2_CHANNEL,AUDIO_DFSDMx_MIC3_CHANNEL,AUDIO_DFSDMx_MIC4_CHANNEL};
 80031f2:	4b77      	ldr	r3, [pc, #476]	@ (80033d0 <BSP_AUDIO_IN_Init+0x560>)
 80031f4:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 80031f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicPins[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS, DFSDM_CHANNEL_SAME_CHANNEL_PINS, DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS};
 80031fe:	4b75      	ldr	r3, [pc, #468]	@ (80033d4 <BSP_AUDIO_IN_Init+0x564>)
 8003200:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8003204:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003206:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t DigitalMicType[DFSDM_MIC_NUMBER] = {DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING, DFSDM_CHANNEL_SPI_RISING, DFSDM_CHANNEL_SPI_FALLING};
 800320a:	4b73      	ldr	r3, [pc, #460]	@ (80033d8 <BSP_AUDIO_IN_Init+0x568>)
 800320c:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8003210:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      uint32_t Channel4Filter[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_MIC1_CHANNEL_FOR_FILTER, AUDIO_DFSDMx_MIC2_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC3_CHANNEL_FOR_FILTER,AUDIO_DFSDMx_MIC4_CHANNEL_FOR_FILTER};
 8003216:	4b71      	ldr	r3, [pc, #452]	@ (80033dc <BSP_AUDIO_IN_Init+0x56c>)
 8003218:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800321c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800321e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      MX_DFSDM_Config dfsdm_config;

      /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_DFSDM1_ClockConfig(&haudio_in_dfsdm_channel[0], AudioInit->SampleRate) != HAL_OK)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4619      	mov	r1, r3
 8003228:	486d      	ldr	r0, [pc, #436]	@ (80033e0 <BSP_AUDIO_IN_Init+0x570>)
 800322a:	f000 fc15 	bl	8003a58 <MX_DFSDM1_ClockConfig>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <BSP_AUDIO_IN_Init+0x3cc>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8003234:	f06f 0308 	mvn.w	r3, #8
 8003238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      }

      if(ret == BSP_ERROR_NONE)
 800323c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003240:	2b00      	cmp	r3, #0
 8003242:	f040 8227 	bne.w	8003694 <BSP_AUDIO_IN_Init+0x824>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        DFSDM_FilterMspInit(&haudio_in_dfsdm_filter[1]);
 8003246:	4867      	ldr	r0, [pc, #412]	@ (80033e4 <BSP_AUDIO_IN_Init+0x574>)
 8003248:	f001 fcfe 	bl	8004c48 <DFSDM_FilterMspInit>
        DFSDM_ChannelMspInit(&haudio_in_dfsdm_channel[1]);
 800324c:	4866      	ldr	r0, [pc, #408]	@ (80033e8 <BSP_AUDIO_IN_Init+0x578>)
 800324e:	f001 fc57 	bl	8004b00 <DFSDM_ChannelMspInit>
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
        if(ret == BSP_ERROR_NONE)
 8003252:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 821c 	bne.w	8003694 <BSP_AUDIO_IN_Init+0x824>
        {
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003262:	e210      	b.n	8003686 <BSP_AUDIO_IN_Init+0x816>
          {
            dfsdm_config.FilterInstance  = FilterInstnace[i];
 8003264:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	33a0      	adds	r3, #160	@ 0xa0
 800326c:	443b      	add	r3, r7
 800326e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003272:	60bb      	str	r3, [r7, #8]
            dfsdm_config.ChannelInstance = ChannelInstance[i];
 8003274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	33a0      	adds	r3, #160	@ 0xa0
 800327c:	443b      	add	r3, r7
 800327e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003282:	61bb      	str	r3, [r7, #24]
            dfsdm_config.DigitalMicPins  = DigitalMicPins[i];
 8003284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	33a0      	adds	r3, #160	@ 0xa0
 800328c:	443b      	add	r3, r7
 800328e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8003292:	61fb      	str	r3, [r7, #28]
            dfsdm_config.DigitalMicType  = DigitalMicType[i];
 8003294:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	33a0      	adds	r3, #160	@ 0xa0
 800329c:	443b      	add	r3, r7
 800329e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80032a2:	623b      	str	r3, [r7, #32]
            dfsdm_config.Channel4Filter  = Channel4Filter[i];
 80032a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	33a0      	adds	r3, #160	@ 0xa0
 80032ac:	443b      	add	r3, r7
 80032ae:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
            dfsdm_config.RegularTrigger  = DFSDM_FILTER_SW_TRIGGER;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
            /* MIC2, MIC3 and MIC4 should be synchronized to MIC1 if it's used */
            if((i >= 1U) && (i < 4U) && ((Audio_In_Ctx[Instance].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 80032b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d012      	beq.n	80032e6 <BSP_AUDIO_IN_Init+0x476>
 80032c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d80e      	bhi.n	80032e6 <BSP_AUDIO_IN_Init+0x476>
 80032c8:	493f      	ldr	r1, [pc, #252]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	440b      	add	r3, r1
 80032d6:	3304      	adds	r3, #4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <BSP_AUDIO_IN_Init+0x476>
            {
              dfsdm_config.RegularTrigger = DFSDM_FILTER_SYNC_TRIGGER;
 80032e2:	2301      	movs	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
            }
            dfsdm_config.SincOrder       = DFSDM_FILTER_ORDER(Audio_In_Ctx[Instance].SampleRate);
 80032e6:	4938      	ldr	r1, [pc, #224]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	440b      	add	r3, r1
 80032f4:	3308      	adds	r3, #8
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80032fc:	d076      	beq.n	80033ec <BSP_AUDIO_IN_Init+0x57c>
 80032fe:	4932      	ldr	r1, [pc, #200]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	440b      	add	r3, r1
 800330c:	3308      	adds	r3, #8
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003314:	4293      	cmp	r3, r2
 8003316:	d050      	beq.n	80033ba <BSP_AUDIO_IN_Init+0x54a>
 8003318:	492b      	ldr	r1, [pc, #172]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	440b      	add	r3, r1
 8003326:	3308      	adds	r3, #8
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800332e:	d041      	beq.n	80033b4 <BSP_AUDIO_IN_Init+0x544>
 8003330:	4925      	ldr	r1, [pc, #148]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	3308      	adds	r3, #8
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003346:	4293      	cmp	r3, r2
 8003348:	d031      	beq.n	80033ae <BSP_AUDIO_IN_Init+0x53e>
 800334a:	491f      	ldr	r1, [pc, #124]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	440b      	add	r3, r1
 8003358:	3308      	adds	r3, #8
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003360:	d022      	beq.n	80033a8 <BSP_AUDIO_IN_Init+0x538>
 8003362:	4919      	ldr	r1, [pc, #100]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	440b      	add	r3, r1
 8003370:	3308      	adds	r3, #8
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003378:	4293      	cmp	r3, r2
 800337a:	d012      	beq.n	80033a2 <BSP_AUDIO_IN_Init+0x532>
 800337c:	4912      	ldr	r1, [pc, #72]	@ (80033c8 <BSP_AUDIO_IN_Init+0x558>)
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	440b      	add	r3, r1
 800338a:	3308      	adds	r3, #8
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003392:	4293      	cmp	r3, r2
 8003394:	d102      	bne.n	800339c <BSP_AUDIO_IN_Init+0x52c>
 8003396:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800339a:	e029      	b.n	80033f0 <BSP_AUDIO_IN_Init+0x580>
 800339c:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 80033a0:	e026      	b.n	80033f0 <BSP_AUDIO_IN_Init+0x580>
 80033a2:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033a6:	e023      	b.n	80033f0 <BSP_AUDIO_IN_Init+0x580>
 80033a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80033ac:	e020      	b.n	80033f0 <BSP_AUDIO_IN_Init+0x580>
 80033ae:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033b2:	e01d      	b.n	80033f0 <BSP_AUDIO_IN_Init+0x580>
 80033b4:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033b8:	e01a      	b.n	80033f0 <BSP_AUDIO_IN_Init+0x580>
 80033ba:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033be:	e017      	b.n	80033f0 <BSP_AUDIO_IN_Init+0x580>
 80033c0:	240008b8 	.word	0x240008b8
 80033c4:	58005404 	.word	0x58005404
 80033c8:	240009e8 	.word	0x240009e8
 80033cc:	08015870 	.word	0x08015870
 80033d0:	08015880 	.word	0x08015880
 80033d4:	08015890 	.word	0x08015890
 80033d8:	080158a0 	.word	0x080158a0
 80033dc:	080158b0 	.word	0x080158b0
 80033e0:	240007d8 	.word	0x240007d8
 80033e4:	240006dc 	.word	0x240006dc
 80033e8:	24000810 	.word	0x24000810
 80033ec:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80033f0:	613b      	str	r3, [r7, #16]
            dfsdm_config.Oversampling    = DFSDM_OVER_SAMPLING(Audio_In_Ctx[Instance].SampleRate);
 80033f2:	49b0      	ldr	r1, [pc, #704]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	440b      	add	r3, r1
 8003400:	3308      	adds	r3, #8
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003408:	d05a      	beq.n	80034c0 <BSP_AUDIO_IN_Init+0x650>
 800340a:	49aa      	ldr	r1, [pc, #680]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	440b      	add	r3, r1
 8003418:	3308      	adds	r3, #8
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003420:	4293      	cmp	r3, r2
 8003422:	d04a      	beq.n	80034ba <BSP_AUDIO_IN_Init+0x64a>
 8003424:	49a3      	ldr	r1, [pc, #652]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	440b      	add	r3, r1
 8003432:	3308      	adds	r3, #8
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800343a:	d03c      	beq.n	80034b6 <BSP_AUDIO_IN_Init+0x646>
 800343c:	499d      	ldr	r1, [pc, #628]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	440b      	add	r3, r1
 800344a:	3308      	adds	r3, #8
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003452:	4293      	cmp	r3, r2
 8003454:	d02d      	beq.n	80034b2 <BSP_AUDIO_IN_Init+0x642>
 8003456:	4997      	ldr	r1, [pc, #604]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	440b      	add	r3, r1
 8003464:	3308      	adds	r3, #8
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800346c:	d01f      	beq.n	80034ae <BSP_AUDIO_IN_Init+0x63e>
 800346e:	4991      	ldr	r1, [pc, #580]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	440b      	add	r3, r1
 800347c:	3308      	adds	r3, #8
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003484:	4293      	cmp	r3, r2
 8003486:	d010      	beq.n	80034aa <BSP_AUDIO_IN_Init+0x63a>
 8003488:	498a      	ldr	r1, [pc, #552]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	440b      	add	r3, r1
 8003496:	3308      	adds	r3, #8
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <BSP_AUDIO_IN_Init+0x636>
 80034a2:	2320      	movs	r3, #32
 80034a4:	e00e      	b.n	80034c4 <BSP_AUDIO_IN_Init+0x654>
 80034a6:	2310      	movs	r3, #16
 80034a8:	e00c      	b.n	80034c4 <BSP_AUDIO_IN_Init+0x654>
 80034aa:	2340      	movs	r3, #64	@ 0x40
 80034ac:	e00a      	b.n	80034c4 <BSP_AUDIO_IN_Init+0x654>
 80034ae:	2340      	movs	r3, #64	@ 0x40
 80034b0:	e008      	b.n	80034c4 <BSP_AUDIO_IN_Init+0x654>
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	e006      	b.n	80034c4 <BSP_AUDIO_IN_Init+0x654>
 80034b6:	2380      	movs	r3, #128	@ 0x80
 80034b8:	e004      	b.n	80034c4 <BSP_AUDIO_IN_Init+0x654>
 80034ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034be:	e001      	b.n	80034c4 <BSP_AUDIO_IN_Init+0x654>
 80034c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034c4:	617b      	str	r3, [r7, #20]
            dfsdm_config.ClockDivider    = DFSDM_CLOCK_DIVIDER(Audio_In_Ctx[Instance].SampleRate);
 80034c6:	497b      	ldr	r1, [pc, #492]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	440b      	add	r3, r1
 80034d4:	3308      	adds	r3, #8
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80034dc:	d04a      	beq.n	8003574 <BSP_AUDIO_IN_Init+0x704>
 80034de:	4975      	ldr	r1, [pc, #468]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	440b      	add	r3, r1
 80034ec:	3308      	adds	r3, #8
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d03b      	beq.n	8003570 <BSP_AUDIO_IN_Init+0x700>
 80034f8:	496e      	ldr	r1, [pc, #440]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	4413      	add	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	440b      	add	r3, r1
 8003506:	3308      	adds	r3, #8
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800350e:	d02d      	beq.n	800356c <BSP_AUDIO_IN_Init+0x6fc>
 8003510:	4968      	ldr	r1, [pc, #416]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	440b      	add	r3, r1
 800351e:	3308      	adds	r3, #8
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003526:	4293      	cmp	r3, r2
 8003528:	d01e      	beq.n	8003568 <BSP_AUDIO_IN_Init+0x6f8>
 800352a:	4962      	ldr	r1, [pc, #392]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	440b      	add	r3, r1
 8003538:	3308      	adds	r3, #8
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003540:	d010      	beq.n	8003564 <BSP_AUDIO_IN_Init+0x6f4>
 8003542:	495c      	ldr	r1, [pc, #368]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	440b      	add	r3, r1
 8003550:	3308      	adds	r3, #8
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <BSP_AUDIO_IN_Init+0x6f0>
 800355c:	2304      	movs	r3, #4
 800355e:	e00a      	b.n	8003576 <BSP_AUDIO_IN_Init+0x706>
 8003560:	2320      	movs	r3, #32
 8003562:	e008      	b.n	8003576 <BSP_AUDIO_IN_Init+0x706>
 8003564:	2318      	movs	r3, #24
 8003566:	e006      	b.n	8003576 <BSP_AUDIO_IN_Init+0x706>
 8003568:	2304      	movs	r3, #4
 800356a:	e004      	b.n	8003576 <BSP_AUDIO_IN_Init+0x706>
 800356c:	2318      	movs	r3, #24
 800356e:	e002      	b.n	8003576 <BSP_AUDIO_IN_Init+0x706>
 8003570:	2304      	movs	r3, #4
 8003572:	e000      	b.n	8003576 <BSP_AUDIO_IN_Init+0x706>
 8003574:	2318      	movs	r3, #24
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
            dfsdm_config.RightBitShift   = DFSDM_MIC_BIT_SHIFT(Audio_In_Ctx[Instance].SampleRate);
 8003578:	494e      	ldr	r1, [pc, #312]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4413      	add	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	440b      	add	r3, r1
 8003586:	3308      	adds	r3, #8
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800358e:	d04a      	beq.n	8003626 <BSP_AUDIO_IN_Init+0x7b6>
 8003590:	4948      	ldr	r1, [pc, #288]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	440b      	add	r3, r1
 800359e:	3308      	adds	r3, #8
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d03b      	beq.n	8003622 <BSP_AUDIO_IN_Init+0x7b2>
 80035aa:	4942      	ldr	r1, [pc, #264]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	440b      	add	r3, r1
 80035b8:	3308      	adds	r3, #8
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80035c0:	d02d      	beq.n	800361e <BSP_AUDIO_IN_Init+0x7ae>
 80035c2:	493c      	ldr	r1, [pc, #240]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	4413      	add	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	440b      	add	r3, r1
 80035d0:	3308      	adds	r3, #8
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f245 6222 	movw	r2, #22050	@ 0x5622
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01e      	beq.n	800361a <BSP_AUDIO_IN_Init+0x7aa>
 80035dc:	4935      	ldr	r1, [pc, #212]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	440b      	add	r3, r1
 80035ea:	3308      	adds	r3, #8
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80035f2:	d010      	beq.n	8003616 <BSP_AUDIO_IN_Init+0x7a6>
 80035f4:	492f      	ldr	r1, [pc, #188]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	440b      	add	r3, r1
 8003602:	3308      	adds	r3, #8
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <BSP_AUDIO_IN_Init+0x7a2>
 800360e:	2300      	movs	r3, #0
 8003610:	e00a      	b.n	8003628 <BSP_AUDIO_IN_Init+0x7b8>
 8003612:	2302      	movs	r3, #2
 8003614:	e008      	b.n	8003628 <BSP_AUDIO_IN_Init+0x7b8>
 8003616:	2306      	movs	r3, #6
 8003618:	e006      	b.n	8003628 <BSP_AUDIO_IN_Init+0x7b8>
 800361a:	2303      	movs	r3, #3
 800361c:	e004      	b.n	8003628 <BSP_AUDIO_IN_Init+0x7b8>
 800361e:	2303      	movs	r3, #3
 8003620:	e002      	b.n	8003628 <BSP_AUDIO_IN_Init+0x7b8>
 8003622:	2306      	movs	r3, #6
 8003624:	e000      	b.n	8003628 <BSP_AUDIO_IN_Init+0x7b8>
 8003626:	2305      	movs	r3, #5
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if(((AudioInit->Device >> i) & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003632:	fa22 f303 	lsr.w	r3, r2, r3
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01a      	beq.n	8003674 <BSP_AUDIO_IN_Init+0x804>
            {
              /* Default configuration of DFSDM filters and channels */
              if(MX_DFSDM1_Init(&haudio_in_dfsdm_filter[i], &haudio_in_dfsdm_channel[i], &dfsdm_config) != HAL_OK)
 800363e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003642:	2254      	movs	r2, #84	@ 0x54
 8003644:	fb02 f303 	mul.w	r3, r2, r3
 8003648:	4a1b      	ldr	r2, [pc, #108]	@ (80036b8 <BSP_AUDIO_IN_Init+0x848>)
 800364a:	1898      	adds	r0, r3, r2
 800364c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4a18      	ldr	r2, [pc, #96]	@ (80036bc <BSP_AUDIO_IN_Init+0x84c>)
 800365a:	4413      	add	r3, r2
 800365c:	f107 0208 	add.w	r2, r7, #8
 8003660:	4619      	mov	r1, r3
 8003662:	f000 fa21 	bl	8003aa8 <MX_DFSDM1_Init>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <BSP_AUDIO_IN_Init+0x804>
              {
                /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
                ret = BSP_ERROR_PERIPH_FAILURE;
 800366c:	f06f 0303 	mvn.w	r3, #3
 8003670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                  ret = BSP_ERROR_PERIPH_FAILURE;
                }
              }
#endif /* (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1) */
            }
            if(ret != BSP_ERROR_NONE)
 8003674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <BSP_AUDIO_IN_Init+0x822>
          for(i = 0; i < DFSDM_MIC_NUMBER; i ++)
 800367c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003680:	3301      	adds	r3, #1
 8003682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003686:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800368a:	2b03      	cmp	r3, #3
 800368c:	f67f adea 	bls.w	8003264 <BSP_AUDIO_IN_Init+0x3f4>
 8003690:	e000      	b.n	8003694 <BSP_AUDIO_IN_Init+0x824>
            {
              break;
 8003692:	bf00      	nop
        }
      }
    }

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8003694:	4907      	ldr	r1, [pc, #28]	@ (80036b4 <BSP_AUDIO_IN_Init+0x844>)
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	440b      	add	r3, r1
 80036a2:	3324      	adds	r3, #36	@ 0x24
 80036a4:	2202      	movs	r2, #2
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80036a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	37a4      	adds	r7, #164	@ 0xa4
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}
 80036b4:	240009e8 	.word	0x240009e8
 80036b8:	24000688 	.word	0x24000688
 80036bc:	240007d8 	.word	0x240007d8

080036c0 <BSP_AUDIO_IN_OUT_Init_Ex>:
  * @param  Instance  Audio IN instance: 0 for SAI, 1 for SAI PDM and 2 for DFSDM
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_OUT_Init_Ex(uint32_t InstanceIn, uint32_t InstanceOut, BSP_AUDIO_Init_t* AudioInitIn, BSP_AUDIO_Init_t* AudioInitOut)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	@ 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	@ 0x24

  if(InstanceIn >= AUDIO_IN_INSTANCES_NBR || InstanceOut >= AUDIO_IN_INSTANCES_NBR)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d802      	bhi.n	80036de <BSP_AUDIO_IN_OUT_Init_Ex+0x1e>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d903      	bls.n	80036e6 <BSP_AUDIO_IN_OUT_Init_Ex+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80036de:	f06f 0301 	mvn.w	r3, #1
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e4:	e1a2      	b.n	8003a2c <BSP_AUDIO_IN_OUT_Init_Ex+0x36c>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[InstanceIn].Device          = AudioInitIn->Device;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	4853      	ldr	r0, [pc, #332]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4613      	mov	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4413      	add	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4403      	add	r3, r0
 80036f8:	3304      	adds	r3, #4
 80036fa:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].ChannelsNbr     = AudioInitIn->ChannelsNbr;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68d9      	ldr	r1, [r3, #12]
 8003700:	484d      	ldr	r0, [pc, #308]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	4403      	add	r3, r0
 800370e:	3310      	adds	r3, #16
 8003710:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].SampleRate      = AudioInitIn->SampleRate;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	4848      	ldr	r0, [pc, #288]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4613      	mov	r3, r2
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	4413      	add	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	4403      	add	r3, r0
 8003724:	3308      	adds	r3, #8
 8003726:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].BitsPerSample   = AudioInitIn->BitsPerSample;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6899      	ldr	r1, [r3, #8]
 800372c:	4842      	ldr	r0, [pc, #264]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	4403      	add	r3, r0
 800373a:	330c      	adds	r3, #12
 800373c:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].Volume          = AudioInitIn->Volume;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6919      	ldr	r1, [r3, #16]
 8003742:	483d      	ldr	r0, [pc, #244]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4613      	mov	r3, r2
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	4413      	add	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	4403      	add	r3, r0
 8003750:	3320      	adds	r3, #32
 8003752:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[InstanceIn].State           = AUDIO_IN_STATE_RESET;
 8003754:	4938      	ldr	r1, [pc, #224]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	440b      	add	r3, r1
 8003762:	3324      	adds	r3, #36	@ 0x24
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    
    Audio_Out_Ctx[InstanceOut].Device          = AudioInitOut->Device;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	4833      	ldr	r0, [pc, #204]	@ (800383c <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4403      	add	r3, r0
 800377a:	3304      	adds	r3, #4
 800377c:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].ChannelsNbr     = AudioInitOut->ChannelsNbr;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68d9      	ldr	r1, [r3, #12]
 8003782:	482e      	ldr	r0, [pc, #184]	@ (800383c <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4403      	add	r3, r0
 8003790:	3314      	adds	r3, #20
 8003792:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].SampleRate      = AudioInitOut->SampleRate;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6859      	ldr	r1, [r3, #4]
 8003798:	4828      	ldr	r0, [pc, #160]	@ (800383c <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4403      	add	r3, r0
 80037a6:	3308      	adds	r3, #8
 80037a8:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].BitsPerSample   = AudioInitOut->BitsPerSample;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	4823      	ldr	r0, [pc, #140]	@ (800383c <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4403      	add	r3, r0
 80037bc:	330c      	adds	r3, #12
 80037be:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].Volume          = AudioInitOut->Volume;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6919      	ldr	r1, [r3, #16]
 80037c4:	481d      	ldr	r0, [pc, #116]	@ (800383c <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4403      	add	r3, r0
 80037d2:	3310      	adds	r3, #16
 80037d4:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[InstanceOut].State           = AUDIO_IN_STATE_RESET;
 80037d6:	4919      	ldr	r1, [pc, #100]	@ (800383c <BSP_AUDIO_IN_OUT_Init_Ex+0x17c>)
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	331c      	adds	r3, #28
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
    
    #if (USE_AUDIO_CODEC_WM8994 == 1)
    if (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET)
 80037ea:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <BSP_AUDIO_IN_OUT_Init_Ex+0x178>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <BSP_AUDIO_IN_OUT_Init_Ex+0x142>
    {
      if(WM8994_Probe() != BSP_ERROR_NONE)
 80037f2:	f7ff f88b 	bl	800290c <WM8994_Probe>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <BSP_AUDIO_IN_OUT_Init_Ex+0x142>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80037fc:	f06f 0304 	mvn.w	r3, #4
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
#endif

    if(InstanceOut == 0U && InstanceIn == 0)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 8105 	bne.w	8003a14 <BSP_AUDIO_IN_OUT_Init_Ex+0x354>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f040 8101 	bne.w	8003a14 <BSP_AUDIO_IN_OUT_Init_Ex+0x354>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2298      	movs	r2, #152	@ 0x98
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	@ (8003840 <BSP_AUDIO_IN_OUT_Init_Ex+0x180>)
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f001 fbe5 	bl	8004ff4 <MX_SAI1_ClockConfig>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d009      	beq.n	8003844 <BSP_AUDIO_IN_OUT_Init_Ex+0x184>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8003830:	f06f 0308 	mvn.w	r3, #8
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 8003836:	e0f8      	b.n	8003a2a <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
 8003838:	240009e8 	.word	0x240009e8
 800383c:	24000664 	.word	0x24000664
 8003840:	240008b8 	.word	0x240008b8
      }
      else
      {
        haudio_in_sai[InstanceIn].Instance    = AUDIO_IN_SAIx;
 8003844:	4a7c      	ldr	r2, [pc, #496]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2198      	movs	r1, #152	@ 0x98
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	4a7a      	ldr	r2, [pc, #488]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x37c>)
 8003852:	601a      	str	r2, [r3, #0]
        haudio_out_sai.Instance   = AUDIO_OUT_SAIx;
 8003854:	4b7a      	ldr	r3, [pc, #488]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003856:	4a7b      	ldr	r2, [pc, #492]	@ (8003a44 <BSP_AUDIO_IN_OUT_Init_Ex+0x384>)
 8003858:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_in_sai[InstanceIn]);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2298      	movs	r2, #152	@ 0x98
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	4a75      	ldr	r2, [pc, #468]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003864:	4413      	add	r3, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff f8aa 	bl	80029c0 <SAI_MspInit>
        SAI_MspInit(&haudio_out_sai);
 800386c:	4874      	ldr	r0, [pc, #464]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800386e:	f7ff f8a7 	bl	80029c0 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1) */
        if (ret == BSP_ERROR_NONE)
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 80d8 	bne.w	8003a2a <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
        {
          __HAL_SAI_RESET_HANDLE_STATE(&haudio_in_sai[InstanceIn]);
 800387a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2198      	movs	r1, #152	@ 0x98
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	3391      	adds	r3, #145	@ 0x91
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
          
          haudio_in_sai[InstanceIn].Instance = SAI1_Block_A;
 800388c:	4a6a      	ldr	r2, [pc, #424]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2198      	movs	r1, #152	@ 0x98
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	4a68      	ldr	r2, [pc, #416]	@ (8003a3c <BSP_AUDIO_IN_OUT_Init_Ex+0x37c>)
 800389a:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.AudioMode = SAI_MODESLAVE_RX;
 800389c:	4a66      	ldr	r2, [pc, #408]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2198      	movs	r1, #152	@ 0x98
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3304      	adds	r3, #4
 80038aa:	2203      	movs	r2, #3
 80038ac:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.Synchro = SAI_SYNCHRONOUS;
 80038ae:	4a62      	ldr	r2, [pc, #392]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2198      	movs	r1, #152	@ 0x98
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	4413      	add	r3, r2
 80038ba:	3308      	adds	r3, #8
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80038c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2198      	movs	r1, #152	@ 0x98
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3314      	adds	r3, #20
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;//SAI_FIFOTHRESHOLD_1QF;
 80038d2:	4a59      	ldr	r2, [pc, #356]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2198      	movs	r1, #152	@ 0x98
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	331c      	adds	r3, #28
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80038e4:	4a54      	ldr	r2, [pc, #336]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2198      	movs	r1, #152	@ 0x98
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	330c      	adds	r3, #12
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.MonoStereoMode = SAI_STEREOMODE;
 80038f6:	4a50      	ldr	r2, [pc, #320]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2198      	movs	r1, #152	@ 0x98
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	332c      	adds	r3, #44	@ 0x2c
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.CompandingMode = SAI_NOCOMPANDING;
 8003908:	4a4b      	ldr	r2, [pc, #300]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2198      	movs	r1, #152	@ 0x98
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3330      	adds	r3, #48	@ 0x30
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
          haudio_in_sai[InstanceIn].Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800391a:	4a47      	ldr	r2, [pc, #284]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2198      	movs	r1, #152	@ 0x98
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	3334      	adds	r3, #52	@ 0x34
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
          if (HAL_SAI_InitProtocol(&haudio_in_sai[InstanceIn], SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2298      	movs	r2, #152	@ 0x98
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	4a40      	ldr	r2, [pc, #256]	@ (8003a38 <BSP_AUDIO_IN_OUT_Init_Ex+0x378>)
 8003936:	1898      	adds	r0, r3, r2
 8003938:	2302      	movs	r3, #2
 800393a:	2200      	movs	r2, #0
 800393c:	2100      	movs	r1, #0
 800393e:	f00c f8cf 	bl	800fae0 <HAL_SAI_InitProtocol>
          {
          // Error_Handler();
          }
          
          __HAL_SAI_RESET_HANDLE_STATE(&haudio_out_sai);
 8003942:	4b3f      	ldr	r3, [pc, #252]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
          haudio_out_sai.Instance = SAI1_Block_B;
 800394a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800394c:	4a3d      	ldr	r2, [pc, #244]	@ (8003a44 <BSP_AUDIO_IN_OUT_Init_Ex+0x384>)
 800394e:	601a      	str	r2, [r3, #0]
          haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 8003950:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003952:	2200      	movs	r2, #0
 8003954:	605a      	str	r2, [r3, #4]
          haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8003956:	4b3a      	ldr	r3, [pc, #232]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
          haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800395c:	4b38      	ldr	r3, [pc, #224]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800395e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003962:	615a      	str	r2, [r3, #20]
          haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003964:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
          haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;//SAI_FIFOTHRESHOLD_1QF;
 800396a:	4b35      	ldr	r3, [pc, #212]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800396c:	2200      	movs	r2, #0
 800396e:	61da      	str	r2, [r3, #28]
          haudio_out_sai.Init.AudioFrequency = AudioInitOut->SampleRate;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4a32      	ldr	r2, [pc, #200]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003976:	6213      	str	r3, [r2, #32]
          haudio_out_sai.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003978:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800397a:	2200      	movs	r2, #0
 800397c:	60da      	str	r2, [r3, #12]
          haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 800397e:	4b30      	ldr	r3, [pc, #192]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003980:	2200      	movs	r2, #0
 8003982:	62da      	str	r2, [r3, #44]	@ 0x2c
          haudio_out_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8003984:	4b2e      	ldr	r3, [pc, #184]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003986:	2200      	movs	r2, #0
 8003988:	631a      	str	r2, [r3, #48]	@ 0x30
          haudio_out_sai.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800398a:	4b2d      	ldr	r3, [pc, #180]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800398c:	2200      	movs	r2, #0
 800398e:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_SAI_InitProtocol(&haudio_out_sai, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8003990:	2302      	movs	r3, #2
 8003992:	2200      	movs	r2, #0
 8003994:	2100      	movs	r1, #0
 8003996:	482a      	ldr	r0, [pc, #168]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 8003998:	f00c f8a2 	bl	800fae0 <HAL_SAI_InitProtocol>
          {
            //Error_Handler();
          }
          __HAL_SAI_ENABLE(&haudio_out_sai);
 800399c:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <BSP_AUDIO_IN_OUT_Init_Ex+0x380>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80039aa:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
          if (ret == BSP_ERROR_NONE)
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d13b      	bne.n	8003a2a <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
          {          
            WM8994_Init_t codec_init;

            /* Fill codec_init structure */
            codec_init.OutputDevice = WM8994_OUT_HEADPHONE;//(Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) ? WM8994_OUT_NONE : WM8994_OUT_HEADPHONE;
 80039b2:	2302      	movs	r3, #2
 80039b4:	617b      	str	r3, [r7, #20]
            codec_init.Frequency    = AudioInitOut->SampleRate;//Audio_Out_Ctx[0].SampleRate;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	61bb      	str	r3, [r7, #24]
            codec_init.Resolution   = WM8994_RESOLUTION_16b; //(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_32B) ? WM8994_RESOLUTION_32b : WM8994_RESOLUTION_16b;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
            codec_init.InputDevice  = WM8994_IN_LINE1;//(Audio_In_Ctx[0].Device == AUDIO_IN_DEVICE_ANALOG_MIC) ? WM8994_IN_LINE1 : WM8994_IN_MIC2;
 80039c0:	2303      	movs	r3, #3
 80039c2:	613b      	str	r3, [r7, #16]

            /* Convert volume before sending to the codec */
            codec_init.Volume       = (Audio_In_Ctx[0].Volume);
 80039c4:	4b20      	ldr	r3, [pc, #128]	@ (8003a48 <BSP_AUDIO_IN_OUT_Init_Ex+0x388>)
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	623b      	str	r3, [r7, #32]
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) < 0)
 80039ca:	4b20      	ldr	r3, [pc, #128]	@ (8003a4c <BSP_AUDIO_IN_OUT_Init_Ex+0x38c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a50 <BSP_AUDIO_IN_OUT_Init_Ex+0x390>)
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	f107 0110 	add.w	r1, r7, #16
 80039d8:	4610      	mov	r0, r2
 80039da:	4798      	blx	r3
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da03      	bge.n	80039ea <BSP_AUDIO_IN_OUT_Init_Ex+0x32a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80039e2:	f06f 0304 	mvn.w	r3, #4
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 80039e8:	e01f      	b.n	8003a2a <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
            }
            else
            {
              /* Update audio in context state */
              Audio_In_Ctx[InstanceIn].State = AUDIO_IN_STATE_STOP;
 80039ea:	4917      	ldr	r1, [pc, #92]	@ (8003a48 <BSP_AUDIO_IN_OUT_Init_Ex+0x388>)
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	440b      	add	r3, r1
 80039f8:	3324      	adds	r3, #36	@ 0x24
 80039fa:	2202      	movs	r2, #2
 80039fc:	601a      	str	r2, [r3, #0]
              Audio_Out_Ctx[InstanceOut].State = AUDIO_IN_STATE_STOP;
 80039fe:	4915      	ldr	r1, [pc, #84]	@ (8003a54 <BSP_AUDIO_IN_OUT_Init_Ex+0x394>)
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	331c      	adds	r3, #28
 8003a0e:	2202      	movs	r2, #2
 8003a10:	601a      	str	r2, [r3, #0]
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 8003a12:	e00a      	b.n	8003a2a <BSP_AUDIO_IN_OUT_Init_Ex+0x36a>
          }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
        }
      }
    }
    else if(InstanceOut == 0U && InstanceIn == 1)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <BSP_AUDIO_IN_OUT_Init_Ex+0x36c>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d105      	bne.n	8003a2c <BSP_AUDIO_IN_OUT_Init_Ex+0x36c>
    {
      BSP_AUDIO_IN_Init(InstanceIn, AudioInitIn);
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff fa24 	bl	8002e70 <BSP_AUDIO_IN_Init>
 8003a28:	e000      	b.n	8003a2c <BSP_AUDIO_IN_OUT_Init_Ex+0x36c>
      if(MX_SAI1_ClockConfig(&haudio_in_sai[InstanceIn], AudioInitIn->SampleRate) != HAL_OK)
 8003a2a:	bf00      	nop
//    /* Update BSP AUDIO IN state */
//    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
  }

  /* Return BSP status */
  return ret;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3728      	adds	r7, #40	@ 0x28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	240008b8 	.word	0x240008b8
 8003a3c:	40015804 	.word	0x40015804
 8003a40:	240005cc 	.word	0x240005cc
 8003a44:	40015824 	.word	0x40015824
 8003a48:	240009e8 	.word	0x240009e8
 8003a4c:	24000a78 	.word	0x24000a78
 8003a50:	240005c8 	.word	0x240005c8
 8003a54:	24000664 	.word	0x24000664

08003a58 <MX_DFSDM1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_ClockConfig(DFSDM_Channel_HandleTypeDef *hDfsdmChannel, uint32_t SampleRate)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b0b0      	sub	sp, #192	@ 0xc0
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  HAL_StatusTypeDef ret = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003a68:	f107 0308 	add.w	r3, r7, #8
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f00a fd4f 	bl	800e510 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Configure the PLL2 according to the requested audio frequency if not already done by other instances */
  if ((Audio_Out_Ctx[0].State == AUDIO_OUT_STATE_RESET) && (Audio_In_Ctx[0].State == AUDIO_IN_STATE_RESET))
 8003a72:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <MX_DFSDM1_ClockConfig+0x44>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <MX_DFSDM1_ClockConfig+0x38>
 8003a7a:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <MX_DFSDM1_ClockConfig+0x48>)
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <MX_DFSDM1_ClockConfig+0x38>
  {
    ret = MX_SAI1_ClockConfig(&haudio_in_sai[0], SampleRate);
 8003a82:	6839      	ldr	r1, [r7, #0]
 8003a84:	4807      	ldr	r0, [pc, #28]	@ (8003aa4 <MX_DFSDM1_ClockConfig+0x4c>)
 8003a86:	f001 fab5 	bl	8004ff4 <MX_SAI1_ClockConfig>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  }

  return ret;
 8003a90:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	37c0      	adds	r7, #192	@ 0xc0
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	24000664 	.word	0x24000664
 8003aa0:	240009e8 	.word	0x240009e8
 8003aa4:	240008b8 	.word	0x240008b8

08003aa8 <MX_DFSDM1_Init>:
  *           1MHZ < CLK(micro) < 3.2MHZ (TYP 2.4MHZ for MP34DT01TR)
  *         - Oversampling = CLK(input DFSDM)/(Clock_Divider * AudioFreq)
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_DFSDM1_Init(DFSDM_Filter_HandleTypeDef *hDfsdmFilter, DFSDM_Channel_HandleTypeDef *hDfsdmChannel, MX_DFSDM_Config *MXConfig)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  /* MIC filters  initialization */
  hDfsdmFilter->Instance                          = MXConfig->FilterInstance;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	601a      	str	r2, [r3, #0]
  hDfsdmFilter->Init.RegularParam.Trigger         = MXConfig->RegularTrigger;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	605a      	str	r2, [r3, #4]
  hDfsdmFilter->Init.RegularParam.FastMode        = ENABLE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	721a      	strb	r2, [r3, #8]
  hDfsdmFilter->Init.RegularParam.DmaMode         = ENABLE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	725a      	strb	r2, [r3, #9]
  hDfsdmFilter->Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60da      	str	r2, [r3, #12]
  hDfsdmFilter->Init.InjectedParam.ScanMode       = DISABLE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	741a      	strb	r2, [r3, #16]
  hDfsdmFilter->Init.InjectedParam.DmaMode        = DISABLE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	745a      	strb	r2, [r3, #17]
  hDfsdmFilter->Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM8_TRGO;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae8:	615a      	str	r2, [r3, #20]
  hDfsdmFilter->Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_BOTH_EDGES;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8003af0:	619a      	str	r2, [r3, #24]
  hDfsdmFilter->Init.FilterParam.SincOrder        = MXConfig->SincOrder;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	61da      	str	r2, [r3, #28]
  hDfsdmFilter->Init.FilterParam.Oversampling     = MXConfig->Oversampling;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	621a      	str	r2, [r3, #32]
  hDfsdmFilter->Init.FilterParam.IntOversampling  = 1;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	625a      	str	r2, [r3, #36]	@ 0x24

  if(HAL_DFSDM_FilterInit(hDfsdmFilter) != HAL_OK)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f003 fe6b 	bl	80077e4 <HAL_DFSDM_FilterInit>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_DFSDM1_Init+0x70>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e042      	b.n	8003b9e <MX_DFSDM1_Init+0xf6>
  }

  /* MIC channels initialization */
  hDfsdmChannel->Instance                      = MXConfig->ChannelInstance;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	601a      	str	r2, [r3, #0]
  hDfsdmChannel->Init.OutputClock.Activation   = ENABLE;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2201      	movs	r2, #1
 8003b24:	711a      	strb	r2, [r3, #4]
  hDfsdmChannel->Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b2c:	609a      	str	r2, [r3, #8]
  hDfsdmChannel->Init.OutputClock.Divider      = MXConfig->ClockDivider;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1a      	ldr	r2, [r3, #32]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	60da      	str	r2, [r3, #12]
  hDfsdmChannel->Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]
  hDfsdmChannel->Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	615a      	str	r2, [r3, #20]
  hDfsdmChannel->Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2204      	movs	r2, #4
 8003b46:	621a      	str	r2, [r3, #32]
  hDfsdmChannel->Init.Awd.FilterOrder          = DFSDM_CHANNEL_SINC1_ORDER;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hDfsdmChannel->Init.Awd.Oversampling         = 10;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	220a      	movs	r2, #10
 8003b54:	629a      	str	r2, [r3, #40]	@ 0x28
  hDfsdmChannel->Init.Offset                   = 0;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hDfsdmChannel->Init.RightBitShift            = MXConfig->RightBitShift;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hDfsdmChannel->Init.Input.Pins               = MXConfig->DigitalMicPins;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	619a      	str	r2, [r3, #24]
  hDfsdmChannel->Init.SerialInterface.Type     = MXConfig->DigitalMicType;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61da      	str	r2, [r3, #28]

  if(HAL_OK != HAL_DFSDM_ChannelInit(hDfsdmChannel))
 8003b74:	68b8      	ldr	r0, [r7, #8]
 8003b76:	f003 fd63 	bl	8007640 <HAL_DFSDM_ChannelInit>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_DFSDM1_Init+0xdc>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e00c      	b.n	8003b9e <MX_DFSDM1_Init+0xf6>
  }

  /* Configure injected channel */
  if(HAL_DFSDM_FilterConfigRegChannel(hDfsdmFilter, MXConfig->Channel4Filter, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f003 ff0f 	bl	80079b0 <HAL_DFSDM_FilterConfigRegChannel>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_DFSDM1_Init+0xf4>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <MX_DFSDM1_Init+0xf6>
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	699a      	ldr	r2, [r3, #24]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2210      	movs	r2, #16
 8003c26:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.MckOutput              = SAI_MCK_OUTPUT_ENABLE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c34:	611a      	str	r2, [r3, #16]
  hsai->Init.MckOverSampling        = SAI_MCK_OVERSAMPLING_DISABLE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai->Init.PdmInit.Activation     = DISABLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003c68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	669a      	str	r2, [r3, #104]	@ 0x68
  if ((MXConfig->DataSize == AUDIO_RESOLUTION_24B) || (MXConfig->DataSize == AUDIO_RESOLUTION_32B))
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2b18      	cmp	r3, #24
 8003c76:	d003      	beq.n	8003c80 <MX_SAI1_Block_A_Init+0xda>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d103      	bne.n	8003c88 <MX_SAI1_Block_A_Init+0xe2>
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_32B;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2280      	movs	r2, #128	@ 0x80
 8003c84:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003c86:	e002      	b.n	8003c8e <MX_SAI1_Block_A_Init+0xe8>
  }
  else
  {
    hsai->SlotInit.SlotSize         = SAI_SLOTSIZE_16B;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2240      	movs	r2, #64	@ 0x40
 8003c8c:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  hsai->SlotInit.SlotNumber         = 2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2202      	movs	r2, #2
 8003c92:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f00b ff51 	bl	800fb44 <HAL_SAI_Init>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_SAI1_Block_A_Init+0x106>
  {
    ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config *MXConfig)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003cf2:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d08:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 6;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2206      	movs	r2, #6
 8003d40:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK2_ENABLE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	6a1a      	ldr	r2, [r3, #32]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d74:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f00b fed4 	bl	800fb44 <HAL_SAI_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
  }
/* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003db4:	601a      	str	r2, [r3, #0]

  return ret;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d002      	beq.n	8003dde <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8003dd8:	f06f 0301 	mvn.w	r3, #1
 8003ddc:	e085      	b.n	8003eea <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003dde:	4b45      	ldr	r3, [pc, #276]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8003de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003de4:	4a43      	ldr	r2, [pc, #268]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8003de6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003dee:	4b41      	ldr	r3, [pc, #260]	@ (8003ef4 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8003df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003df4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e06e      	b.n	8003ee0 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8003e02:	4a3d      	ldr	r2, [pc, #244]	@ (8003ef8 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	214c      	movs	r1, #76	@ 0x4c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2201      	movs	r2, #1
 8003e10:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8003e12:	4a39      	ldr	r2, [pc, #228]	@ (8003ef8 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	214c      	movs	r1, #76	@ 0x4c
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3302      	adds	r3, #2
 8003e20:	2200      	movs	r2, #0
 8003e22:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8003e24:	4a34      	ldr	r2, [pc, #208]	@ (8003ef8 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	214c      	movs	r1, #76	@ 0x4c
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	3304      	adds	r3, #4
 8003e32:	4a32      	ldr	r2, [pc, #200]	@ (8003efc <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8003e34:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b298      	uxth	r0, r3
 8003e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef8 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	214c      	movs	r1, #76	@ 0x4c
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	4413      	add	r3, r2
 8003e46:	330a      	adds	r3, #10
 8003e48:	4602      	mov	r2, r0
 8003e4a:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	b298      	uxth	r0, r3
 8003e50:	4a29      	ldr	r2, [pc, #164]	@ (8003ef8 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	214c      	movs	r1, #76	@ 0x4c
 8003e56:	fb01 f303 	mul.w	r3, r1, r3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	4602      	mov	r2, r0
 8003e60:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	224c      	movs	r2, #76	@ 0x4c
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	4a23      	ldr	r2, [pc, #140]	@ (8003ef8 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f00f fe9c 	bl	8013bac <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4a22      	ldr	r2, [pc, #136]	@ (8003f00 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	b298      	uxth	r0, r3
 8003e80:	4920      	ldr	r1, [pc, #128]	@ (8003f04 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3302      	adds	r3, #2
 8003e90:	4602      	mov	r2, r0
 8003e92:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 8003e94:	491b      	ldr	r1, [pc, #108]	@ (8003f04 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2218      	movs	r2, #24
 8003ea6:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_128;
 8003ea8:	4916      	ldr	r1, [pc, #88]	@ (8003f04 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	440b      	add	r3, r1
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	224c      	movs	r2, #76	@ 0x4c
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef8 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8003ec4:	1898      	adds	r0, r3, r2
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f04 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f00f ff39 	bl	8013d4c <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	3301      	adds	r3, #1
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d38c      	bcc.n	8003e02 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	24004c80 	.word	0x24004c80
 8003efc:	7e809d48 	.word	0x7e809d48
 8003f00:	10624dd3 	.word	0x10624dd3
 8003f04:	24004d18 	.word	0x24004d18

08003f08 <BSP_AUDIO_IN_Record_Ex>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes     Size of the record buffer in bytes
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Record_Ex(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b092      	sub	sp, #72	@ 0x48
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	647b      	str	r3, [r7, #68]	@ 0x44

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d903      	bls.n	8003f26 <BSP_AUDIO_IN_Record_Ex+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003f1e:	f06f 0301 	mvn.w	r3, #1
 8003f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f24:	e0b6      	b.n	8004094 <BSP_AUDIO_IN_Record_Ex+0x18c>
  }
  else if(Instance != 2U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d01f      	beq.n	8003f6c <BSP_AUDIO_IN_Record_Ex+0x64>
//      {
//        ret = BSP_ERROR_COMPONENT_FAILURE;
//      }

      /* Start the process receive DMA */
      if(HAL_SAI_Receive_DMA(&haudio_in_sai[Instance], (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2298      	movs	r2, #152	@ 0x98
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	4a5a      	ldr	r2, [pc, #360]	@ (80040a0 <BSP_AUDIO_IN_Record_Ex+0x198>)
 8003f36:	1898      	adds	r0, r3, r2
 8003f38:	495a      	ldr	r1, [pc, #360]	@ (80040a4 <BSP_AUDIO_IN_Record_Ex+0x19c>)
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	440b      	add	r3, r1
 8003f46:	330c      	adds	r3, #12
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	08db      	lsrs	r3, r3, #3
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	f00c f8c8 	bl	80100ec <HAL_SAI_Receive_DMA>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8098 	beq.w	8004094 <BSP_AUDIO_IN_Record_Ex+0x18c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8003f64:	f06f 0303 	mvn.w	r3, #3
 8003f68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f6a:	e093      	b.n	8004094 <BSP_AUDIO_IN_Record_Ex+0x18c>
      }
//    }
  }
  else
  {
    Audio_In_Ctx[Instance].pBuff = (uint16_t*)pBuf;
 8003f6c:	494d      	ldr	r1, [pc, #308]	@ (80040a4 <BSP_AUDIO_IN_Record_Ex+0x19c>)
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	440b      	add	r3, r1
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	601a      	str	r2, [r3, #0]
    Audio_In_Ctx[Instance].Size  = NbrOfBytes;
 8003f80:	4948      	ldr	r1, [pc, #288]	@ (80040a4 <BSP_AUDIO_IN_Record_Ex+0x19c>)
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	440b      	add	r3, r1
 8003f8e:	331c      	adds	r3, #28
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
    /* Reset Buffer Trigger */
    RecBuffTrigger = 0;
 8003f94:	4b44      	ldr	r3, [pc, #272]	@ (80040a8 <BSP_AUDIO_IN_Record_Ex+0x1a0>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]
    RecBuffHalf = 0;
 8003f9a:	4b44      	ldr	r3, [pc, #272]	@ (80040ac <BSP_AUDIO_IN_Record_Ex+0x1a4>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fae:	637b      	str	r3, [r7, #52]	@ 0x34
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <BSP_AUDIO_IN_Record_Ex+0xb2>
  {
    return 32U;
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	e003      	b.n	8003fc2 <BSP_AUDIO_IN_Record_Ex+0xba>
  }
  return __builtin_clz(value);
 8003fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3

    /* Call the Media layer start function for MIC2 channel */
    if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)], \
 8003fc2:	3b04      	subs	r3, #4
 8003fc4:	2254      	movs	r2, #84	@ 0x54
 8003fc6:	fb02 f303 	mul.w	r3, r2, r3
 8003fca:	4a39      	ldr	r2, [pc, #228]	@ (80040b0 <BSP_AUDIO_IN_Record_Ex+0x1a8>)
 8003fcc:	1898      	adds	r0, r3, r2
 8003fce:	2320      	movs	r3, #32
 8003fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return result;
 8003fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fdc:	643b      	str	r3, [r7, #64]	@ 0x40
  if (value == 0U)
 8003fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <BSP_AUDIO_IN_Record_Ex+0xe0>
    return 32U;
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	e003      	b.n	8003ff0 <BSP_AUDIO_IN_Record_Ex+0xe8>
  return __builtin_clz(value);
 8003fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
      (int32_t*)MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)], DEFAULT_AUDIO_IN_BUFFER_SIZE) != HAL_OK)
 8003ff0:	3b04      	subs	r3, #4
 8003ff2:	035b      	lsls	r3, r3, #13
 8003ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80040b4 <BSP_AUDIO_IN_Record_Ex+0x1ac>)
 8003ff6:	4413      	add	r3, r2
    if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)], \
 8003ff8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f003 fd1d 	bl	8007a3c <HAL_DFSDM_FilterRegularStart_DMA>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <BSP_AUDIO_IN_Record_Ex+0x108>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004008:	f06f 0303 	mvn.w	r3, #3
 800400c:	647b      	str	r3, [r7, #68]	@ 0x44
 800400e:	e041      	b.n	8004094 <BSP_AUDIO_IN_Record_Ex+0x18c>
 8004010:	2310      	movs	r3, #16
 8004012:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	617b      	str	r3, [r7, #20]
  return result;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <BSP_AUDIO_IN_Record_Ex+0x122>
    return 32U;
 8004026:	2320      	movs	r3, #32
 8004028:	e003      	b.n	8004032 <BSP_AUDIO_IN_Record_Ex+0x12a>
  return __builtin_clz(value);
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
    }
    else if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)], \
 8004032:	3b04      	subs	r3, #4
 8004034:	2254      	movs	r2, #84	@ 0x54
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <BSP_AUDIO_IN_Record_Ex+0x1a8>)
 800403c:	1898      	adds	r0, r3, r2
 800403e:	2310      	movs	r3, #16
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	623b      	str	r3, [r7, #32]
  return result;
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (value == 0U)
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <BSP_AUDIO_IN_Record_Ex+0x150>
    return 32U;
 8004054:	2320      	movs	r3, #32
 8004056:	e003      	b.n	8004060 <BSP_AUDIO_IN_Record_Ex+0x158>
  return __builtin_clz(value);
 8004058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
      (int32_t*)MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)], DEFAULT_AUDIO_IN_BUFFER_SIZE) != HAL_OK)
 8004060:	3b04      	subs	r3, #4
 8004062:	035b      	lsls	r3, r3, #13
 8004064:	4a13      	ldr	r2, [pc, #76]	@ (80040b4 <BSP_AUDIO_IN_Record_Ex+0x1ac>)
 8004066:	4413      	add	r3, r2
    else if(HAL_DFSDM_FilterRegularStart_DMA(&haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)], \
 8004068:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800406c:	4619      	mov	r1, r3
 800406e:	f003 fce5 	bl	8007a3c <HAL_DFSDM_FilterRegularStart_DMA>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <BSP_AUDIO_IN_Record_Ex+0x178>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004078:	f06f 0303 	mvn.w	r3, #3
 800407c:	647b      	str	r3, [r7, #68]	@ 0x44
 800407e:	e009      	b.n	8004094 <BSP_AUDIO_IN_Record_Ex+0x18c>
    }
    else
    {
      /* Update BSP AUDIO IN state */
      Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RECORDING;
 8004080:	4908      	ldr	r1, [pc, #32]	@ (80040a4 <BSP_AUDIO_IN_Record_Ex+0x19c>)
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	440b      	add	r3, r1
 800408e:	3324      	adds	r3, #36	@ 0x24
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return BSP status */
  return ret;
 8004094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8004096:	4618      	mov	r0, r3
 8004098:	3748      	adds	r7, #72	@ 0x48
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	240008b8 	.word	0x240008b8
 80040a4:	240009e8 	.word	0x240009e8
 80040a8:	24000c5c 	.word	0x24000c5c
 80040ac:	24000c60 	.word	0x24000c60
 80040b0:	24000688 	.word	0x24000688
 80040b4:	24000c80 	.word	0x24000c80

080040b8 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC3
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC4
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  if(((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)) ||\
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <BSP_AUDIO_IN_IRQHandler+0x16>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d00b      	beq.n	80040e6 <BSP_AUDIO_IN_IRQHandler+0x2e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <BSP_AUDIO_IN_IRQHandler+0x22>
     ((Instance == 0U) && (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC)) ||\
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <BSP_AUDIO_IN_IRQHandler+0x2e>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d10e      	bne.n	80040fe <BSP_AUDIO_IN_IRQHandler+0x46>
     ((Instance == 1U) && (InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC1)))
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d10b      	bne.n	80040fe <BSP_AUDIO_IN_IRQHandler+0x46>
  {
    HAL_DMA_IRQHandler(haudio_in_sai[Instance].hdmarx);
 80040e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004150 <BSP_AUDIO_IN_IRQHandler+0x98>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2198      	movs	r1, #152	@ 0x98
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	3384      	adds	r3, #132	@ 0x84
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f004 fd76 	bl	8008be8 <HAL_DMA_IRQHandler>
      (InputDevice <= AUDIO_IN_DEVICE_DIGITAL_MIC_LAST))
    {
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
    }
  }
}
 80040fc:	e024      	b.n	8004148 <BSP_AUDIO_IN_IRQHandler+0x90>
    if((Instance == 2U) && (InputDevice >= AUDIO_IN_DEVICE_DIGITAL_MIC1) &&\
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d121      	bne.n	8004148 <BSP_AUDIO_IN_IRQHandler+0x90>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	d91e      	bls.n	8004148 <BSP_AUDIO_IN_IRQHandler+0x90>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b80      	cmp	r3, #128	@ 0x80
 800410e:	d81b      	bhi.n	8004148 <BSP_AUDIO_IN_IRQHandler+0x90>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	60fb      	str	r3, [r7, #12]
  return result;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <BSP_AUDIO_IN_IRQHandler+0x72>
    return 32U;
 8004126:	2320      	movs	r3, #32
 8004128:	e003      	b.n	8004132 <BSP_AUDIO_IN_IRQHandler+0x7a>
  return __builtin_clz(value);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	fab3 f383 	clz	r3, r3
 8004130:	b2db      	uxtb	r3, r3
    HAL_DMA_IRQHandler(haudio_in_dfsdm_filter[POS_VAL(InputDevice)].hdmaReg);
 8004132:	3b04      	subs	r3, #4
 8004134:	4a07      	ldr	r2, [pc, #28]	@ (8004154 <BSP_AUDIO_IN_IRQHandler+0x9c>)
 8004136:	2154      	movs	r1, #84	@ 0x54
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	4413      	add	r3, r2
 800413e:	3328      	adds	r3, #40	@ 0x28
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f004 fd50 	bl	8008be8 <HAL_DMA_IRQHandler>
}
 8004148:	bf00      	nop
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	240008b8 	.word	0x240008b8
 8004154:	24000688 	.word	0x24000688

08004158 <HAL_DFSDM_FilterRegConvCpltCallback>:
            using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b0ae      	sub	sp, #184	@ 0xb8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t index;
  static uint32_t DmaRecBuffCplt[DFSDM_MIC_NUMBER]  = {0};
  int32_t  tmp;

  if(Audio_In_Ctx[2].IsMultiBuff == 1U)
 8004160:	4ba7      	ldr	r3, [pc, #668]	@ (8004400 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	2b01      	cmp	r3, #1
 8004168:	d103      	bne.n	8004172 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a>
  {
    /* Call the record update function to get the second half */
    BSP_AUDIO_IN_TransferComplete_CallBack(2);
 800416a:	2002      	movs	r0, #2
 800416c:	f00d f986 	bl	801147c <BSP_AUDIO_IN_TransferComplete_CallBack>
      RecBuffHalf = 0;
      /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
      BSP_AUDIO_IN_TransferComplete_CallBack(2);
    }
  }
}
 8004170:	e23c      	b.n	80045ec <HAL_DFSDM_FilterRegConvCpltCallback+0x494>
 8004172:	2310      	movs	r3, #16
 8004174:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800417c:	fa93 f3a3 	rbit	r3, r3
 8004180:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  return result;
 8004184:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004188:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (value == 0U)
 800418c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
    return 32U;
 8004194:	2320      	movs	r3, #32
 8004196:	e004      	b.n	80041a2 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a>
  return __builtin_clz(value);
 8004198:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800419c:	fab3 f383 	clz	r3, r3
 80041a0:	b2db      	uxtb	r3, r3
    if(hdfsdm_filter == &haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)])
 80041a2:	3b04      	subs	r3, #4
 80041a4:	2254      	movs	r2, #84	@ 0x54
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	4a96      	ldr	r2, [pc, #600]	@ (8004404 <HAL_DFSDM_FilterRegConvCpltCallback+0x2ac>)
 80041ac:	4413      	add	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d11c      	bne.n	80041ee <HAL_DFSDM_FilterRegConvCpltCallback+0x96>
 80041b4:	2310      	movs	r3, #16
 80041b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  return result;
 80041c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (value == 0U)
 80041ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_DFSDM_FilterRegConvCpltCallback+0x82>
    return 32U;
 80041d6:	2320      	movs	r3, #32
 80041d8:	e004      	b.n	80041e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>
  return __builtin_clz(value);
 80041da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
      DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] = 1;
 80041e4:	3b04      	subs	r3, #4
 80041e6:	4a88      	ldr	r2, [pc, #544]	@ (8004408 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>)
 80041e8:	2101      	movs	r1, #1
 80041ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80041ee:	2320      	movs	r3, #32
 80041f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041f8:	fa93 f3a3 	rbit	r3, r3
 80041fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return result;
 8004200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004204:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (value == 0U)
 8004208:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_DFSDM_FilterRegConvCpltCallback+0xbc>
    return 32U;
 8004210:	2320      	movs	r3, #32
 8004212:	e004      	b.n	800421e <HAL_DFSDM_FilterRegConvCpltCallback+0xc6>
  return __builtin_clz(value);
 8004214:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
    if(hdfsdm_filter == &haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)])
 800421e:	3b04      	subs	r3, #4
 8004220:	2254      	movs	r2, #84	@ 0x54
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	4a77      	ldr	r2, [pc, #476]	@ (8004404 <HAL_DFSDM_FilterRegConvCpltCallback+0x2ac>)
 8004228:	4413      	add	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	d11c      	bne.n	800426a <HAL_DFSDM_FilterRegConvCpltCallback+0x112>
 8004230:	2320      	movs	r3, #32
 8004232:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  return result;
 8004242:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004246:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (value == 0U)
 800424a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_DFSDM_FilterRegConvCpltCallback+0xfe>
    return 32U;
 8004252:	2320      	movs	r3, #32
 8004254:	e004      	b.n	8004260 <HAL_DFSDM_FilterRegConvCpltCallback+0x108>
  return __builtin_clz(value);
 8004256:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
      DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] = 1;
 8004260:	3b04      	subs	r3, #4
 8004262:	4a69      	ldr	r2, [pc, #420]	@ (8004408 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>)
 8004264:	2101      	movs	r1, #1
 8004266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800426a:	2310      	movs	r3, #16
 800426c:	67bb      	str	r3, [r7, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	677b      	str	r3, [r7, #116]	@ 0x74
  return result;
 8004276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004278:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (value == 0U)
 800427a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_DFSDM_FilterRegConvCpltCallback+0x12c>
    return 32U;
 8004280:	2320      	movs	r3, #32
 8004282:	e003      	b.n	800428c <HAL_DFSDM_FilterRegConvCpltCallback+0x134>
  return __builtin_clz(value);
 8004284:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
    if(DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] == 1U)
 800428c:	3b04      	subs	r3, #4
 800428e:	4a5e      	ldr	r2, [pc, #376]	@ (8004408 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>)
 8004290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004294:	2b01      	cmp	r3, #1
 8004296:	f040 8188 	bne.w	80045aa <HAL_DFSDM_FilterRegConvCpltCallback+0x452>
 800429a:	2320      	movs	r3, #32
 800429c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042a0:	fa93 f3a3 	rbit	r3, r3
 80042a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  return result;
 80042a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042a8:	673b      	str	r3, [r7, #112]	@ 0x70
  if (value == 0U)
 80042aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_DFSDM_FilterRegConvCpltCallback+0x15c>
    return 32U;
 80042b0:	2320      	movs	r3, #32
 80042b2:	e003      	b.n	80042bc <HAL_DFSDM_FilterRegConvCpltCallback+0x164>
  return __builtin_clz(value);
 80042b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
      if(DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] == 1U)
 80042bc:	3b04      	subs	r3, #4
 80042be:	4a52      	ldr	r2, [pc, #328]	@ (8004408 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b0>)
 80042c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 8170 	bne.w	80045aa <HAL_DFSDM_FilterRegConvCpltCallback+0x452>
 80042ca:	2310      	movs	r3, #16
 80042cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x18c>
    return 32U;
 80042e0:	2320      	movs	r3, #32
 80042e2:	e003      	b.n	80042ec <HAL_DFSDM_FilterRegConvCpltCallback+0x194>
  return __builtin_clz(value);
 80042e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e6:	fab3 f383 	clz	r3, r3
 80042ea:	b2db      	uxtb	r3, r3
      SCB_InvalidateDCache_by_Addr((uint32_t *)&MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)][DEFAULT_AUDIO_IN_BUFFER_SIZE/2U], ((int32_t)DEFAULT_AUDIO_IN_BUFFER_SIZE/2)*4);
 80042ec:	3b04      	subs	r3, #4
 80042ee:	035b      	lsls	r3, r3, #13
 80042f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042f4:	4a45      	ldr	r2, [pc, #276]	@ (800440c <HAL_DFSDM_FilterRegConvCpltCallback+0x2b4>)
 80042f6:	4413      	add	r3, r2
 80042f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042fe:	647b      	str	r3, [r7, #68]	@ 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8004300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004302:	2b00      	cmp	r3, #0
 8004304:	dd1d      	ble.n	8004342 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ea>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004308:	f003 021f 	and.w	r2, r3, #31
 800430c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430e:	4413      	add	r3, r2
 8004310:	643b      	str	r3, [r7, #64]	@ 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004314:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8004316:	f3bf 8f4f 	dsb	sy
}
 800431a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800431c:	4a3c      	ldr	r2, [pc, #240]	@ (8004410 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b8>)
 800431e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004320:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004326:	3320      	adds	r3, #32
 8004328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800432a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432c:	3b20      	subs	r3, #32
 800432e:	643b      	str	r3, [r7, #64]	@ 0x40
      } while ( op_size > 0 );
 8004330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	dcf2      	bgt.n	800431c <HAL_DFSDM_FilterRegConvCpltCallback+0x1c4>
  __ASM volatile ("dsb 0xF":::"memory");
 8004336:	f3bf 8f4f 	dsb	sy
}
 800433a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800433c:	f3bf 8f6f 	isb	sy
}
 8004340:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8004342:	bf00      	nop
 8004344:	2320      	movs	r3, #32
 8004346:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004352:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_DFSDM_FilterRegConvCpltCallback+0x206>
    return 32U;
 800435a:	2320      	movs	r3, #32
 800435c:	e003      	b.n	8004366 <HAL_DFSDM_FilterRegConvCpltCallback+0x20e>
  return __builtin_clz(value);
 800435e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
      SCB_InvalidateDCache_by_Addr((uint32_t *)&MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)][DEFAULT_AUDIO_IN_BUFFER_SIZE/2U], ((int32_t)DEFAULT_AUDIO_IN_BUFFER_SIZE/2)*4);
 8004366:	3b04      	subs	r3, #4
 8004368:	035b      	lsls	r3, r3, #13
 800436a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800436e:	4a27      	ldr	r2, [pc, #156]	@ (800440c <HAL_DFSDM_FilterRegConvCpltCallback+0x2b4>)
 8004370:	4413      	add	r3, r2
 8004372:	667b      	str	r3, [r7, #100]	@ 0x64
 8004374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004378:	663b      	str	r3, [r7, #96]	@ 0x60
    if ( dsize > 0 ) { 
 800437a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800437c:	2b00      	cmp	r3, #0
 800437e:	dd1d      	ble.n	80043bc <HAL_DFSDM_FilterRegConvCpltCallback+0x264>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004382:	f003 021f 	and.w	r2, r3, #31
 8004386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004388:	4413      	add	r3, r2
 800438a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800438c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800438e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8004390:	f3bf 8f4f 	dsb	sy
}
 8004394:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004396:	4a1e      	ldr	r2, [pc, #120]	@ (8004410 <HAL_DFSDM_FilterRegConvCpltCallback+0x2b8>)
 8004398:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800439a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800439e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043a0:	3320      	adds	r3, #32
 80043a2:	65bb      	str	r3, [r7, #88]	@ 0x58
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80043a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043a6:	3b20      	subs	r3, #32
 80043a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
      } while ( op_size > 0 );
 80043aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	dcf2      	bgt.n	8004396 <HAL_DFSDM_FilterRegConvCpltCallback+0x23e>
  __ASM volatile ("dsb 0xF":::"memory");
 80043b0:	f3bf 8f4f 	dsb	sy
}
 80043b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043b6:	f3bf 8f6f 	isb	sy
}
 80043ba:	bf00      	nop
}
 80043bc:	bf00      	nop
      for(index = (DEFAULT_AUDIO_IN_BUFFER_SIZE/2U) ; index < DEFAULT_AUDIO_IN_BUFFER_SIZE; index++)
 80043be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043c6:	e095      	b.n	80044f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x39c>
        if(Audio_In_Ctx[2].ChannelsNbr == 2U)
 80043c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004400 <HAL_DFSDM_FilterRegConvCpltCallback+0x2a8>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d157      	bne.n	8004480 <HAL_DFSDM_FilterRegConvCpltCallback+0x328>
          tmp = MicRecBuff[0][index] / 256;
 80043d0:	4a0e      	ldr	r2, [pc, #56]	@ (800440c <HAL_DFSDM_FilterRegConvCpltCallback+0x2b4>)
 80043d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da00      	bge.n	80043e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x288>
 80043de:	33ff      	adds	r3, #255	@ 0xff
 80043e0:	121b      	asrs	r3, r3, #8
 80043e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          tmp = SaturaLH(tmp, -32768, 32767);
 80043e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043ea:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80043ee:	db11      	blt.n	8004414 <HAL_DFSDM_FilterRegConvCpltCallback+0x2bc>
 80043f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043f4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80043f8:	4293      	cmp	r3, r2
 80043fa:	bfa8      	it	ge
 80043fc:	4613      	movge	r3, r2
 80043fe:	e00a      	b.n	8004416 <HAL_DFSDM_FilterRegConvCpltCallback+0x2be>
 8004400:	240009e8 	.word	0x240009e8
 8004404:	24000688 	.word	0x24000688
 8004408:	24004e3c 	.word	0x24004e3c
 800440c:	24000c80 	.word	0x24000c80
 8004410:	e000ed00 	.word	0xe000ed00
 8004414:	4b77      	ldr	r3, [pc, #476]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x49c>)
 8004416:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          Audio_In_Ctx[2].pBuff[RecBuffTrigger]     = (uint16_t)(tmp);
 800441a:	4b77      	ldr	r3, [pc, #476]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 800441c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800441e:	4b77      	ldr	r3, [pc, #476]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800442a:	b292      	uxth	r2, r2
 800442c:	801a      	strh	r2, [r3, #0]
          tmp = MicRecBuff[1][index] / 256;
 800442e:	4a74      	ldr	r2, [pc, #464]	@ (8004600 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a8>)
 8004430:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443c:	2b00      	cmp	r3, #0
 800443e:	da00      	bge.n	8004442 <HAL_DFSDM_FilterRegConvCpltCallback+0x2ea>
 8004440:	33ff      	adds	r3, #255	@ 0xff
 8004442:	121b      	asrs	r3, r3, #8
 8004444:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          tmp = SaturaLH(tmp, -32768, 32767);
 8004448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800444c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004450:	db07      	blt.n	8004462 <HAL_DFSDM_FilterRegConvCpltCallback+0x30a>
 8004452:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004456:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800445a:	4293      	cmp	r3, r2
 800445c:	bfa8      	it	ge
 800445e:	4613      	movge	r3, r2
 8004460:	e000      	b.n	8004464 <HAL_DFSDM_FilterRegConvCpltCallback+0x30c>
 8004462:	4b64      	ldr	r3, [pc, #400]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x49c>)
 8004464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          Audio_In_Ctx[2].pBuff[RecBuffTrigger + 1U] = (uint16_t)(tmp);
 8004468:	4b63      	ldr	r3, [pc, #396]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 800446a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800446c:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800447a:	b292      	uxth	r2, r2
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	e02f      	b.n	80044e0 <HAL_DFSDM_FilterRegConvCpltCallback+0x388>
          tmp = MicRecBuff[0][index] / 256;
 8004480:	4a5f      	ldr	r2, [pc, #380]	@ (8004600 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a8>)
 8004482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448a:	2b00      	cmp	r3, #0
 800448c:	da00      	bge.n	8004490 <HAL_DFSDM_FilterRegConvCpltCallback+0x338>
 800448e:	33ff      	adds	r3, #255	@ 0xff
 8004490:	121b      	asrs	r3, r3, #8
 8004492:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          tmp = SaturaLH(tmp, -32768, 32767);
 8004496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800449a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800449e:	db07      	blt.n	80044b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x358>
 80044a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80044a4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80044a8:	4293      	cmp	r3, r2
 80044aa:	bfa8      	it	ge
 80044ac:	4613      	movge	r3, r2
 80044ae:	e000      	b.n	80044b2 <HAL_DFSDM_FilterRegConvCpltCallback+0x35a>
 80044b0:	4b50      	ldr	r3, [pc, #320]	@ (80045f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x49c>)
 80044b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
          Audio_In_Ctx[2].pBuff[RecBuffTrigger]      = (uint16_t)(tmp);
 80044b6:	4b50      	ldr	r3, [pc, #320]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80044b8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80044ba:	4b50      	ldr	r3, [pc, #320]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044c6:	b292      	uxth	r2, r2
 80044c8:	801a      	strh	r2, [r3, #0]
          Audio_In_Ctx[2].pBuff[RecBuffTrigger + 1U] = (uint16_t)(tmp);
 80044ca:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80044cc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80044ce:	4b4b      	ldr	r3, [pc, #300]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3301      	adds	r3, #1
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	4413      	add	r3, r2
 80044d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]
        RecBuffTrigger +=2U;
 80044e0:	4b46      	ldr	r3, [pc, #280]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3302      	adds	r3, #2
 80044e6:	4a45      	ldr	r2, [pc, #276]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80044e8:	6013      	str	r3, [r2, #0]
      for(index = (DEFAULT_AUDIO_IN_BUFFER_SIZE/2U) ; index < DEFAULT_AUDIO_IN_BUFFER_SIZE; index++)
 80044ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044ee:	3301      	adds	r3, #1
 80044f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80044f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044fc:	f4ff af64 	bcc.w	80043c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x270>
      SCB_CleanDCache_by_Addr((uint32_t *)Audio_In_Ctx[2].pBuff,  (int32_t)Audio_In_Ctx[2].Size*2);
 8004500:	4b3d      	ldr	r3, [pc, #244]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 8004502:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004504:	4b3c      	ldr	r3, [pc, #240]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 8004506:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	617a      	str	r2, [r7, #20]
 800450c:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	dd1d      	ble.n	8004550 <HAL_DFSDM_FilterRegConvCpltCallback+0x3f8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f003 021f 	and.w	r2, r3, #31
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	4413      	add	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004524:	f3bf 8f4f 	dsb	sy
}
 8004528:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800452a:	4a36      	ldr	r2, [pc, #216]	@ (8004604 <HAL_DFSDM_FilterRegConvCpltCallback+0x4ac>)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3320      	adds	r3, #32
 8004536:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3b20      	subs	r3, #32
 800453c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	dcf2      	bgt.n	800452a <HAL_DFSDM_FilterRegConvCpltCallback+0x3d2>
  __ASM volatile ("dsb 0xF":::"memory");
 8004544:	f3bf 8f4f 	dsb	sy
}
 8004548:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800454a:	f3bf 8f6f 	isb	sy
}
 800454e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8004550:	bf00      	nop
 8004552:	2310      	movs	r3, #16
 8004554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	fa93 f3a3 	rbit	r3, r3
 800455c:	61bb      	str	r3, [r7, #24]
  return result;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_DFSDM_FilterRegConvCpltCallback+0x414>
    return 32U;
 8004568:	2320      	movs	r3, #32
 800456a:	e003      	b.n	8004574 <HAL_DFSDM_FilterRegConvCpltCallback+0x41c>
  return __builtin_clz(value);
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
      DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] = 0;
 8004574:	3b04      	subs	r3, #4
 8004576:	4a24      	ldr	r2, [pc, #144]	@ (8004608 <HAL_DFSDM_FilterRegConvCpltCallback+0x4b0>)
 8004578:	2100      	movs	r1, #0
 800457a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800457e:	2320      	movs	r3, #32
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004584:	fa93 f3a3 	rbit	r3, r3
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_DFSDM_FilterRegConvCpltCallback+0x440>
    return 32U;
 8004594:	2320      	movs	r3, #32
 8004596:	e003      	b.n	80045a0 <HAL_DFSDM_FilterRegConvCpltCallback+0x448>
  return __builtin_clz(value);
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
      DmaRecBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] = 0;
 80045a0:	3b04      	subs	r3, #4
 80045a2:	4a19      	ldr	r2, [pc, #100]	@ (8004608 <HAL_DFSDM_FilterRegConvCpltCallback+0x4b0>)
 80045a4:	2100      	movs	r1, #0
 80045a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if(RecBuffTrigger == (Audio_In_Ctx[2].Size/4U))
 80045aa:	4b13      	ldr	r3, [pc, #76]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80045ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045ae:	089a      	lsrs	r2, r3, #2
 80045b0:	4b12      	ldr	r3, [pc, #72]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d109      	bne.n	80045cc <HAL_DFSDM_FilterRegConvCpltCallback+0x474>
      if(RecBuffHalf == 0U)
 80045b8:	4b14      	ldr	r3, [pc, #80]	@ (800460c <HAL_DFSDM_FilterRegConvCpltCallback+0x4b4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_DFSDM_FilterRegConvCpltCallback+0x474>
        RecBuffHalf = 1;
 80045c0:	4b12      	ldr	r3, [pc, #72]	@ (800460c <HAL_DFSDM_FilterRegConvCpltCallback+0x4b4>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
        BSP_AUDIO_IN_HalfTransfer_CallBack(2);
 80045c6:	2002      	movs	r0, #2
 80045c8:	f00c feca 	bl	8011360 <BSP_AUDIO_IN_HalfTransfer_CallBack>
    if(RecBuffTrigger == Audio_In_Ctx[2].Size/2U)
 80045cc:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a0>)
 80045ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045d0:	085a      	lsrs	r2, r3, #1
 80045d2:	4b0a      	ldr	r3, [pc, #40]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d108      	bne.n	80045ec <HAL_DFSDM_FilterRegConvCpltCallback+0x494>
      RecBuffTrigger = 0;
 80045da:	4b08      	ldr	r3, [pc, #32]	@ (80045fc <HAL_DFSDM_FilterRegConvCpltCallback+0x4a4>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
      RecBuffHalf = 0;
 80045e0:	4b0a      	ldr	r3, [pc, #40]	@ (800460c <HAL_DFSDM_FilterRegConvCpltCallback+0x4b4>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_TransferComplete_CallBack(2);
 80045e6:	2002      	movs	r0, #2
 80045e8:	f00c ff48 	bl	801147c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80045ec:	bf00      	nop
 80045ee:	37b8      	adds	r7, #184	@ 0xb8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	ffff8000 	.word	0xffff8000
 80045f8:	240009e8 	.word	0x240009e8
 80045fc:	24000c5c 	.word	0x24000c5c
 8004600:	24000c80 	.word	0x24000c80
 8004604:	e000ed00 	.word	0xe000ed00
 8004608:	24004e3c 	.word	0x24004e3c
 800460c:	24000c60 	.word	0x24000c60

08004610 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter   DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b0ae      	sub	sp, #184	@ 0xb8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t index;
  static uint32_t DmaRecHalfBuffCplt[DFSDM_MIC_NUMBER]  = {0};
  int32_t  tmp;

  if(Audio_In_Ctx[2].IsMultiBuff == 1U)
 8004618:	4ba5      	ldr	r3, [pc, #660]	@ (80048b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a0>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	2b01      	cmp	r3, #1
 8004620:	d103      	bne.n	800462a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1a>
  {
    /* Call the record update function to get the first half */
    BSP_AUDIO_IN_HalfTransfer_CallBack(2);
 8004622:	2002      	movs	r0, #2
 8004624:	f00c fe9c 	bl	8011360 <BSP_AUDIO_IN_HalfTransfer_CallBack>
      RecBuffHalf = 0;
      /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
      BSP_AUDIO_IN_TransferComplete_CallBack(2);
    }
  }
}
 8004628:	e238      	b.n	8004a9c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48c>
 800462a:	2310      	movs	r3, #16
 800462c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  return result;
 800463c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (value == 0U)
 8004644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x40>
    return 32U;
 800464c:	2320      	movs	r3, #32
 800464e:	e004      	b.n	800465a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a>
  return __builtin_clz(value);
 8004650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004654:	fab3 f383 	clz	r3, r3
 8004658:	b2db      	uxtb	r3, r3
    if(hdfsdm_filter == &haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)])
 800465a:	3b04      	subs	r3, #4
 800465c:	2254      	movs	r2, #84	@ 0x54
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	4a94      	ldr	r2, [pc, #592]	@ (80048b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a4>)
 8004664:	4413      	add	r3, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d11c      	bne.n	80046a6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x96>
 800466c:	2310      	movs	r3, #16
 800466e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  return result;
 800467e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (value == 0U)
 8004686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x82>
    return 32U;
 800468e:	2320      	movs	r3, #32
 8004690:	e004      	b.n	800469c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x8c>
  return __builtin_clz(value);
 8004692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
      DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] = 1;
 800469c:	3b04      	subs	r3, #4
 800469e:	4a86      	ldr	r2, [pc, #536]	@ (80048b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a8>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80046a6:	2320      	movs	r3, #32
 80046a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  return result;
 80046b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (value == 0U)
 80046c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xbc>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e004      	b.n	80046d6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xc6>
  return __builtin_clz(value);
 80046cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046d0:	fab3 f383 	clz	r3, r3
 80046d4:	b2db      	uxtb	r3, r3
    if(hdfsdm_filter == &haudio_in_dfsdm_filter[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)])
 80046d6:	3b04      	subs	r3, #4
 80046d8:	2254      	movs	r2, #84	@ 0x54
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	4a75      	ldr	r2, [pc, #468]	@ (80048b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a4>)
 80046e0:	4413      	add	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d11c      	bne.n	8004722 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x112>
 80046e8:	2320      	movs	r3, #32
 80046ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046f2:	fa93 f3a3 	rbit	r3, r3
 80046f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  return result;
 80046fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (value == 0U)
 8004702:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0xfe>
    return 32U;
 800470a:	2320      	movs	r3, #32
 800470c:	e004      	b.n	8004718 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x108>
  return __builtin_clz(value);
 800470e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
      DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] = 1;
 8004718:	3b04      	subs	r3, #4
 800471a:	4a67      	ldr	r2, [pc, #412]	@ (80048b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a8>)
 800471c:	2101      	movs	r1, #1
 800471e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004722:	2310      	movs	r3, #16
 8004724:	67bb      	str	r3, [r7, #120]	@ 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004728:	fa93 f3a3 	rbit	r3, r3
 800472c:	677b      	str	r3, [r7, #116]	@ 0x74
  return result;
 800472e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004730:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (value == 0U)
 8004732:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x12c>
    return 32U;
 8004738:	2320      	movs	r3, #32
 800473a:	e003      	b.n	8004744 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x134>
  return __builtin_clz(value);
 800473c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
    if(DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] == 1U)
 8004744:	3b04      	subs	r3, #4
 8004746:	4a5c      	ldr	r2, [pc, #368]	@ (80048b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a8>)
 8004748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 8184 	bne.w	8004a5a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x44a>
 8004752:	2320      	movs	r3, #32
 8004754:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	66bb      	str	r3, [r7, #104]	@ 0x68
  return result;
 800475e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004760:	673b      	str	r3, [r7, #112]	@ 0x70
  if (value == 0U)
 8004762:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x15c>
    return 32U;
 8004768:	2320      	movs	r3, #32
 800476a:	e003      	b.n	8004774 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x164>
  return __builtin_clz(value);
 800476c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
      if(DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] == 1U)
 8004774:	3b04      	subs	r3, #4
 8004776:	4a50      	ldr	r2, [pc, #320]	@ (80048b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a8>)
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	2b01      	cmp	r3, #1
 800477e:	f040 816c 	bne.w	8004a5a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x44a>
 8004782:	2310      	movs	r3, #16
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18c>
    return 32U;
 8004798:	2320      	movs	r3, #32
 800479a:	e003      	b.n	80047a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x194>
  return __builtin_clz(value);
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
        SCB_InvalidateDCache_by_Addr((uint32_t *)&MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)][0], ((int32_t)DEFAULT_AUDIO_IN_BUFFER_SIZE/2)*4);
 80047a4:	3b04      	subs	r3, #4
 80047a6:	035b      	lsls	r3, r3, #13
 80047a8:	4a44      	ldr	r2, [pc, #272]	@ (80048bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2ac>)
 80047aa:	4413      	add	r3, r2
 80047ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047b2:	647b      	str	r3, [r7, #68]	@ 0x44
    if ( dsize > 0 ) { 
 80047b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	dd1d      	ble.n	80047f6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80047ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047bc:	f003 021f 	and.w	r2, r3, #31
 80047c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c2:	4413      	add	r3, r2
 80047c4:	643b      	str	r3, [r7, #64]	@ 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80047c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 80047ca:	f3bf 8f4f 	dsb	sy
}
 80047ce:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80047d0:	4a3b      	ldr	r2, [pc, #236]	@ (80048c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2b0>)
 80047d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047d4:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80047d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047da:	3320      	adds	r3, #32
 80047dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80047de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e0:	3b20      	subs	r3, #32
 80047e2:	643b      	str	r3, [r7, #64]	@ 0x40
      } while ( op_size > 0 );
 80047e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	dcf2      	bgt.n	80047d0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1c0>
  __ASM volatile ("dsb 0xF":::"memory");
 80047ea:	f3bf 8f4f 	dsb	sy
}
 80047ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047f0:	f3bf 8f6f 	isb	sy
}
 80047f4:	bf00      	nop
}
 80047f6:	bf00      	nop
 80047f8:	2320      	movs	r3, #32
 80047fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004806:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x202>
    return 32U;
 800480e:	2320      	movs	r3, #32
 8004810:	e003      	b.n	800481a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x20a>
  return __builtin_clz(value);
 8004812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
        SCB_InvalidateDCache_by_Addr((uint32_t *)&MicRecBuff[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)][0], ((int32_t)DEFAULT_AUDIO_IN_BUFFER_SIZE/2)*4);
 800481a:	3b04      	subs	r3, #4
 800481c:	035b      	lsls	r3, r3, #13
 800481e:	4a27      	ldr	r2, [pc, #156]	@ (80048bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2ac>)
 8004820:	4413      	add	r3, r2
 8004822:	667b      	str	r3, [r7, #100]	@ 0x64
 8004824:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004828:	663b      	str	r3, [r7, #96]	@ 0x60
    if ( dsize > 0 ) { 
 800482a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800482c:	2b00      	cmp	r3, #0
 800482e:	dd1d      	ble.n	800486c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x25c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004830:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004832:	f003 021f 	and.w	r2, r3, #31
 8004836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004838:	4413      	add	r3, r2
 800483a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800483c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800483e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8004840:	f3bf 8f4f 	dsb	sy
}
 8004844:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004846:	4a1e      	ldr	r2, [pc, #120]	@ (80048c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2b0>)
 8004848:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800484a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800484e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004850:	3320      	adds	r3, #32
 8004852:	65bb      	str	r3, [r7, #88]	@ 0x58
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004856:	3b20      	subs	r3, #32
 8004858:	65fb      	str	r3, [r7, #92]	@ 0x5c
      } while ( op_size > 0 );
 800485a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485c:	2b00      	cmp	r3, #0
 800485e:	dcf2      	bgt.n	8004846 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x236>
  __ASM volatile ("dsb 0xF":::"memory");
 8004860:	f3bf 8f4f 	dsb	sy
}
 8004864:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004866:	f3bf 8f6f 	isb	sy
}
 800486a:	bf00      	nop
}
 800486c:	bf00      	nop
        for(index = 0 ; index < (DEFAULT_AUDIO_IN_BUFFER_SIZE/2U); index++)
 800486e:	2300      	movs	r3, #0
 8004870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004874:	e096      	b.n	80049a4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x394>
          if(Audio_In_Ctx[2].ChannelsNbr == 2U)
 8004876:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2a0>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487a:	2b02      	cmp	r3, #2
 800487c:	d158      	bne.n	8004930 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x320>
            tmp = MicRecBuff[0][index] / 256;
 800487e:	4a0f      	ldr	r2, [pc, #60]	@ (80048bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2ac>)
 8004880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004888:	2b00      	cmp	r3, #0
 800488a:	da00      	bge.n	800488e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x27e>
 800488c:	33ff      	adds	r3, #255	@ 0xff
 800488e:	121b      	asrs	r3, r3, #8
 8004890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            tmp = SaturaLH(tmp, -32768, 32767);
 8004894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004898:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800489c:	db12      	blt.n	80048c4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2b4>
 800489e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048a2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80048a6:	4293      	cmp	r3, r2
 80048a8:	bfa8      	it	ge
 80048aa:	4613      	movge	r3, r2
 80048ac:	e00b      	b.n	80048c6 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2b6>
 80048ae:	bf00      	nop
 80048b0:	240009e8 	.word	0x240009e8
 80048b4:	24000688 	.word	0x24000688
 80048b8:	24004e4c 	.word	0x24004e4c
 80048bc:	24000c80 	.word	0x24000c80
 80048c0:	e000ed00 	.word	0xe000ed00
 80048c4:	4b77      	ldr	r3, [pc, #476]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x494>)
 80048c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            Audio_In_Ctx[2].pBuff[RecBuffTrigger]     = (uint16_t)(tmp);
 80048ca:	4b77      	ldr	r3, [pc, #476]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 80048cc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80048ce:	4b77      	ldr	r3, [pc, #476]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4413      	add	r3, r2
 80048d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048da:	b292      	uxth	r2, r2
 80048dc:	801a      	strh	r2, [r3, #0]
            tmp = MicRecBuff[1][index] / 256;
 80048de:	4a74      	ldr	r2, [pc, #464]	@ (8004ab0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a0>)
 80048e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	da00      	bge.n	80048f2 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2e2>
 80048f0:	33ff      	adds	r3, #255	@ 0xff
 80048f2:	121b      	asrs	r3, r3, #8
 80048f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            tmp = SaturaLH(tmp, -32768, 32767);
 80048f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048fc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8004900:	db07      	blt.n	8004912 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x302>
 8004902:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004906:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800490a:	4293      	cmp	r3, r2
 800490c:	bfa8      	it	ge
 800490e:	4613      	movge	r3, r2
 8004910:	e000      	b.n	8004914 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x304>
 8004912:	4b64      	ldr	r3, [pc, #400]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x494>)
 8004914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            Audio_In_Ctx[2].pBuff[RecBuffTrigger + 1U] = (uint16_t)(tmp);
 8004918:	4b63      	ldr	r3, [pc, #396]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 800491a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800491c:	4b63      	ldr	r3, [pc, #396]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800492a:	b292      	uxth	r2, r2
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	e02f      	b.n	8004990 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x380>
            tmp = MicRecBuff[0][index] / 256;
 8004930:	4a5f      	ldr	r2, [pc, #380]	@ (8004ab0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a0>)
 8004932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800493a:	2b00      	cmp	r3, #0
 800493c:	da00      	bge.n	8004940 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x330>
 800493e:	33ff      	adds	r3, #255	@ 0xff
 8004940:	121b      	asrs	r3, r3, #8
 8004942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            tmp = SaturaLH(tmp, -32768, 32767);
 8004946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800494a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800494e:	db07      	blt.n	8004960 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x350>
 8004950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004954:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8004958:	4293      	cmp	r3, r2
 800495a:	bfa8      	it	ge
 800495c:	4613      	movge	r3, r2
 800495e:	e000      	b.n	8004962 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x352>
 8004960:	4b50      	ldr	r3, [pc, #320]	@ (8004aa4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x494>)
 8004962:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
            Audio_In_Ctx[2].pBuff[RecBuffTrigger]      = (uint16_t)(tmp);
 8004966:	4b50      	ldr	r3, [pc, #320]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 8004968:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800496a:	4b50      	ldr	r3, [pc, #320]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004976:	b292      	uxth	r2, r2
 8004978:	801a      	strh	r2, [r3, #0]
            Audio_In_Ctx[2].pBuff[RecBuffTrigger + 1U] = (uint16_t)(tmp);
 800497a:	4b4b      	ldr	r3, [pc, #300]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 800497c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800497e:	4b4b      	ldr	r3, [pc, #300]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800498c:	b292      	uxth	r2, r2
 800498e:	801a      	strh	r2, [r3, #0]
          RecBuffTrigger +=2U;
 8004990:	4b46      	ldr	r3, [pc, #280]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3302      	adds	r3, #2
 8004996:	4a45      	ldr	r2, [pc, #276]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004998:	6013      	str	r3, [r2, #0]
        for(index = 0 ; index < (DEFAULT_AUDIO_IN_BUFFER_SIZE/2U); index++)
 800499a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800499e:	3301      	adds	r3, #1
 80049a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ac:	f4ff af63 	bcc.w	8004876 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x266>
        SCB_CleanDCache_by_Addr((uint32_t *)Audio_In_Ctx[2].pBuff, ((int32_t)Audio_In_Ctx[2].Size*2));
 80049b0:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 80049b2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80049b4:	4b3c      	ldr	r3, [pc, #240]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 80049b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	617a      	str	r2, [r7, #20]
 80049bc:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	dd1d      	ble.n	8004a00 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3f0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 021f 	and.w	r2, r3, #31
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	4413      	add	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80049d4:	f3bf 8f4f 	dsb	sy
}
 80049d8:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80049da:	4a36      	ldr	r2, [pc, #216]	@ (8004ab4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a4>)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	3320      	adds	r3, #32
 80049e6:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3b20      	subs	r3, #32
 80049ec:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dcf2      	bgt.n	80049da <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x3ca>
  __ASM volatile ("dsb 0xF":::"memory");
 80049f4:	f3bf 8f4f 	dsb	sy
}
 80049f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049fa:	f3bf 8f6f 	isb	sy
}
 80049fe:	bf00      	nop
}
 8004a00:	bf00      	nop
 8004a02:	2310      	movs	r3, #16
 8004a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	fa93 f3a3 	rbit	r3, r3
 8004a0c:	61bb      	str	r3, [r7, #24]
  return result;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x40c>
    return 32U;
 8004a18:	2320      	movs	r3, #32
 8004a1a:	e003      	b.n	8004a24 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x414>
  return __builtin_clz(value);
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	b2db      	uxtb	r3, r3
        DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] = 0;
 8004a24:	3b04      	subs	r3, #4
 8004a26:	4a24      	ldr	r2, [pc, #144]	@ (8004ab8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a8>)
 8004a28:	2100      	movs	r1, #0
 8004a2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004a2e:	2320      	movs	r3, #32
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	fa93 f3a3 	rbit	r3, r3
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x438>
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e003      	b.n	8004a50 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x440>
  return __builtin_clz(value);
 8004a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
        DmaRecHalfBuffCplt[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] = 0;
 8004a50:	3b04      	subs	r3, #4
 8004a52:	4a19      	ldr	r2, [pc, #100]	@ (8004ab8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4a8>)
 8004a54:	2100      	movs	r1, #0
 8004a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if(RecBuffTrigger == (Audio_In_Ctx[2].Size/4U))
 8004a5a:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 8004a5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a5e:	089a      	lsrs	r2, r3, #2
 8004a60:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d109      	bne.n	8004a7c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46c>
      if(RecBuffHalf == 0U)
 8004a68:	4b14      	ldr	r3, [pc, #80]	@ (8004abc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4ac>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46c>
        RecBuffHalf = 1;
 8004a70:	4b12      	ldr	r3, [pc, #72]	@ (8004abc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4ac>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
        BSP_AUDIO_IN_HalfTransfer_CallBack(2);
 8004a76:	2002      	movs	r0, #2
 8004a78:	f00c fc72 	bl	8011360 <BSP_AUDIO_IN_HalfTransfer_CallBack>
    if(RecBuffTrigger == Audio_In_Ctx[2].Size/2U)
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x498>)
 8004a7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a80:	085a      	lsrs	r2, r3, #1
 8004a82:	4b0a      	ldr	r3, [pc, #40]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d108      	bne.n	8004a9c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48c>
      RecBuffTrigger = 0;
 8004a8a:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x49c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
      RecBuffHalf = 0;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x4ac>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_TransferComplete_CallBack(2);
 8004a96:	2002      	movs	r0, #2
 8004a98:	f00c fcf0 	bl	801147c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004a9c:	bf00      	nop
 8004a9e:	37b8      	adds	r7, #184	@ 0xb8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	ffff8000 	.word	0xffff8000
 8004aa8:	240009e8 	.word	0x240009e8
 8004aac:	24000c5c 	.word	0x24000c5c
 8004ab0:	24000c80 	.word	0x24000c80
 8004ab4:	e000ed00 	.word	0xe000ed00
 8004ab8:	24004e4c 	.word	0x24004e4c
 8004abc:	24000c60 	.word	0x24000c60

08004ac0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the first half */
  BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f00c fc49 	bl	8011360 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Call the record update function to get the second half */
  BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f00c fccc 	bl	801147c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hDfsdmChannel DFSDM Channel handle
  * @retval None
  */
static void DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hDfsdmChannel)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08e      	sub	sp, #56	@ 0x38
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmChannel);

  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN pins ------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b10:	2303      	movs	r3, #3
 8004b12:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8004b14:	4b49      	ldr	r3, [pc, #292]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b1a:	4a48      	ldr	r2, [pc, #288]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b24:	4b45      	ldr	r3, [pc, #276]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b2a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	6a3b      	ldr	r3, [r7, #32]

  /* Enable GPIO clock */
  AUDIO_DFSDM1_CKOUT_GPIO_CLK_ENABLE();
 8004b32:	4b42      	ldr	r3, [pc, #264]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b38:	4a40      	ldr	r2, [pc, #256]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b3a:	f043 0310 	orr.w	r3, r3, #16
 8004b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b42:	4b3e      	ldr	r3, [pc, #248]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	61fb      	str	r3, [r7, #28]
 8004b4e:	69fb      	ldr	r3, [r7, #28]
  AUDIO_DFSDMx_DATIN_MIC1_GPIO_CLK_ENABLE();
 8004b50:	4b3a      	ldr	r3, [pc, #232]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b56:	4a39      	ldr	r2, [pc, #228]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b58:	f043 0310 	orr.w	r3, r3, #16
 8004b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b60:	4b36      	ldr	r3, [pc, #216]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
  AUDIO_DFSDMx_DATIN_MIC2_GPIO_CLK_ENABLE();
 8004b6e:	4b33      	ldr	r3, [pc, #204]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b74:	4a31      	ldr	r2, [pc, #196]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b76:	f043 0310 	orr.w	r3, r3, #16
 8004b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	697b      	ldr	r3, [r7, #20]
  AUDIO_DFSDMx_DATIN_MIC3_GPIO_CLK_ENABLE();
 8004b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b92:	4a2a      	ldr	r2, [pc, #168]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b94:	f043 0320 	orr.w	r3, r3, #32
 8004b98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b9c:	4b27      	ldr	r3, [pc, #156]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]
  AUDIO_DFSDMx_DATIN_MIC4_GPIO_CLK_ENABLE();
 8004baa:	4b24      	ldr	r3, [pc, #144]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb0:	4a22      	ldr	r2, [pc, #136]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004bb2:	f043 0320 	orr.w	r3, r3, #32
 8004bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004bba:	4b20      	ldr	r3, [pc, #128]	@ (8004c3c <DFSDM_ChannelMspInit+0x13c>)
 8004bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]

  GPIO_InitStruct.Pin = AUDIO_DFSDM1_CKOUT_PIN;
 8004bc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDM1_CKOUT_AF;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDM1_CKOUT_GPIO_PORT, &GPIO_InitStruct);
 8004bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4819      	ldr	r0, [pc, #100]	@ (8004c40 <DFSDM_ChannelMspInit+0x140>)
 8004bda:	f005 fe5d 	bl	800a898 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC1_PIN;
 8004bde:	2380      	movs	r3, #128	@ 0x80
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC1_AF;
 8004be2:	2303      	movs	r3, #3
 8004be4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC1_GPIO_PORT, &GPIO_InitStruct);
 8004be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bea:	4619      	mov	r1, r3
 8004bec:	4814      	ldr	r0, [pc, #80]	@ (8004c40 <DFSDM_ChannelMspInit+0x140>)
 8004bee:	f005 fe53 	bl	800a898 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC2_PIN;
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC2_AF;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC2_GPIO_PORT, &GPIO_InitStruct);
 8004bfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bfe:	4619      	mov	r1, r3
 8004c00:	480f      	ldr	r0, [pc, #60]	@ (8004c40 <DFSDM_ChannelMspInit+0x140>)
 8004c02:	f005 fe49 	bl	800a898 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC3_PIN;
 8004c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC3_AF;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC3_GPIO_PORT, &GPIO_InitStruct);
 8004c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c14:	4619      	mov	r1, r3
 8004c16:	480b      	ldr	r0, [pc, #44]	@ (8004c44 <DFSDM_ChannelMspInit+0x144>)
 8004c18:	f005 fe3e 	bl	800a898 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DATIN_MIC4_PIN;
 8004c1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DATIN_MIC4_AF;
 8004c22:	2303      	movs	r3, #3
 8004c24:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DATIN_MIC4_GPIO_PORT, &GPIO_InitStruct);
 8004c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4805      	ldr	r0, [pc, #20]	@ (8004c44 <DFSDM_ChannelMspInit+0x144>)
 8004c2e:	f005 fe33 	bl	800a898 <HAL_GPIO_Init>

}
 8004c32:	bf00      	nop
 8004c34:	3738      	adds	r7, #56	@ 0x38
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	58021000 	.word	0x58021000
 8004c44:	58021400 	.word	0x58021400

08004c48 <DFSDM_FilterMspInit>:
  * @brief  Initialize the DFSDM filter MSP.
  * @param  hDfsdmFilter DFSDM Filter handle
  * @retval None
  */
static void DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hDfsdmFilter)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b0a1      	sub	sp, #132	@ 0x84
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t i, mic_num, mic_init[DFSDM_MIC_NUMBER] = {0};
 8004c50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
  IRQn_Type AUDIO_DFSDM_DMAx_MIC_IRQHandler[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_IRQ, AUDIO_DFSDMx_DMAx_MIC2_IRQ, AUDIO_DFSDMx_DMAx_MIC3_IRQ, AUDIO_DFSDMx_DMAx_MIC4_IRQ};
 8004c5e:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd8 <DFSDM_FilterMspInit+0x190>)
 8004c60:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004c68:	e883 0003 	stmia.w	r3, {r0, r1}
  DMA_Stream_TypeDef* AUDIO_DFSDMx_DMAx_MIC_STREAM[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_STREAM, AUDIO_DFSDMx_DMAx_MIC2_STREAM, AUDIO_DFSDMx_DMAx_MIC3_STREAM, AUDIO_DFSDMx_DMAx_MIC4_STREAM};
 8004c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8004ddc <DFSDM_FilterMspInit+0x194>)
 8004c6e:	f107 0420 	add.w	r4, r7, #32
 8004c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t AUDIO_DFSDMx_DMAx_MIC_REQUEST[DFSDM_MIC_NUMBER] = {AUDIO_DFSDMx_DMAx_MIC1_REQUEST, AUDIO_DFSDMx_DMAx_MIC2_REQUEST, AUDIO_DFSDMx_DMAx_MIC3_REQUEST, AUDIO_DFSDMx_DMAx_MIC4_REQUEST};
 8004c78:	4b59      	ldr	r3, [pc, #356]	@ (8004de0 <DFSDM_FilterMspInit+0x198>)
 8004c7a:	f107 0410 	add.w	r4, r7, #16
 8004c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hDfsdmFilter);

  /* Enable DFSDM clock */
  AUDIO_DFSDM1_CLK_ENABLE();
 8004c84:	4b57      	ldr	r3, [pc, #348]	@ (8004de4 <DFSDM_FilterMspInit+0x19c>)
 8004c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8a:	4a56      	ldr	r2, [pc, #344]	@ (8004de4 <DFSDM_FilterMspInit+0x19c>)
 8004c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c94:	4b53      	ldr	r3, [pc, #332]	@ (8004de4 <DFSDM_FilterMspInit+0x19c>)
 8004c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DMA clock */
  AUDIO_DFSDM1_DMAx_CLK_ENABLE();
 8004ca2:	4b50      	ldr	r3, [pc, #320]	@ (8004de4 <DFSDM_FilterMspInit+0x19c>)
 8004ca4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8004de4 <DFSDM_FilterMspInit+0x19c>)
 8004caa:	f043 0302 	orr.w	r3, r3, #2
 8004cae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8004de4 <DFSDM_FilterMspInit+0x19c>)
 8004cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]

  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cc4:	e188      	b.n	8004fd8 <DFSDM_FilterMspInit+0x390>
 8004cc6:	2310      	movs	r3, #16
 8004cc8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004cd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <DFSDM_FilterMspInit+0x98>
    return 32U;
 8004cdc:	2320      	movs	r3, #32
 8004cde:	e003      	b.n	8004ce8 <DFSDM_FilterMspInit+0xa0>
  return __builtin_clz(value);
 8004ce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
  {
    if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC1)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC1) == AUDIO_IN_DEVICE_DIGITAL_MIC1))
 8004ce8:	3b04      	subs	r3, #4
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	3380      	adds	r3, #128	@ 0x80
 8004cee:	443b      	add	r3, r7
 8004cf0:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d00f      	beq.n	8004d18 <DFSDM_FilterMspInit+0xd0>
 8004cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8004de8 <DFSDM_FilterMspInit+0x1a0>)
 8004cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <DFSDM_FilterMspInit+0xd0>
    {
      mic_num = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	67bb      	str	r3, [r7, #120]	@ 0x78
      mic_init[mic_num] = 1;
 8004d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	3380      	adds	r3, #128	@ 0x80
 8004d0e:	443b      	add	r3, r7
 8004d10:	2201      	movs	r2, #1
 8004d12:	f843 2c48 	str.w	r2, [r3, #-72]
 8004d16:	e086      	b.n	8004e26 <DFSDM_FilterMspInit+0x1de>
 8004d18:	2320      	movs	r3, #32
 8004d1a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004d24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d26:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <DFSDM_FilterMspInit+0xea>
    return 32U;
 8004d2e:	2320      	movs	r3, #32
 8004d30:	e003      	b.n	8004d3a <DFSDM_FilterMspInit+0xf2>
  return __builtin_clz(value);
 8004d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC2)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC2) == AUDIO_IN_DEVICE_DIGITAL_MIC2))
 8004d3a:	3b04      	subs	r3, #4
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3380      	adds	r3, #128	@ 0x80
 8004d40:	443b      	add	r3, r7
 8004d42:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d00f      	beq.n	8004d6a <DFSDM_FilterMspInit+0x122>
 8004d4a:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <DFSDM_FilterMspInit+0x1a0>)
 8004d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <DFSDM_FilterMspInit+0x122>
    {
      mic_num = 1U;
 8004d56:	2301      	movs	r3, #1
 8004d58:	67bb      	str	r3, [r7, #120]	@ 0x78
      mic_init[mic_num] = 1;
 8004d5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	3380      	adds	r3, #128	@ 0x80
 8004d60:	443b      	add	r3, r7
 8004d62:	2201      	movs	r2, #1
 8004d64:	f843 2c48 	str.w	r2, [r3, #-72]
 8004d68:	e05d      	b.n	8004e26 <DFSDM_FilterMspInit+0x1de>
 8004d6a:	2340      	movs	r3, #64	@ 0x40
 8004d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004d7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <DFSDM_FilterMspInit+0x13c>
    return 32U;
 8004d80:	2320      	movs	r3, #32
 8004d82:	e003      	b.n	8004d8c <DFSDM_FilterMspInit+0x144>
  return __builtin_clz(value);
 8004d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC3)] != 1U) &&((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC3) == AUDIO_IN_DEVICE_DIGITAL_MIC3))
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	3380      	adds	r3, #128	@ 0x80
 8004d92:	443b      	add	r3, r7
 8004d94:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d00f      	beq.n	8004dbc <DFSDM_FilterMspInit+0x174>
 8004d9c:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <DFSDM_FilterMspInit+0x1a0>)
 8004d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <DFSDM_FilterMspInit+0x174>
    {
      mic_num = 2U;
 8004da8:	2302      	movs	r3, #2
 8004daa:	67bb      	str	r3, [r7, #120]	@ 0x78
      mic_init[mic_num] = 1;
 8004dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	3380      	adds	r3, #128	@ 0x80
 8004db2:	443b      	add	r3, r7
 8004db4:	2201      	movs	r2, #1
 8004db6:	f843 2c48 	str.w	r2, [r3, #-72]
 8004dba:	e034      	b.n	8004e26 <DFSDM_FilterMspInit+0x1de>
 8004dbc:	2380      	movs	r3, #128	@ 0x80
 8004dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004dc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dca:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10c      	bne.n	8004dec <DFSDM_FilterMspInit+0x1a4>
    return 32U;
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e00e      	b.n	8004df4 <DFSDM_FilterMspInit+0x1ac>
 8004dd6:	bf00      	nop
 8004dd8:	080158c0 	.word	0x080158c0
 8004ddc:	080158c8 	.word	0x080158c8
 8004de0:	080158d8 	.word	0x080158d8
 8004de4:	58024400 	.word	0x58024400
 8004de8:	240009e8 	.word	0x240009e8
  return __builtin_clz(value);
 8004dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dee:	fab3 f383 	clz	r3, r3
 8004df2:	b2db      	uxtb	r3, r3
    }
    else if((mic_init[POS_VAL(AUDIO_IN_DEVICE_DIGITAL_MIC4)] != 1U) && ((Audio_In_Ctx[2].Device & AUDIO_IN_DEVICE_DIGITAL_MIC4) == AUDIO_IN_DEVICE_DIGITAL_MIC4))
 8004df4:	3b04      	subs	r3, #4
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	3380      	adds	r3, #128	@ 0x80
 8004dfa:	443b      	add	r3, r7
 8004dfc:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f000 80ed 	beq.w	8004fe0 <DFSDM_FilterMspInit+0x398>
 8004e06:	4b78      	ldr	r3, [pc, #480]	@ (8004fe8 <DFSDM_FilterMspInit+0x3a0>)
 8004e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 80e6 	beq.w	8004fe0 <DFSDM_FilterMspInit+0x398>
    {
      mic_num = 3U;
 8004e14:	2303      	movs	r3, #3
 8004e16:	67bb      	str	r3, [r7, #120]	@ 0x78
      mic_init[mic_num] = 1;
 8004e18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	3380      	adds	r3, #128	@ 0x80
 8004e1e:	443b      	add	r3, r7
 8004e20:	2201      	movs	r2, #1
 8004e22:	f843 2c48 	str.w	r2, [r3, #-72]
    else
    {
      break;
    }
    /* Configure the hDmaDfsdm[i] handle parameters */
    hDmaDfsdm[mic_num].Init.Request             = AUDIO_DFSDMx_DMAx_MIC_REQUEST[mic_num];
 8004e26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	3380      	adds	r3, #128	@ 0x80
 8004e2c:	443b      	add	r3, r7
 8004e2e:	f853 1c70 	ldr.w	r1, [r3, #-112]
 8004e32:	486e      	ldr	r0, [pc, #440]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004e34:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	4403      	add	r3, r0
 8004e40:	3304      	adds	r3, #4
 8004e42:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Instance                 = AUDIO_DFSDMx_DMAx_MIC_STREAM[mic_num];
 8004e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	3380      	adds	r3, #128	@ 0x80
 8004e4a:	443b      	add	r3, r7
 8004e4c:	f853 1c60 	ldr.w	r1, [r3, #-96]
 8004e50:	4866      	ldr	r0, [pc, #408]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004e52:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e54:	4613      	mov	r3, r2
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	4403      	add	r3, r0
 8004e5e:	6019      	str	r1, [r3, #0]
    hDmaDfsdm[mic_num].Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004e60:	4962      	ldr	r1, [pc, #392]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004e62:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e64:	4613      	mov	r3, r2
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3308      	adds	r3, #8
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphInc           = DMA_PINC_DISABLE;
 8004e74:	495d      	ldr	r1, [pc, #372]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004e76:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	440b      	add	r3, r1
 8004e82:	330c      	adds	r3, #12
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemInc              = DMA_MINC_ENABLE;
 8004e88:	4958      	ldr	r1, [pc, #352]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004e8a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	440b      	add	r3, r1
 8004e96:	3310      	adds	r3, #16
 8004e98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e9c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e9e:	4953      	ldr	r1, [pc, #332]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004ea0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	440b      	add	r3, r1
 8004eac:	3314      	adds	r3, #20
 8004eae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004eb2:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004eb4:	494d      	ldr	r1, [pc, #308]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004eb6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3318      	adds	r3, #24
 8004ec4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ec8:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Mode                = DMA_CIRCULAR;
 8004eca:	4948      	ldr	r1, [pc, #288]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004ecc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	331c      	adds	r3, #28
 8004eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ede:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.Priority            = DMA_PRIORITY_HIGH;
 8004ee0:	4942      	ldr	r1, [pc, #264]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004ee2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	440b      	add	r3, r1
 8004eee:	3320      	adds	r3, #32
 8004ef0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ef4:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004ef6:	493d      	ldr	r1, [pc, #244]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004ef8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	440b      	add	r3, r1
 8004f04:	3324      	adds	r3, #36	@ 0x24
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.MemBurst            = DMA_MBURST_SINGLE;
 8004f0a:	4938      	ldr	r1, [pc, #224]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004f0c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f0e:	4613      	mov	r3, r2
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	440b      	add	r3, r1
 8004f18:	332c      	adds	r3, #44	@ 0x2c
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8004f1e:	4933      	ldr	r1, [pc, #204]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004f20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3330      	adds	r3, #48	@ 0x30
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
    hDmaDfsdm[mic_num].State                    = HAL_DMA_STATE_RESET;
 8004f32:	492e      	ldr	r1, [pc, #184]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004f34:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f36:	4613      	mov	r3, r2
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	1a9b      	subs	r3, r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	440b      	add	r3, r1
 8004f40:	3335      	adds	r3, #53	@ 0x35
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(&haudio_in_dfsdm_filter[mic_num], hdmaReg, hDmaDfsdm[mic_num]);
 8004f46:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f48:	4613      	mov	r3, r2
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4a26      	ldr	r2, [pc, #152]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004f52:	441a      	add	r2, r3
 8004f54:	4926      	ldr	r1, [pc, #152]	@ (8004ff0 <DFSDM_FilterMspInit+0x3a8>)
 8004f56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f58:	2054      	movs	r0, #84	@ 0x54
 8004f5a:	fb00 f303 	mul.w	r3, r0, r3
 8004f5e:	440b      	add	r3, r1
 8004f60:	3328      	adds	r3, #40	@ 0x28
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f66:	2254      	movs	r2, #84	@ 0x54
 8004f68:	fb02 f303 	mul.w	r3, r2, r3
 8004f6c:	4a20      	ldr	r2, [pc, #128]	@ (8004ff0 <DFSDM_FilterMspInit+0x3a8>)
 8004f6e:	1899      	adds	r1, r3, r2
 8004f70:	481e      	ldr	r0, [pc, #120]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004f72:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f74:	4613      	mov	r3, r2
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	4403      	add	r3, r0
 8004f7e:	3338      	adds	r3, #56	@ 0x38
 8004f80:	6019      	str	r1, [r3, #0]

    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaDfsdm[mic_num]);
 8004f82:	491a      	ldr	r1, [pc, #104]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004f84:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	440b      	add	r3, r1
 8004f90:	3335      	adds	r3, #53	@ 0x35
 8004f92:	2200      	movs	r2, #0
 8004f94:	701a      	strb	r2, [r3, #0]

    /* Configure the DMA Channel */
    (void)HAL_DMA_Init(&hDmaDfsdm[mic_num]);
 8004f96:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004f98:	4613      	mov	r3, r2
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4a12      	ldr	r2, [pc, #72]	@ (8004fec <DFSDM_FilterMspInit+0x3a4>)
 8004fa2:	4413      	add	r3, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f002 fea7 	bl	8007cf8 <HAL_DMA_Init>

    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num], BSP_AUDIO_IN_IT_PRIORITY, 0);
 8004faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	3380      	adds	r3, #128	@ 0x80
 8004fb0:	443b      	add	r3, r7
 8004fb2:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	210f      	movs	r1, #15
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f002 fa8f 	bl	80074de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDM_DMAx_MIC_IRQHandler[mic_num]);
 8004fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	3380      	adds	r3, #128	@ 0x80
 8004fc6:	443b      	add	r3, r7
 8004fc8:	f933 3c50 	ldrsh.w	r3, [r3, #-80]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f002 faa0 	bl	8007512 <HAL_NVIC_EnableIRQ>
  for(i = 0; i < DFSDM_MIC_NUMBER; i++)
 8004fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	f67f ae73 	bls.w	8004cc6 <DFSDM_FilterMspInit+0x7e>
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3784      	adds	r7, #132	@ 0x84
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd90      	pop	{r4, r7, pc}
 8004fe8:	240009e8 	.word	0x240009e8
 8004fec:	24000a7c 	.word	0x24000a7c
 8004ff0:	24000688 	.word	0x24000688

08004ff4 <MX_SAI1_ClockConfig>:
    }
  }
}

HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);
  HAL_StatusTypeDef ret = MX_SAI4_ClockConfig(hsai, SampleRate);
 8004ffe:	6839      	ldr	r1, [r7, #0]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f807 	bl	8005014 <MX_SAI4_ClockConfig>
 8005006:	4603      	mov	r3, r0
 8005008:	73fb      	strb	r3, [r7, #15]

  return ret;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <MX_SAI4_ClockConfig>:

HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b0b0      	sub	sp, #192	@ 0xc0
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);
  HAL_StatusTypeDef ret = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  static uint8_t isClockingDone = 0U;

  if (isClockingDone == 0U)
 8005024:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <MX_SAI4_ClockConfig+0x84>)
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d12f      	bne.n	800508c <MX_SAI4_ClockConfig+0x78>
  {
    
      RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800502c:	f107 0308 	add.w	r3, r7, #8
 8005030:	22b4      	movs	r2, #180	@ 0xb4
 8005032:	2100      	movs	r1, #0
 8005034:	4618      	mov	r0, r3
 8005036:	f010 f991 	bl	801535c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A|RCC_PERIPHCLK_SAI1;
 800503a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800503e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005040:	2319      	movs	r3, #25
 8005042:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8005044:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8005048:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800504a:	2307      	movs	r3, #7
 800504c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800504e:	2302      	movs	r3, #2
 8005050:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005052:	2302      	movs	r3, #2
 8005054:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8005056:	2300      	movs	r3, #0
 8005058:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800505a:	2320      	movs	r3, #32
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800505e:	2300      	movs	r3, #0
 8005060:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8005062:	2301      	movs	r3, #1
 8005064:	65fb      	str	r3, [r7, #92]	@ 0x5c
  PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8005066:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800506a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  ret = HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	4618      	mov	r0, r3
 8005074:	f008 fb52 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 8005078:	4603      	mov	r3, r0
 800507a:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  


    if (ret == HAL_OK)
 800507e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <MX_SAI4_ClockConfig+0x78>
    {
      isClockingDone = 1U;
 8005086:	4b04      	ldr	r3, [pc, #16]	@ (8005098 <MX_SAI4_ClockConfig+0x84>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret;
 800508c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
}
 8005090:	4618      	mov	r0, r3
 8005092:	37c0      	adds	r7, #192	@ 0xc0
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	24004e5c 	.word	0x24004e5c

0800509c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80050a6:	4b16      	ldr	r3, [pc, #88]	@ (8005100 <BSP_I2C4_Init+0x64>)
 80050a8:	4a16      	ldr	r2, [pc, #88]	@ (8005104 <BSP_I2C4_Init+0x68>)
 80050aa:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter++ == 0U)
 80050ac:	4b16      	ldr	r3, [pc, #88]	@ (8005108 <BSP_I2C4_Init+0x6c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	4915      	ldr	r1, [pc, #84]	@ (8005108 <BSP_I2C4_Init+0x6c>)
 80050b4:	600a      	str	r2, [r1, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d11d      	bne.n	80050f6 <BSP_I2C4_Init+0x5a>
  {
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80050ba:	4811      	ldr	r0, [pc, #68]	@ (8005100 <BSP_I2C4_Init+0x64>)
 80050bc:	f006 f9b2 	bl	800b424 <HAL_I2C_GetState>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d117      	bne.n	80050f6 <BSP_I2C4_Init+0x5a>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80050c6:	480e      	ldr	r0, [pc, #56]	@ (8005100 <BSP_I2C4_Init+0x64>)
 80050c8:	f000 fb94 	bl	80057f4 <I2C4_MspInit>
        {
          ret = BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d111      	bne.n	80050f6 <BSP_I2C4_Init+0x5a>
      {
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80050d2:	f008 fb0d 	bl	800d6f0 <HAL_RCC_GetPCLK2Freq>
 80050d6:	4603      	mov	r3, r0
 80050d8:	490c      	ldr	r1, [pc, #48]	@ (800510c <BSP_I2C4_Init+0x70>)
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f914 	bl	8005308 <I2C_GetTiming>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4619      	mov	r1, r3
 80050e4:	4806      	ldr	r0, [pc, #24]	@ (8005100 <BSP_I2C4_Init+0x64>)
 80050e6:	f000 f83b 	bl	8005160 <MX_I2C4_Init>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <BSP_I2C4_Init+0x5a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80050f0:	f06f 0307 	mvn.w	r3, #7
 80050f4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }

  return ret;
 80050f6:	687b      	ldr	r3, [r7, #4]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	24004e60 	.word	0x24004e60
 8005104:	58001c00 	.word	0x58001c00
 8005108:	24004eac 	.word	0x24004eac
 800510c:	000186a0 	.word	0x000186a0

08005110 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval None
  */
int32_t BSP_I2C4_DeInit(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8005116:	2300      	movs	r3, #0
 8005118:	607b      	str	r3, [r7, #4]

  if (I2c4InitCounter > 0U)
 800511a:	4b0f      	ldr	r3, [pc, #60]	@ (8005158 <BSP_I2C4_DeInit+0x48>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d014      	beq.n	800514c <BSP_I2C4_DeInit+0x3c>
  {
    if (--I2c4InitCounter == 0U)
 8005122:	4b0d      	ldr	r3, [pc, #52]	@ (8005158 <BSP_I2C4_DeInit+0x48>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3b01      	subs	r3, #1
 8005128:	4a0b      	ldr	r2, [pc, #44]	@ (8005158 <BSP_I2C4_DeInit+0x48>)
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <BSP_I2C4_DeInit+0x48>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <BSP_I2C4_DeInit+0x3c>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      I2C4_MspDeInit(&hbus_i2c4);
 8005134:	4809      	ldr	r0, [pc, #36]	@ (800515c <BSP_I2C4_DeInit+0x4c>)
 8005136:	f000 fbc3 	bl	80058c0 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

      /* Init the I2C */
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800513a:	4808      	ldr	r0, [pc, #32]	@ (800515c <BSP_I2C4_DeInit+0x4c>)
 800513c:	f005 ff00 	bl	800af40 <HAL_I2C_DeInit>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <BSP_I2C4_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8005146:	f06f 0307 	mvn.w	r3, #7
 800514a:	607b      	str	r3, [r7, #4]
      }
    }
  }

  return ret;
 800514c:	687b      	ldr	r3, [r7, #4]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	24004eac 	.word	0x24004eac
 800515c:	24004e60 	.word	0x24004e60

08005160 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f005 fe3e 	bl	800ae20 <HAL_I2C_Init>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
 80051ae:	e014      	b.n	80051da <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOGFILTER_ENABLE : I2C_ANALOGFILTER_DISABLE;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80051b4:	68b9      	ldr	r1, [r7, #8]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f006 fb6a 	bl	800b890 <HAL_I2CEx_ConfigAnalogFilter>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
 80051c6:	e008      	b.n	80051da <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80051c8:	2100      	movs	r1, #0
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f006 fbab 	bl	800b926 <HAL_I2CEx_ConfigDigitalFilter>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	60ba      	str	r2, [r7, #8]
 80051ec:	461a      	mov	r2, r3
 80051ee:	4603      	mov	r3, r0
 80051f0:	81fb      	strh	r3, [r7, #14]
 80051f2:	460b      	mov	r3, r1
 80051f4:	81bb      	strh	r3, [r7, #12]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 80051fa:	89b9      	ldrh	r1, [r7, #12]
 80051fc:	89f8      	ldrh	r0, [r7, #14]
 80051fe:	88fb      	ldrh	r3, [r7, #6]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2201      	movs	r2, #1
 8005206:	f000 fba5 	bl	8005954 <I2C4_ReadReg>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e00c      	b.n	8005230 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005216:	4809      	ldr	r0, [pc, #36]	@ (800523c <BSP_I2C4_ReadReg+0x58>)
 8005218:	f006 f912 	bl	800b440 <HAL_I2C_GetError>
 800521c:	4603      	mov	r3, r0
 800521e:	2b04      	cmp	r3, #4
 8005220:	d103      	bne.n	800522a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005222:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	e002      	b.n	8005230 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800522a:	f06f 0303 	mvn.w	r3, #3
 800522e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8005230:	697b      	ldr	r3, [r7, #20]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	24004e60 	.word	0x24004e60

08005240 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af02      	add	r7, sp, #8
 8005246:	60ba      	str	r2, [r7, #8]
 8005248:	461a      	mov	r2, r3
 800524a:	4603      	mov	r3, r0
 800524c:	81fb      	strh	r3, [r7, #14]
 800524e:	460b      	mov	r3, r1
 8005250:	81bb      	strh	r3, [r7, #12]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8005256:	89b9      	ldrh	r1, [r7, #12]
 8005258:	89f8      	ldrh	r0, [r7, #14]
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2202      	movs	r2, #2
 8005262:	f000 fb51 	bl	8005908 <I2C4_WriteReg>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d102      	bne.n	8005272 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800526c:	2300      	movs	r3, #0
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e00c      	b.n	800528c <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005272:	4809      	ldr	r0, [pc, #36]	@ (8005298 <BSP_I2C4_WriteReg16+0x58>)
 8005274:	f006 f8e4 	bl	800b440 <HAL_I2C_GetError>
 8005278:	4603      	mov	r3, r0
 800527a:	2b04      	cmp	r3, #4
 800527c:	d103      	bne.n	8005286 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800527e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e002      	b.n	800528c <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005286:	f06f 0303 	mvn.w	r3, #3
 800528a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800528c:	697b      	ldr	r3, [r7, #20]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	24004e60 	.word	0x24004e60

0800529c <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60ba      	str	r2, [r7, #8]
 80052a4:	461a      	mov	r2, r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	81fb      	strh	r3, [r7, #14]
 80052aa:	460b      	mov	r3, r1
 80052ac:	81bb      	strh	r3, [r7, #12]
 80052ae:	4613      	mov	r3, r2
 80052b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80052b2:	89b9      	ldrh	r1, [r7, #12]
 80052b4:	89f8      	ldrh	r0, [r7, #14]
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2202      	movs	r2, #2
 80052be:	f000 fb49 	bl	8005954 <I2C4_ReadReg>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e00c      	b.n	80052e8 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80052ce:	4809      	ldr	r0, [pc, #36]	@ (80052f4 <BSP_I2C4_ReadReg16+0x58>)
 80052d0:	f006 f8b6 	bl	800b440 <HAL_I2C_GetError>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d103      	bne.n	80052e2 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80052da:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	e002      	b.n	80052e8 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80052e2:	f06f 0303 	mvn.w	r3, #3
 80052e6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80052e8:	697b      	ldr	r3, [r7, #20]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	24004e60 	.word	0x24004e60

080052f8 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 80052fc:	f001 ffd4 	bl	80072a8 <HAL_GetTick>
 8005300:	4603      	mov	r3, r0
}
 8005302:	4618      	mov	r0, r3
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d06b      	beq.n	80053f4 <I2C_GetTiming+0xec>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d068      	beq.n	80053f4 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	e060      	b.n	80053ea <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005328:	4a35      	ldr	r2, [pc, #212]	@ (8005400 <I2C_GetTiming+0xf8>)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	212c      	movs	r1, #44	@ 0x2c
 800532e:	fb01 f303 	mul.w	r3, r1, r3
 8005332:	4413      	add	r3, r2
 8005334:	3304      	adds	r3, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d352      	bcc.n	80053e4 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800533e:	4a30      	ldr	r2, [pc, #192]	@ (8005400 <I2C_GetTiming+0xf8>)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	212c      	movs	r1, #44	@ 0x2c
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	4413      	add	r3, r2
 800534a:	3308      	adds	r3, #8
 800534c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d847      	bhi.n	80053e4 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8005354:	6939      	ldr	r1, [r7, #16]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f856 	bl	8005408 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800535c:	6939      	ldr	r1, [r7, #16]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f940 	bl	80055e4 <I2C_Compute_SCLL_SCLH>
 8005364:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b7f      	cmp	r3, #127	@ 0x7f
 800536a:	d842      	bhi.n	80053f2 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800536c:	4925      	ldr	r1, [pc, #148]	@ (8005404 <I2C_GetTiming+0xfc>)
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800537e:	4821      	ldr	r0, [pc, #132]	@ (8005404 <I2C_GetTiming+0xfc>)
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4403      	add	r3, r0
 800538c:	3304      	adds	r3, #4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	051b      	lsls	r3, r3, #20
 8005392:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005396:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005398:	481a      	ldr	r0, [pc, #104]	@ (8005404 <I2C_GetTiming+0xfc>)
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4403      	add	r3, r0
 80053a6:	3308      	adds	r3, #8
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80053b0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80053b2:	4814      	ldr	r0, [pc, #80]	@ (8005404 <I2C_GetTiming+0xfc>)
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4403      	add	r3, r0
 80053c0:	330c      	adds	r3, #12
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80053c8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80053ca:	480e      	ldr	r0, [pc, #56]	@ (8005404 <I2C_GetTiming+0xfc>)
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4403      	add	r3, r0
 80053d8:	3310      	adds	r3, #16
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80053de:	430b      	orrs	r3, r1
 80053e0:	617b      	str	r3, [r7, #20]
        }
        break;
 80053e2:	e006      	b.n	80053f2 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3301      	adds	r3, #1
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d99b      	bls.n	8005328 <I2C_GetTiming+0x20>
 80053f0:	e000      	b.n	80053f4 <I2C_GetTiming+0xec>
        break;
 80053f2:	bf00      	nop
      }
    }
  }

  return ret;
 80053f4:	697b      	ldr	r3, [r7, #20]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	080159c4 	.word	0x080159c4
 8005404:	24004eb0 	.word	0x24004eb0

08005408 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8005408:	b480      	push	{r7}
 800540a:	b08f      	sub	sp, #60	@ 0x3c
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005412:	2310      	movs	r3, #16
 8005414:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	085a      	lsrs	r2, r3, #1
 800541a:	4b6e      	ldr	r3, [pc, #440]	@ (80055d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800541c:	4413      	add	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	fbb3 f3f2 	udiv	r3, r3, r2
 8005424:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8005426:	2332      	movs	r3, #50	@ 0x32
 8005428:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 800542a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800542e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005430:	4a69      	ldr	r2, [pc, #420]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	212c      	movs	r1, #44	@ 0x2c
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	3324      	adds	r3, #36	@ 0x24
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	4a65      	ldr	r2, [pc, #404]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	212c      	movs	r1, #44	@ 0x2c
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	330c      	adds	r3, #12
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005454:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005456:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005458:	495f      	ldr	r1, [pc, #380]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	202c      	movs	r0, #44	@ 0x2c
 800545e:	fb00 f303 	mul.w	r3, r0, r3
 8005462:	440b      	add	r3, r1
 8005464:	3328      	adds	r3, #40	@ 0x28
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3303      	adds	r3, #3
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005474:	4a58      	ldr	r2, [pc, #352]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	212c      	movs	r1, #44	@ 0x2c
 800547a:	fb01 f303 	mul.w	r3, r1, r3
 800547e:	4413      	add	r3, r2
 8005480:	3310      	adds	r3, #16
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	4a54      	ldr	r2, [pc, #336]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	212c      	movs	r1, #44	@ 0x2c
 800548c:	fb01 f303 	mul.w	r3, r1, r3
 8005490:	4413      	add	r3, r2
 8005492:	3320      	adds	r3, #32
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005498:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800549a:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800549c:	494e      	ldr	r1, [pc, #312]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	202c      	movs	r0, #44	@ 0x2c
 80054a2:	fb00 f303 	mul.w	r3, r0, r3
 80054a6:	440b      	add	r3, r1
 80054a8:	3328      	adds	r3, #40	@ 0x28
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3304      	adds	r3, #4
 80054ae:	69f9      	ldr	r1, [r7, #28]
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80054b8:	4a47      	ldr	r2, [pc, #284]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	212c      	movs	r1, #44	@ 0x2c
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	3320      	adds	r3, #32
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	4a43      	ldr	r2, [pc, #268]	@ (80055d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	212c      	movs	r1, #44	@ 0x2c
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	3314      	adds	r3, #20
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4403      	add	r3, r0
 80054dc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	dc01      	bgt.n	80054e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	dc01      	bgt.n	80054f2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054f6:	e062      	b.n	80055be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fc:	e059      	b.n	80055b2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	3301      	adds	r3, #1
 8005502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005504:	3201      	adds	r2, #1
 8005506:	fb03 f202 	mul.w	r2, r3, r2
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	fb02 f303 	mul.w	r3, r2, r3
 8005510:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	429a      	cmp	r2, r3
 8005518:	d348      	bcc.n	80055ac <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800551a:	2300      	movs	r3, #0
 800551c:	623b      	str	r3, [r7, #32]
 800551e:	e042      	b.n	80055a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	3301      	adds	r3, #1
 8005524:	6a3a      	ldr	r2, [r7, #32]
 8005526:	fb03 f202 	mul.w	r2, r3, r2
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	fb02 f303 	mul.w	r3, r2, r3
 8005530:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d332      	bcc.n	80055a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	d82e      	bhi.n	80055a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8005542:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005546:	429a      	cmp	r2, r3
 8005548:	d02a      	beq.n	80055a0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800554a:	4b24      	ldr	r3, [pc, #144]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4924      	ldr	r1, [pc, #144]	@ (80055e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800555c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800555e:	4b1f      	ldr	r3, [pc, #124]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	491f      	ldr	r1, [pc, #124]	@ (80055e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	3304      	adds	r3, #4
 8005570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005572:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005574:	4b19      	ldr	r3, [pc, #100]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4919      	ldr	r1, [pc, #100]	@ (80055e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	3308      	adds	r3, #8
 8005586:	6a3a      	ldr	r2, [r7, #32]
 8005588:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800558e:	4b13      	ldr	r3, [pc, #76]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a11      	ldr	r2, [pc, #68]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8005596:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005598:	4b10      	ldr	r3, [pc, #64]	@ (80055dc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b7f      	cmp	r3, #127	@ 0x7f
 800559e:	d812      	bhi.n	80055c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	3301      	adds	r3, #1
 80055a4:	623b      	str	r3, [r7, #32]
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	2b0f      	cmp	r3, #15
 80055aa:	d9b9      	bls.n	8005520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	3301      	adds	r3, #1
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	2b0f      	cmp	r3, #15
 80055b6:	d9a2      	bls.n	80054fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80055b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ba:	3301      	adds	r3, #1
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d999      	bls.n	80054f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80055c4:	e000      	b.n	80055c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80055c6:	bf00      	nop
          }
        }
      }
    }
  }
}
 80055c8:	373c      	adds	r7, #60	@ 0x3c
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	3b9aca00 	.word	0x3b9aca00
 80055d8:	080159c4 	.word	0x080159c4
 80055dc:	240058b0 	.word	0x240058b0
 80055e0:	24004eb0 	.word	0x24004eb0

080055e4 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b093      	sub	sp, #76	@ 0x4c
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295
 80055f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	085a      	lsrs	r2, r3, #1
 80055f8:	4b7a      	ldr	r3, [pc, #488]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x200>)
 80055fa:	4413      	add	r3, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8005604:	4a78      	ldr	r2, [pc, #480]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	212c      	movs	r1, #44	@ 0x2c
 800560a:	fb01 f303 	mul.w	r3, r1, r3
 800560e:	4413      	add	r3, r2
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	085a      	lsrs	r2, r3, #1
 8005614:	4b73      	ldr	r3, [pc, #460]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x200>)
 8005616:	4413      	add	r3, r2
 8005618:	4973      	ldr	r1, [pc, #460]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	202c      	movs	r0, #44	@ 0x2c
 800561e:	fb00 f202 	mul.w	r2, r0, r2
 8005622:	440a      	add	r2, r1
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	fbb3 f3f2 	udiv	r3, r3, r2
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 800562c:	2332      	movs	r3, #50	@ 0x32
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8005630:	4a6d      	ldr	r2, [pc, #436]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	212c      	movs	r1, #44	@ 0x2c
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	3328      	adds	r3, #40	@ 0x28
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005648:	4a67      	ldr	r2, [pc, #412]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	212c      	movs	r1, #44	@ 0x2c
 800564e:	fb01 f303 	mul.w	r3, r1, r3
 8005652:	4413      	add	r3, r2
 8005654:	3304      	adds	r3, #4
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a62      	ldr	r2, [pc, #392]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x200>)
 800565a:	fbb2 f3f3 	udiv	r3, r2, r3
 800565e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8005660:	4a61      	ldr	r2, [pc, #388]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	212c      	movs	r1, #44	@ 0x2c
 8005666:	fb01 f303 	mul.w	r3, r1, r3
 800566a:	4413      	add	r3, r2
 800566c:	3308      	adds	r3, #8
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5c      	ldr	r2, [pc, #368]	@ (80057e4 <I2C_Compute_SCLL_SCLH+0x200>)
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567a:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800567c:	2300      	movs	r3, #0
 800567e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005680:	e0a3      	b.n	80057ca <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005682:	495a      	ldr	r1, [pc, #360]	@ (80057ec <I2C_Compute_SCLL_SCLH+0x208>)
 8005684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800569c:	2300      	movs	r3, #0
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a0:	e08c      	b.n	80057bc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80056a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	441a      	add	r2, r3
 80056a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056aa:	3301      	adds	r3, #1
 80056ac:	6979      	ldr	r1, [r7, #20]
 80056ae:	fb03 f101 	mul.w	r1, r3, r1
 80056b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	440b      	add	r3, r1
 80056b8:	4413      	add	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80056bc:	4a4a      	ldr	r2, [pc, #296]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	212c      	movs	r1, #44	@ 0x2c
 80056c2:	fb01 f303 	mul.w	r3, r1, r3
 80056c6:	4413      	add	r3, r2
 80056c8:	3318      	adds	r3, #24
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d971      	bls.n	80057b6 <I2C_Compute_SCLL_SCLH+0x1d2>
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	089b      	lsrs	r3, r3, #2
 80056de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d268      	bcs.n	80057b6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056e8:	e062      	b.n	80057b0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80056ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	441a      	add	r2, r3
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	3301      	adds	r3, #1
 80056f4:	6979      	ldr	r1, [r7, #20]
 80056f6:	fb03 f101 	mul.w	r1, r3, r1
 80056fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	440b      	add	r3, r1
 8005700:	4413      	add	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	441a      	add	r2, r3
 800570a:	4937      	ldr	r1, [pc, #220]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	202c      	movs	r0, #44	@ 0x2c
 8005710:	fb00 f303 	mul.w	r3, r0, r3
 8005714:	440b      	add	r3, r1
 8005716:	3320      	adds	r3, #32
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	441a      	add	r2, r3
 800571c:	4932      	ldr	r1, [pc, #200]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	202c      	movs	r0, #44	@ 0x2c
 8005722:	fb00 f303 	mul.w	r3, r0, r3
 8005726:	440b      	add	r3, r1
 8005728:	3324      	adds	r3, #36	@ 0x24
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4413      	add	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	429a      	cmp	r2, r3
 8005736:	d338      	bcc.n	80057aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	429a      	cmp	r2, r3
 800573e:	d834      	bhi.n	80057aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8005740:	4a29      	ldr	r2, [pc, #164]	@ (80057e8 <I2C_Compute_SCLL_SCLH+0x204>)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	212c      	movs	r1, #44	@ 0x2c
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	4413      	add	r3, r2
 800574c:	331c      	adds	r3, #28
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	429a      	cmp	r2, r3
 8005754:	d329      	bcc.n	80057aa <I2C_Compute_SCLL_SCLH+0x1c6>
 8005756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	429a      	cmp	r2, r3
 800575c:	d225      	bcs.n	80057aa <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 8005766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005768:	2b00      	cmp	r3, #0
 800576a:	da02      	bge.n	8005772 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576e:	425b      	negs	r3, r3
 8005770:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005776:	429a      	cmp	r2, r3
 8005778:	d917      	bls.n	80057aa <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800577e:	491b      	ldr	r1, [pc, #108]	@ (80057ec <I2C_Compute_SCLL_SCLH+0x208>)
 8005780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	3310      	adds	r3, #16
 800578e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005790:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8005792:	4916      	ldr	r1, [pc, #88]	@ (80057ec <I2C_Compute_SCLL_SCLH+0x208>)
 8005794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	330c      	adds	r3, #12
 80057a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057a4:	601a      	str	r2, [r3, #0]
              ret = count;
 80057a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a8:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	3301      	adds	r3, #1
 80057ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	2bff      	cmp	r3, #255	@ 0xff
 80057b4:	d999      	bls.n	80056ea <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80057b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b8:	3301      	adds	r3, #1
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057be:	2bff      	cmp	r3, #255	@ 0xff
 80057c0:	f67f af6f 	bls.w	80056a2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80057c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c6:	3301      	adds	r3, #1
 80057c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ca:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <I2C_Compute_SCLL_SCLH+0x20c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057d0:	429a      	cmp	r2, r3
 80057d2:	f4ff af56 	bcc.w	8005682 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80057d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80057d8:	4618      	mov	r0, r3
 80057da:	374c      	adds	r7, #76	@ 0x4c
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	3b9aca00 	.word	0x3b9aca00
 80057e8:	080159c4 	.word	0x080159c4
 80057ec:	24004eb0 	.word	0x24004eb0
 80057f0:	240058b0 	.word	0x240058b0

080057f4 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08a      	sub	sp, #40	@ 0x28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80057fc:	4b2e      	ldr	r3, [pc, #184]	@ (80058b8 <I2C4_MspInit+0xc4>)
 80057fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005802:	4a2d      	ldr	r2, [pc, #180]	@ (80058b8 <I2C4_MspInit+0xc4>)
 8005804:	f043 0320 	orr.w	r3, r3, #32
 8005808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800580c:	4b2a      	ldr	r3, [pc, #168]	@ (80058b8 <I2C4_MspInit+0xc4>)
 800580e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800581a:	4b27      	ldr	r3, [pc, #156]	@ (80058b8 <I2C4_MspInit+0xc4>)
 800581c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005820:	4a25      	ldr	r2, [pc, #148]	@ (80058b8 <I2C4_MspInit+0xc4>)
 8005822:	f043 0320 	orr.w	r3, r3, #32
 8005826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800582a:	4b23      	ldr	r3, [pc, #140]	@ (80058b8 <I2C4_MspInit+0xc4>)
 800582c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8005838:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800583c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800583e:	2312      	movs	r3, #18
 8005840:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005842:	2301      	movs	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8005846:	2302      	movs	r3, #2
 8005848:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800584a:	2304      	movs	r3, #4
 800584c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800584e:	f107 0314 	add.w	r3, r7, #20
 8005852:	4619      	mov	r1, r3
 8005854:	4819      	ldr	r0, [pc, #100]	@ (80058bc <I2C4_MspInit+0xc8>)
 8005856:	f005 f81f 	bl	800a898 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800585a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005860:	2304      	movs	r3, #4
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005864:	f107 0314 	add.w	r3, r7, #20
 8005868:	4619      	mov	r1, r3
 800586a:	4814      	ldr	r0, [pc, #80]	@ (80058bc <I2C4_MspInit+0xc8>)
 800586c:	f005 f814 	bl	800a898 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8005870:	4b11      	ldr	r3, [pc, #68]	@ (80058b8 <I2C4_MspInit+0xc4>)
 8005872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005876:	4a10      	ldr	r2, [pc, #64]	@ (80058b8 <I2C4_MspInit+0xc4>)
 8005878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800587c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005880:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <I2C4_MspInit+0xc4>)
 8005882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800588e:	4b0a      	ldr	r3, [pc, #40]	@ (80058b8 <I2C4_MspInit+0xc4>)
 8005890:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005894:	4a08      	ldr	r2, [pc, #32]	@ (80058b8 <I2C4_MspInit+0xc4>)
 8005896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800589a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800589e:	4b06      	ldr	r3, [pc, #24]	@ (80058b8 <I2C4_MspInit+0xc4>)
 80058a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058a4:	4a04      	ldr	r2, [pc, #16]	@ (80058b8 <I2C4_MspInit+0xc4>)
 80058a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 80058ae:	bf00      	nop
 80058b0:	3728      	adds	r7, #40	@ 0x28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	58024400 	.word	0x58024400
 80058bc:	58021400 	.word	0x58021400

080058c0 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80058c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80058cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4619      	mov	r1, r3
 80058d2:	480b      	ldr	r0, [pc, #44]	@ (8005900 <I2C4_MspDeInit+0x40>)
 80058d4:	f005 f988 	bl	800abe8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80058d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4619      	mov	r1, r3
 80058e2:	4807      	ldr	r0, [pc, #28]	@ (8005900 <I2C4_MspDeInit+0x40>)
 80058e4:	f005 f980 	bl	800abe8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80058e8:	4b06      	ldr	r3, [pc, #24]	@ (8005904 <I2C4_MspDeInit+0x44>)
 80058ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80058ee:	4a05      	ldr	r2, [pc, #20]	@ (8005904 <I2C4_MspDeInit+0x44>)
 80058f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 80058f8:	bf00      	nop
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	58021400 	.word	0x58021400
 8005904:	58024400 	.word	0x58024400

08005908 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af04      	add	r7, sp, #16
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	4603      	mov	r3, r0
 8005912:	81fb      	strh	r3, [r7, #14]
 8005914:	460b      	mov	r3, r1
 8005916:	81bb      	strh	r3, [r7, #12]
 8005918:	4613      	mov	r3, r2
 800591a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800591c:	8978      	ldrh	r0, [r7, #10]
 800591e:	89ba      	ldrh	r2, [r7, #12]
 8005920:	89f9      	ldrh	r1, [r7, #14]
 8005922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005926:	9302      	str	r3, [sp, #8]
 8005928:	8b3b      	ldrh	r3, [r7, #24]
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	4603      	mov	r3, r0
 8005932:	4807      	ldr	r0, [pc, #28]	@ (8005950 <I2C4_WriteReg+0x48>)
 8005934:	f005 fb48 	bl	800afc8 <HAL_I2C_Mem_Write>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800593e:	2300      	movs	r3, #0
 8005940:	e001      	b.n	8005946 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005942:	f06f 0307 	mvn.w	r3, #7
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	24004e60 	.word	0x24004e60

08005954 <I2C4_ReadReg>:
  * @param  MemAddSize Size of internal memory address
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af04      	add	r7, sp, #16
 800595a:	607b      	str	r3, [r7, #4]
 800595c:	4603      	mov	r3, r0
 800595e:	81fb      	strh	r3, [r7, #14]
 8005960:	460b      	mov	r3, r1
 8005962:	81bb      	strh	r3, [r7, #12]
 8005964:	4613      	mov	r3, r2
 8005966:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005968:	8978      	ldrh	r0, [r7, #10]
 800596a:	89ba      	ldrh	r2, [r7, #12]
 800596c:	89f9      	ldrh	r1, [r7, #14]
 800596e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005972:	9302      	str	r3, [sp, #8]
 8005974:	8b3b      	ldrh	r3, [r7, #24]
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	4603      	mov	r3, r0
 800597e:	4807      	ldr	r0, [pc, #28]	@ (800599c <I2C4_ReadReg+0x48>)
 8005980:	f005 fc36 	bl	800b1f0 <HAL_I2C_Mem_Read>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800598a:	2300      	movs	r3, #0
 800598c:	e001      	b.n	8005992 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800598e:	f06f 0307 	mvn.w	r3, #7
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	24004e60 	.word	0x24004e60

080059a0 <BSP_LCD_Init>:
  * @param  Orientation LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */

int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 80059aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80059b4:	2201      	movs	r2, #1
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f805 	bl	80059c8 <BSP_LCD_InitEx>
 80059be:	4603      	mov	r3, r0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b09e      	sub	sp, #120	@ 0x78
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	677b      	str	r3, [r7, #116]	@ 0x74
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t io_comp_ctx;
  MX_LTDC_LayerConfig_t config;
  BSP_OSPI_RAM_Init_t ospi_init;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d802      	bhi.n	80059e6 <BSP_LCD_InitEx+0x1e>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <BSP_LCD_InitEx+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059e6:	f06f 0301 	mvn.w	r3, #1
 80059ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80059ec:	e0cf      	b.n	8005b8e <BSP_LCD_InitEx+0x1c6>
  }
  else
  {
    switch(PixelFormat)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d105      	bne.n	8005a00 <BSP_LCD_InitEx+0x38>
    {
    case LCD_PIXEL_FORMAT_RGB565:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80059f4:	2302      	movs	r3, #2
 80059f6:	673b      	str	r3, [r7, #112]	@ 0x70
      PixelFormatFactor = 2U;
 80059f8:	4b67      	ldr	r3, [pc, #412]	@ (8005b98 <BSP_LCD_InitEx+0x1d0>)
 80059fa:	2202      	movs	r2, #2
 80059fc:	601a      	str	r2, [r3, #0]
      break;
 80059fe:	e005      	b.n	8005a0c <BSP_LCD_InitEx+0x44>
    case LCD_PIXEL_FORMAT_RGB888:
    default:
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 8005a00:	2300      	movs	r3, #0
 8005a02:	673b      	str	r3, [r7, #112]	@ 0x70
      PixelFormatFactor = 4U;
 8005a04:	4b64      	ldr	r3, [pc, #400]	@ (8005b98 <BSP_LCD_InitEx+0x1d0>)
 8005a06:	2204      	movs	r2, #4
 8005a08:	601a      	str	r2, [r3, #0]
      break;
 8005a0a:	bf00      	nop
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 8005a0c:	4963      	ldr	r1, [pc, #396]	@ (8005b9c <BSP_LCD_InitEx+0x1d4>)
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	4413      	add	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	440b      	add	r3, r1
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8005a20:	495e      	ldr	r1, [pc, #376]	@ (8005b9c <BSP_LCD_InitEx+0x1d4>)
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4613      	mov	r3, r2
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	4413      	add	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	440b      	add	r3, r1
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8005a32:	495a      	ldr	r1, [pc, #360]	@ (8005b9c <BSP_LCD_InitEx+0x1d4>)
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	440b      	add	r3, r1
 8005a40:	3304      	adds	r3, #4
 8005a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a46:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8005a48:	4b55      	ldr	r3, [pc, #340]	@ (8005ba0 <BSP_LCD_InitEx+0x1d8>)
 8005a4a:	4a56      	ldr	r2, [pc, #344]	@ (8005ba4 <BSP_LCD_InitEx+0x1dc>)
 8005a4c:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8005a4e:	4b56      	ldr	r3, [pc, #344]	@ (8005ba8 <BSP_LCD_InitEx+0x1e0>)
 8005a50:	4a56      	ldr	r2, [pc, #344]	@ (8005bac <BSP_LCD_InitEx+0x1e4>)
 8005a52:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8005a54:	4852      	ldr	r0, [pc, #328]	@ (8005ba0 <BSP_LCD_InitEx+0x1d8>)
 8005a56:	f000 fd85 	bl	8006564 <LTDC_MspInit>
#endif
    /* De-assert display enable LCD_DISP_EN pin */
    HAL_GPIO_WritePin(LCD_DISP_EN_GPIO_PORT, LCD_DISP_EN_PIN, GPIO_PIN_RESET);
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005a60:	4853      	ldr	r0, [pc, #332]	@ (8005bb0 <BSP_LCD_InitEx+0x1e8>)
 8005a62:	f005 f9c3 	bl	800adec <HAL_GPIO_WritePin>

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_CTRL_GPIO_PORT, LCD_DISP_CTRL_PIN, GPIO_PIN_SET);
 8005a66:	2201      	movs	r2, #1
 8005a68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a6c:	4851      	ldr	r0, [pc, #324]	@ (8005bb4 <BSP_LCD_InitEx+0x1ec>)
 8005a6e:	f005 f9bd 	bl	800adec <HAL_GPIO_WritePin>

    /* Assert backlight LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005a72:	2201      	movs	r2, #1
 8005a74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a78:	484f      	ldr	r0, [pc, #316]	@ (8005bb8 <BSP_LCD_InitEx+0x1f0>)
 8005a7a:	f005 f9b7 	bl	800adec <HAL_GPIO_WritePin>

    DMA2D_MspInit(&hlcd_dma2d);
 8005a7e:	484a      	ldr	r0, [pc, #296]	@ (8005ba8 <BSP_LCD_InitEx+0x1e0>)
 8005a80:	f000 fec2 	bl	8006808 <DMA2D_MspInit>

    io_comp_ctx.Init    = BSP_I2C4_Init;
 8005a84:	4b4d      	ldr	r3, [pc, #308]	@ (8005bbc <BSP_LCD_InitEx+0x1f4>)
 8005a86:	633b      	str	r3, [r7, #48]	@ 0x30
    io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8005a88:	4b4d      	ldr	r3, [pc, #308]	@ (8005bc0 <BSP_LCD_InitEx+0x1f8>)
 8005a8a:	643b      	str	r3, [r7, #64]	@ 0x40
    io_comp_ctx.Address = TS_I2C_ADDRESS;
 8005a8c:	2370      	movs	r3, #112	@ 0x70
 8005a8e:	873b      	strh	r3, [r7, #56]	@ 0x38
    if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8005a90:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005a94:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fa fc38 	bl	8000310 <FT5336_RegisterBusIO>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da03      	bge.n	8005aae <BSP_LCD_InitEx+0xe6>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005aa6:	f06f 0306 	mvn.w	r3, #6
 8005aaa:	677b      	str	r3, [r7, #116]	@ 0x74
 8005aac:	e02a      	b.n	8005b04 <BSP_LCD_InitEx+0x13c>
    }
    else if(FT5336_ReadID(&ts_comp_obj, &id) < 0)
 8005aae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005ab2:	4944      	ldr	r1, [pc, #272]	@ (8005bc4 <BSP_LCD_InitEx+0x1fc>)
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fa fc6d 	bl	8000394 <FT5336_ReadID>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da03      	bge.n	8005ac8 <BSP_LCD_InitEx+0x100>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ac0:	f06f 0306 	mvn.w	r3, #6
 8005ac4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ac6:	e01d      	b.n	8005b04 <BSP_LCD_InitEx+0x13c>
    }
    else if(id != FT5336_ID)
 8005ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc4 <BSP_LCD_InitEx+0x1fc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b51      	cmp	r3, #81	@ 0x51
 8005ace:	d003      	beq.n	8005ad8 <BSP_LCD_InitEx+0x110>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ad0:	f06f 0306 	mvn.w	r3, #6
 8005ad4:	677b      	str	r3, [r7, #116]	@ 0x74
 8005ad6:	e015      	b.n	8005b04 <BSP_LCD_InitEx+0x13c>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8005ad8:	4831      	ldr	r0, [pc, #196]	@ (8005ba0 <BSP_LCD_InitEx+0x1d8>)
 8005ada:	f000 f903 	bl	8005ce4 <MX_LTDC_ClockConfig>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <BSP_LCD_InitEx+0x124>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005ae4:	f06f 0303 	mvn.w	r3, #3
 8005ae8:	677b      	str	r3, [r7, #116]	@ 0x74
 8005aea:	e00b      	b.n	8005b04 <BSP_LCD_InitEx+0x13c>
    }
    else
    {
      if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8005aec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005af0:	6839      	ldr	r1, [r7, #0]
 8005af2:	482b      	ldr	r0, [pc, #172]	@ (8005ba0 <BSP_LCD_InitEx+0x1d8>)
 8005af4:	f000 f868 	bl	8005bc8 <MX_LTDC_Init>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <BSP_LCD_InitEx+0x13c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005afe:	f06f 0303 	mvn.w	r3, #3
 8005b02:	677b      	str	r3, [r7, #116]	@ 0x74
      }
    }

    if(ret == BSP_ERROR_NONE)
 8005b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d141      	bne.n	8005b8e <BSP_LCD_InitEx+0x1c6>
    {
      /* Before configuring LTDC layer, ensure OSPI is initialized */
      ospi_init.LatencyType = BSP_OSPI_RAM_FIXED_LATENCY;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	753b      	strb	r3, [r7, #20]
      ospi_init.BurstType   = BSP_OSPI_RAM_LINEAR_BURST;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	757b      	strb	r3, [r7, #21]
      ospi_init.BurstLength = BSP_OSPI_RAM_BURST_32_BYTES;
 8005b12:	2303      	movs	r3, #3
 8005b14:	75bb      	strb	r3, [r7, #22]
      if(BSP_OSPI_RAM_Init(0, &ospi_init) != BSP_ERROR_NONE)
 8005b16:	f107 0314 	add.w	r3, r7, #20
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f000 fea1 	bl	8006864 <BSP_OSPI_RAM_Init>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <BSP_LCD_InitEx+0x168>
      {
        ret = BSP_ERROR_NO_INIT;
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b2e:	e02e      	b.n	8005b8e <BSP_LCD_InitEx+0x1c6>
      }
      else if(BSP_OSPI_RAM_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8005b30:	2000      	movs	r0, #0
 8005b32:	f000 ff8b 	bl	8006a4c <BSP_OSPI_RAM_EnableMemoryMappedMode>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <BSP_LCD_InitEx+0x17c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005b3c:	f06f 0303 	mvn.w	r3, #3
 8005b40:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b42:	e024      	b.n	8005b8e <BSP_LCD_InitEx+0x1c6>
      }
      else
      {
        /* Configure default LTDC Layer 0. This configuration can be override by calling
        BSP_LCD_ConfigLayer() at application level */
        config.X0          = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
        config.X1          = Width;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	61fb      	str	r3, [r7, #28]
        config.Y0          = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	623b      	str	r3, [r7, #32]
        config.Y1          = Height;
 8005b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
        config.PixelFormat = ltdc_pixel_format;
 8005b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b58:	62bb      	str	r3, [r7, #40]	@ 0x28
        config.Address     = LCD_LAYER_0_ADDRESS;
 8005b5a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8005b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8005b60:	f107 0318 	add.w	r3, r7, #24
 8005b64:	461a      	mov	r2, r3
 8005b66:	2100      	movs	r1, #0
 8005b68:	480d      	ldr	r0, [pc, #52]	@ (8005ba0 <BSP_LCD_InitEx+0x1d8>)
 8005b6a:	f000 f879 	bl	8005c60 <MX_LTDC_ConfigLayer>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <BSP_LCD_InitEx+0x1b2>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005b74:	f06f 0303 	mvn.w	r3, #3
 8005b78:	677b      	str	r3, [r7, #116]	@ 0x74
        }
        /* By default the reload is activated and executed immediately */
        Lcd_Ctx[Instance].ReloadEnable = 1U;
 8005b7a:	4908      	ldr	r1, [pc, #32]	@ (8005b9c <BSP_LCD_InitEx+0x1d4>)
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	440b      	add	r3, r1
 8005b88:	3314      	adds	r3, #20
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
      }
    }
   }

  return ret;
 8005b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3778      	adds	r7, #120	@ 0x78
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	240058b4 	.word	0x240058b4
 8005b9c:	240059c8 	.word	0x240059c8
 8005ba0:	24005920 	.word	0x24005920
 8005ba4:	50001000 	.word	0x50001000
 8005ba8:	240058b8 	.word	0x240058b8
 8005bac:	52001000 	.word	0x52001000
 8005bb0:	58021000 	.word	0x58021000
 8005bb4:	58020c00 	.word	0x58020c00
 8005bb8:	58021800 	.word	0x58021800
 8005bbc:	0800509d 	.word	0x0800509d
 8005bc0:	080051e5 	.word	0x080051e5
 8005bc4:	240059e0 	.word	0x240059e0

08005bc8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a21      	ldr	r2, [pc, #132]	@ (8005c5c <MX_LTDC_Init+0x94>)
 8005bd8:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2228      	movs	r2, #40	@ 0x28
 8005bf6:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP-11) - 1);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	222a      	movs	r2, #42	@ 0x2a
 8005bfc:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f103 0235 	add.w	r2, r3, #53	@ 0x35
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP-11) + RK043FN48H_HFP - 1;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f103 024a 	add.w	r2, r3, #74	@ 0x4a
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2209      	movs	r2, #9
 8005c16:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	220b      	movs	r2, #11
 8005c1c:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f103 020b 	add.w	r2, r3, #11
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f103 020d 	add.w	r2, r3, #13
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	631a      	str	r2, [r3, #48]	@ 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	22ff      	movs	r2, #255	@ 0xff
 8005c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	22ff      	movs	r2, #255	@ 0xff
 8005c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	22ff      	movs	r2, #255	@ 0xff
 8005c46:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f005 feb8 	bl	800b9c0 <HAL_LTDC_Init>
 8005c50:	4603      	mov	r3, r0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	50001000 	.word	0x50001000

08005c60 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b092      	sub	sp, #72	@ 0x48
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 8005c8a:	23ff      	movs	r3, #255	@ 0xff
 8005c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005c92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005c96:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005c98:	2307      	movs	r3, #7
 8005c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8005ccc:	f107 0314 	add.w	r3, r7, #20
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f005 ff4d 	bl	800bb74 <HAL_LTDC_ConfigLayer>
 8005cda:	4603      	mov	r3, r0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3748      	adds	r7, #72	@ 0x48
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b0b0      	sub	sp, #192	@ 0xc0
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005cec:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005cf0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8005cf2:	2305      	movs	r3, #5
 8005cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8005cf6:	23a0      	movs	r3, #160	@ 0xa0
 8005cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8005cfe:	2302      	movs	r3, #2
 8005d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8005d02:	2353      	movs	r3, #83	@ 0x53
 8005d04:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL1VCOWIDE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL1VCIRANGE_0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	647b      	str	r3, [r7, #68]	@ 0x44


  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005d12:	f107 030c 	add.w	r3, r7, #12
 8005d16:	4618      	mov	r0, r3
 8005d18:	f007 fd00 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 8005d1c:	4603      	mov	r3, r0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	37c0      	adds	r7, #192	@ 0xc0
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d3c:	f06f 0301 	mvn.w	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e00a      	b.n	8005d5a <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8005d44:	4908      	ldr	r1, [pc, #32]	@ (8005d68 <BSP_LCD_GetPixelFormat+0x40>)
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	440b      	add	r3, r1
 8005d52:	330c      	adds	r3, #12
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	240059c8 	.word	0x240059c8

08005d6c <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005d80:	f06f 0301 	mvn.w	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e009      	b.n	8005d9c <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 8005d88:	4908      	ldr	r1, [pc, #32]	@ (8005dac <BSP_LCD_SetActiveLayer+0x40>)
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	4413      	add	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	440b      	add	r3, r1
 8005d96:	3308      	adds	r3, #8
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	240059c8 	.word	0x240059c8

08005db0 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005dc4:	f06f 0301 	mvn.w	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	e009      	b.n	8005de0 <BSP_LCD_GetXSize+0x30>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 8005dcc:	4908      	ldr	r1, [pc, #32]	@ (8005df0 <BSP_LCD_GetXSize+0x40>)
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	4413      	add	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	440b      	add	r3, r1
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005de0:	68fb      	ldr	r3, [r7, #12]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	240059c8 	.word	0x240059c8

08005df4 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e08:	f06f 0301 	mvn.w	r3, #1
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	e00a      	b.n	8005e26 <BSP_LCD_GetYSize+0x32>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8005e10:	4908      	ldr	r1, [pc, #32]	@ (8005e34 <BSP_LCD_GetYSize+0x40>)
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4613      	mov	r3, r2
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	4413      	add	r3, r2
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	440b      	add	r3, r1
 8005e1e:	3304      	adds	r3, #4
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	240059c8 	.word	0x240059c8

08005e38 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pbmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08e      	sub	sp, #56	@ 0x38
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	330a      	adds	r3, #10
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	330b      	adds	r3, #11
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	021b      	lsls	r3, r3, #8
 8005e5a:	441a      	add	r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	041b      	lsls	r3, r3, #16
 8005e64:	441a      	add	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	330d      	adds	r3, #13
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	4413      	add	r3, r2
 8005e70:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	3312      	adds	r3, #18
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	3313      	adds	r3, #19
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	441a      	add	r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	3314      	adds	r3, #20
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	041b      	lsls	r3, r3, #16
 8005e8c:	441a      	add	r2, r3
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	3315      	adds	r3, #21
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	061b      	lsls	r3, r3, #24
 8005e96:	4413      	add	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	3316      	adds	r3, #22
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	3317      	adds	r3, #23
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	441a      	add	r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	3318      	adds	r3, #24
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	041b      	lsls	r3, r3, #16
 8005eb4:	441a      	add	r2, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	3319      	adds	r3, #25
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	4413      	add	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	331c      	adds	r3, #28
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	331d      	adds	r3, #29
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	4413      	add	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*PixelFormatFactor);
 8005ed6:	4938      	ldr	r1, [pc, #224]	@ (8005fb8 <BSP_LCD_DrawBitmap+0x180>)
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4613      	mov	r3, r2
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	4413      	add	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a34      	ldr	r2, [pc, #208]	@ (8005fbc <BSP_LCD_DrawBitmap+0x184>)
 8005eea:	2134      	movs	r1, #52	@ 0x34
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	335c      	adds	r3, #92	@ 0x5c
 8005ef4:	6819      	ldr	r1, [r3, #0]
 8005ef6:	4830      	ldr	r0, [pc, #192]	@ (8005fb8 <BSP_LCD_DrawBitmap+0x180>)
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4613      	mov	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4403      	add	r3, r0
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	fb03 f202 	mul.w	r2, r3, r2
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4413      	add	r3, r2
 8005f10:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc0 <BSP_LCD_DrawBitmap+0x188>)
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
 8005f18:	440b      	add	r3, r1
 8005f1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	3b20      	subs	r3, #32
 8005f20:	2b07      	cmp	r3, #7
 8005f22:	d802      	bhi.n	8005f2a <BSP_LCD_DrawBitmap+0xf2>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8005f24:	2300      	movs	r3, #0
 8005f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f28:	e008      	b.n	8005f3c <BSP_LCD_DrawBitmap+0x104>
  }
  else if ((bit_pixel/8U) == 2U)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3b10      	subs	r3, #16
 8005f2e:	2b07      	cmp	r3, #7
 8005f30:	d802      	bhi.n	8005f38 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8005f32:	2302      	movs	r3, #2
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f36:	e001      	b.n	8005f3c <BSP_LCD_DrawBitmap+0x104>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	fb02 f303 	mul.w	r3, r2, r3
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	08d2      	lsrs	r2, r2, #3
 8005f4a:	fb03 f202 	mul.w	r2, r3, r2
 8005f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f50:	4413      	add	r3, r2
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	4413      	add	r3, r2
 8005f56:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f5c:	e022      	b.n	8005fa4 <BSP_LCD_DrawBitmap+0x16c>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8005f5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	6a39      	ldr	r1, [r7, #32]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 faa3 	bl	80064b4 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * PixelFormatFactor);
 8005f6e:	4912      	ldr	r1, [pc, #72]	@ (8005fb8 <BSP_LCD_DrawBitmap+0x180>)
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4613      	mov	r3, r2
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	4413      	add	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	440b      	add	r3, r1
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a10      	ldr	r2, [pc, #64]	@ (8005fc0 <BSP_LCD_DrawBitmap+0x188>)
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	fb02 f303 	mul.w	r3, r2, r3
 8005f86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f88:	4413      	add	r3, r2
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	08db      	lsrs	r3, r3, #3
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	425b      	negs	r3, r3
 8005f98:	6a3a      	ldr	r2, [r7, #32]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8005f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d3d8      	bcc.n	8005f5e <BSP_LCD_DrawBitmap+0x126>
  }

  return ret;
 8005fac:	69fb      	ldr	r3, [r7, #28]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3730      	adds	r7, #48	@ 0x30
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	240059c8 	.word	0x240059c8
 8005fbc:	24005920 	.word	0x24005920
 8005fc0:	240058b4 	.word	0x240058b4

08005fc4 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
    }
    pData += PixelFormatFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	e02e      	b.n	8006036 <BSP_LCD_FillRGBRect+0x72>
  {
    for(j = 0; j < Width; j++)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	e024      	b.n	8006028 <BSP_LCD_FillRGBRect+0x64>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	431a      	orrs	r2, r3
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	3302      	adds	r3, #2
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	3303      	adds	r3, #3
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	061b      	lsls	r3, r3, #24
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	18d1      	adds	r1, r2, r3
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	441a      	add	r2, r3
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f976 	bl	8006304 <BSP_LCD_WritePixel>
      pData += PixelFormatFactor;
 8006018:	4b0b      	ldr	r3, [pc, #44]	@ (8006048 <BSP_LCD_FillRGBRect+0x84>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	4413      	add	r3, r2
 8006020:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	3301      	adds	r3, #1
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602c:	429a      	cmp	r2, r3
 800602e:	d3d6      	bcc.n	8005fde <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	3301      	adds	r3, #1
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603a:	429a      	cmp	r2, r3
 800603c:	d3cc      	bcc.n	8005fd8 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3720      	adds	r7, #32
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	240058b4 	.word	0x240058b4

0800604c <BSP_LCD_DrawHLine>:
  * @param  Xpos  X position
  * @param  Ypos  Y position
  * @param  Length  Line length
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	@ 0x28
 8006050:	af04      	add	r7, sp, #16
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (PixelFormatFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800605a:	491e      	ldr	r1, [pc, #120]	@ (80060d4 <BSP_LCD_DrawHLine+0x88>)
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4613      	mov	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	4413      	add	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	440b      	add	r3, r1
 8006068:	3308      	adds	r3, #8
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <BSP_LCD_DrawHLine+0x8c>)
 800606e:	2134      	movs	r1, #52	@ 0x34
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	4413      	add	r3, r2
 8006076:	335c      	adds	r3, #92	@ 0x5c
 8006078:	6819      	ldr	r1, [r3, #0]
 800607a:	4816      	ldr	r0, [pc, #88]	@ (80060d4 <BSP_LCD_DrawHLine+0x88>)
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4613      	mov	r3, r2
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	4413      	add	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4403      	add	r3, r0
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	fb03 f202 	mul.w	r2, r3, r2
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4413      	add	r3, r2
 8006094:	4a11      	ldr	r2, [pc, #68]	@ (80060dc <BSP_LCD_DrawHLine+0x90>)
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	fb02 f303 	mul.w	r3, r2, r3
 800609c:	440b      	add	r3, r1
 800609e:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80060a0:	490c      	ldr	r1, [pc, #48]	@ (80060d4 <BSP_LCD_DrawHLine+0x88>)
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4613      	mov	r3, r2
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	4413      	add	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	440b      	add	r3, r1
 80060ae:	3308      	adds	r3, #8
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	9302      	str	r3, [sp, #8]
 80060b8:	2300      	movs	r3, #0
 80060ba:	9301      	str	r3, [sp, #4]
 80060bc:	2301      	movs	r3, #1
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f988 	bl	80063d8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	240059c8 	.word	0x240059c8
 80060d8:	24005920 	.word	0x24005920
 80060dc:	240058b4 	.word	0x240058b4

080060e0 <BSP_LCD_DrawVLine>:
  * @param  Xpos  X position
  * @param  Ypos  Y position
  * @param  Length  Line length
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80060e0:	b590      	push	{r4, r7, lr}
 80060e2:	b08b      	sub	sp, #44	@ 0x2c
 80060e4:	af04      	add	r7, sp, #16
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80060ee:	4922      	ldr	r1, [pc, #136]	@ (8006178 <BSP_LCD_DrawVLine+0x98>)
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4613      	mov	r3, r2
 80060f4:	005b      	lsls	r3, r3, #1
 80060f6:	4413      	add	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	440b      	add	r3, r1
 80060fc:	3308      	adds	r3, #8
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1e      	ldr	r2, [pc, #120]	@ (800617c <BSP_LCD_DrawVLine+0x9c>)
 8006102:	2134      	movs	r1, #52	@ 0x34
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	4413      	add	r3, r2
 800610a:	335c      	adds	r3, #92	@ 0x5c
 800610c:	6819      	ldr	r1, [r3, #0]
 800610e:	481a      	ldr	r0, [pc, #104]	@ (8006178 <BSP_LCD_DrawVLine+0x98>)
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4613      	mov	r3, r2
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4413      	add	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4403      	add	r3, r0
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	fb03 f202 	mul.w	r2, r3, r2
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4413      	add	r3, r2
 8006128:	4a15      	ldr	r2, [pc, #84]	@ (8006180 <BSP_LCD_DrawVLine+0xa0>)
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	fb02 f303 	mul.w	r3, r2, r3
 8006130:	440b      	add	r3, r1
 8006132:	617b      	str	r3, [r7, #20]

  /* Write line */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8006134:	4910      	ldr	r1, [pc, #64]	@ (8006178 <BSP_LCD_DrawVLine+0x98>)
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4613      	mov	r3, r2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4413      	add	r3, r2
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	440b      	add	r3, r1
 8006142:	3308      	adds	r3, #8
 8006144:	6819      	ldr	r1, [r3, #0]
 8006146:	6978      	ldr	r0, [r7, #20]
 8006148:	4c0b      	ldr	r4, [pc, #44]	@ (8006178 <BSP_LCD_DrawVLine+0x98>)
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4613      	mov	r3, r2
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	4413      	add	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4423      	add	r3, r4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3b01      	subs	r3, #1
 800615a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800615c:	9202      	str	r2, [sp, #8]
 800615e:	9301      	str	r3, [sp, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	2301      	movs	r3, #1
 8006166:	4602      	mov	r2, r0
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f935 	bl	80063d8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	371c      	adds	r7, #28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd90      	pop	{r4, r7, pc}
 8006178:	240059c8 	.word	0x240059c8
 800617c:	24005920 	.word	0x24005920
 8006180:	240058b4 	.word	0x240058b4

08006184 <BSP_LCD_FillRect>:
  * @param  Ypos Y position
  * @param  Width Rectangle width
  * @param  Height Rectangle height
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b08b      	sub	sp, #44	@ 0x2c
 8006188:	af04      	add	r7, sp, #16
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (PixelFormatFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8006192:	4923      	ldr	r1, [pc, #140]	@ (8006220 <BSP_LCD_FillRect+0x9c>)
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4613      	mov	r3, r2
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4413      	add	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	440b      	add	r3, r1
 80061a0:	3308      	adds	r3, #8
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006224 <BSP_LCD_FillRect+0xa0>)
 80061a6:	2134      	movs	r1, #52	@ 0x34
 80061a8:	fb01 f303 	mul.w	r3, r1, r3
 80061ac:	4413      	add	r3, r2
 80061ae:	335c      	adds	r3, #92	@ 0x5c
 80061b0:	6819      	ldr	r1, [r3, #0]
 80061b2:	481b      	ldr	r0, [pc, #108]	@ (8006220 <BSP_LCD_FillRect+0x9c>)
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4613      	mov	r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	4413      	add	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4403      	add	r3, r0
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	fb03 f202 	mul.w	r2, r3, r2
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4413      	add	r3, r2
 80061cc:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <BSP_LCD_FillRect+0xa4>)
 80061ce:	6812      	ldr	r2, [r2, #0]
 80061d0:	fb02 f303 	mul.w	r3, r2, r3
 80061d4:	440b      	add	r3, r1
 80061d6:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, Lcd_Ctx[Instance].ActiveLayer, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 80061d8:	4911      	ldr	r1, [pc, #68]	@ (8006220 <BSP_LCD_FillRect+0x9c>)
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4613      	mov	r3, r2
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	4413      	add	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	440b      	add	r3, r1
 80061e6:	3308      	adds	r3, #8
 80061e8:	6819      	ldr	r1, [r3, #0]
 80061ea:	6978      	ldr	r0, [r7, #20]
 80061ec:	4c0c      	ldr	r4, [pc, #48]	@ (8006220 <BSP_LCD_FillRect+0x9c>)
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	4613      	mov	r3, r2
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	4413      	add	r3, r2
 80061f6:	00db      	lsls	r3, r3, #3
 80061f8:	4423      	add	r3, r4
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006202:	9202      	str	r2, [sp, #8]
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	4602      	mov	r2, r0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 f8e2 	bl	80063d8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd90      	pop	{r4, r7, pc}
 800621e:	bf00      	nop
 8006220:	240059c8 	.word	0x240059c8
 8006224:	24005920 	.word	0x24005920
 8006228:	240058b4 	.word	0x240058b4

0800622c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval Value  pixel color
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800623a:	4930      	ldr	r1, [pc, #192]	@ (80062fc <BSP_LCD_ReadPixel+0xd0>)
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	440b      	add	r3, r1
 8006248:	3308      	adds	r3, #8
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a2c      	ldr	r2, [pc, #176]	@ (8006300 <BSP_LCD_ReadPixel+0xd4>)
 800624e:	2134      	movs	r1, #52	@ 0x34
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	4413      	add	r3, r2
 8006256:	3348      	adds	r3, #72	@ 0x48
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d122      	bne.n	80062a4 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800625e:	4927      	ldr	r1, [pc, #156]	@ (80062fc <BSP_LCD_ReadPixel+0xd0>)
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4613      	mov	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4413      	add	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	440b      	add	r3, r1
 800626c:	3308      	adds	r3, #8
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a23      	ldr	r2, [pc, #140]	@ (8006300 <BSP_LCD_ReadPixel+0xd4>)
 8006272:	2134      	movs	r1, #52	@ 0x34
 8006274:	fb01 f303 	mul.w	r3, r1, r3
 8006278:	4413      	add	r3, r2
 800627a:	335c      	adds	r3, #92	@ 0x5c
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	481f      	ldr	r0, [pc, #124]	@ (80062fc <BSP_LCD_ReadPixel+0xd0>)
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4613      	mov	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	4403      	add	r3, r0
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	fb03 f202 	mul.w	r2, r3, r2
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	e023      	b.n	80062ec <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80062a4:	4915      	ldr	r1, [pc, #84]	@ (80062fc <BSP_LCD_ReadPixel+0xd0>)
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4613      	mov	r3, r2
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	4413      	add	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	440b      	add	r3, r1
 80062b2:	3308      	adds	r3, #8
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a12      	ldr	r2, [pc, #72]	@ (8006300 <BSP_LCD_ReadPixel+0xd4>)
 80062b8:	2134      	movs	r1, #52	@ 0x34
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	4413      	add	r3, r2
 80062c0:	335c      	adds	r3, #92	@ 0x5c
 80062c2:	6819      	ldr	r1, [r3, #0]
 80062c4:	480d      	ldr	r0, [pc, #52]	@ (80062fc <BSP_LCD_ReadPixel+0xd0>)
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4613      	mov	r3, r2
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	4413      	add	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4403      	add	r3, r0
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	fb03 f202 	mul.w	r2, r3, r2
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4413      	add	r3, r2
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	440b      	add	r3, r1
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	240059c8 	.word	0x240059c8
 8006300:	24005920 	.word	0x24005920

08006304 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006312:	492f      	ldr	r1, [pc, #188]	@ (80063d0 <BSP_LCD_WritePixel+0xcc>)
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	440b      	add	r3, r1
 8006320:	3308      	adds	r3, #8
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2b      	ldr	r2, [pc, #172]	@ (80063d4 <BSP_LCD_WritePixel+0xd0>)
 8006326:	2134      	movs	r1, #52	@ 0x34
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	4413      	add	r3, r2
 800632e:	3348      	adds	r3, #72	@ 0x48
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d122      	bne.n	800637c <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8006336:	4926      	ldr	r1, [pc, #152]	@ (80063d0 <BSP_LCD_WritePixel+0xcc>)
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4613      	mov	r3, r2
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	4413      	add	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	440b      	add	r3, r1
 8006344:	3308      	adds	r3, #8
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a22      	ldr	r2, [pc, #136]	@ (80063d4 <BSP_LCD_WritePixel+0xd0>)
 800634a:	2134      	movs	r1, #52	@ 0x34
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	4413      	add	r3, r2
 8006352:	335c      	adds	r3, #92	@ 0x5c
 8006354:	6819      	ldr	r1, [r3, #0]
 8006356:	481e      	ldr	r0, [pc, #120]	@ (80063d0 <BSP_LCD_WritePixel+0xcc>)
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4613      	mov	r3, r2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	4413      	add	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	4403      	add	r3, r0
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	fb03 f202 	mul.w	r2, r3, r2
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	461a      	mov	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	e021      	b.n	80063c0 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800637c:	4914      	ldr	r1, [pc, #80]	@ (80063d0 <BSP_LCD_WritePixel+0xcc>)
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	3308      	adds	r3, #8
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a11      	ldr	r2, [pc, #68]	@ (80063d4 <BSP_LCD_WritePixel+0xd0>)
 8006390:	2134      	movs	r1, #52	@ 0x34
 8006392:	fb01 f303 	mul.w	r3, r1, r3
 8006396:	4413      	add	r3, r2
 8006398:	335c      	adds	r3, #92	@ 0x5c
 800639a:	6819      	ldr	r1, [r3, #0]
 800639c:	480c      	ldr	r0, [pc, #48]	@ (80063d0 <BSP_LCD_WritePixel+0xcc>)
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4613      	mov	r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	4403      	add	r3, r0
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	fb03 f202 	mul.w	r2, r3, r2
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4413      	add	r3, r2
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	440b      	add	r3, r1
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	b292      	uxth	r2, r2
 80063be:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	240059c8 	.word	0x240059c8
 80063d4:	24005920 	.word	0x24005920

080063d8 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t LayerIndex, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af02      	add	r7, sp, #8
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 80063ea:	492f      	ldr	r1, [pc, #188]	@ (80064a8 <LL_FillBuffer+0xd0>)
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4613      	mov	r3, r2
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	4413      	add	r3, r2
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	440b      	add	r3, r1
 80063f8:	330c      	adds	r3, #12
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d129      	bne.n	8006454 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8006400:	2302      	movs	r3, #2
 8006402:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	0adb      	lsrs	r3, r3, #11
 8006408:	f003 021f 	and.w	r2, r3, #31
 800640c:	4613      	mov	r3, r2
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	4413      	add	r3, r2
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	3317      	adds	r3, #23
 8006418:	099b      	lsrs	r3, r3, #6
 800641a:	0419      	lsls	r1, r3, #16
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006424:	4613      	mov	r3, r2
 8006426:	01db      	lsls	r3, r3, #7
 8006428:	4413      	add	r3, r2
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	4413      	add	r3, r2
 800642e:	3321      	adds	r3, #33	@ 0x21
 8006430:	099b      	lsrs	r3, r3, #6
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	4319      	orrs	r1, r3
 8006436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006438:	f003 021f 	and.w	r2, r3, #31
 800643c:	4613      	mov	r3, r2
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	4413      	add	r3, r2
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	3317      	adds	r3, #23
 8006448:	099b      	lsrs	r3, r3, #6
 800644a:	430b      	orrs	r3, r1
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006450:	613b      	str	r3, [r7, #16]
    break;
 8006452:	e002      	b.n	800645a <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
    break;
 8006458:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800645a:	4b14      	ldr	r3, [pc, #80]	@ (80064ac <LL_FillBuffer+0xd4>)
 800645c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006460:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8006462:	4a12      	ldr	r2, [pc, #72]	@ (80064ac <LL_FillBuffer+0xd4>)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8006468:	4a10      	ldr	r2, [pc, #64]	@ (80064ac <LL_FillBuffer+0xd4>)
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 800646e:	4b0f      	ldr	r3, [pc, #60]	@ (80064ac <LL_FillBuffer+0xd4>)
 8006470:	4a0f      	ldr	r2, [pc, #60]	@ (80064b0 <LL_FillBuffer+0xd8>)
 8006472:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8006474:	480d      	ldr	r0, [pc, #52]	@ (80064ac <LL_FillBuffer+0xd4>)
 8006476:	f003 fed5 	bl	800a224 <HAL_DMA2D_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10e      	bne.n	800649e <LL_FillBuffer+0xc6>
  {
    if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6939      	ldr	r1, [r7, #16]
 800648a:	4808      	ldr	r0, [pc, #32]	@ (80064ac <LL_FillBuffer+0xd4>)
 800648c:	f003 ff38 	bl	800a300 <HAL_DMA2D_Start>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <LL_FillBuffer+0xc6>
    {
      /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8006496:	2132      	movs	r1, #50	@ 0x32
 8006498:	4804      	ldr	r0, [pc, #16]	@ (80064ac <LL_FillBuffer+0xd4>)
 800649a:	f003 ff5c 	bl	800a356 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 800649e:	bf00      	nop
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	240059c8 	.word	0x240059c8
 80064ac:	240058b8 	.word	0x240058b8
 80064b0:	52001000 	.word	0x52001000

080064b4 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 80064c2:	4925      	ldr	r1, [pc, #148]	@ (8006558 <LL_ConvertLineToRGB+0xa4>)
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	440b      	add	r3, r1
 80064d0:	330c      	adds	r3, #12
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d102      	bne.n	80064de <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80064d8:	2302      	movs	r3, #2
 80064da:	617b      	str	r3, [r7, #20]
    break;
 80064dc:	e002      	b.n	80064e4 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
    break;
 80064e2:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 80064e4:	4b1d      	ldr	r3, [pc, #116]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 80064e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80064ea:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80064ec:	4a1b      	ldr	r2, [pc, #108]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 80064f2:	4b1a      	ldr	r3, [pc, #104]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80064f8:	4b18      	ldr	r3, [pc, #96]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 80064fe:	4b17      	ldr	r3, [pc, #92]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 8006500:	22ff      	movs	r2, #255	@ 0xff
 8006502:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8006504:	4a15      	ldr	r2, [pc, #84]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800650a:	4b14      	ldr	r3, [pc, #80]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 800650c:	2200      	movs	r2, #0
 800650e:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8006510:	4b12      	ldr	r3, [pc, #72]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 8006512:	4a13      	ldr	r2, [pc, #76]	@ (8006560 <LL_ConvertLineToRGB+0xac>)
 8006514:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8006516:	4811      	ldr	r0, [pc, #68]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 8006518:	f003 fe84 	bl	800a224 <HAL_DMA2D_Init>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d115      	bne.n	800654e <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8006522:	2101      	movs	r1, #1
 8006524:	480d      	ldr	r0, [pc, #52]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 8006526:	f003 ffff 	bl	800a528 <HAL_DMA2D_ConfigLayer>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10e      	bne.n	800654e <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8006530:	68b9      	ldr	r1, [r7, #8]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	2301      	movs	r3, #1
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	4808      	ldr	r0, [pc, #32]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 800653c:	f003 fee0 	bl	800a300 <HAL_DMA2D_Start>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8006546:	2119      	movs	r1, #25
 8006548:	4804      	ldr	r0, [pc, #16]	@ (800655c <LL_ConvertLineToRGB+0xa8>)
 800654a:	f003 ff04 	bl	800a356 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800654e:	bf00      	nop
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	240059c8 	.word	0x240059c8
 800655c:	240058b8 	.word	0x240058b8
 8006560:	52001000 	.word	0x52001000

08006564 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b092      	sub	sp, #72	@ 0x48
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a9c      	ldr	r2, [pc, #624]	@ (80067e4 <LTDC_MspInit+0x280>)
 8006572:	4293      	cmp	r3, r2
 8006574:	f040 80e1 	bne.w	800673a <LTDC_MspInit+0x1d6>
  {
    /* Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006578:	4b9b      	ldr	r3, [pc, #620]	@ (80067e8 <LTDC_MspInit+0x284>)
 800657a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800657e:	4a9a      	ldr	r2, [pc, #616]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006580:	f043 0308 	orr.w	r3, r3, #8
 8006584:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006588:	4b97      	ldr	r3, [pc, #604]	@ (80067e8 <LTDC_MspInit+0x284>)
 800658a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	633b      	str	r3, [r7, #48]	@ 0x30
 8006594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006596:	4b94      	ldr	r3, [pc, #592]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800659c:	4a92      	ldr	r2, [pc, #584]	@ (80067e8 <LTDC_MspInit+0x284>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065a6:	4b90      	ldr	r3, [pc, #576]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065b4:	4b8c      	ldr	r3, [pc, #560]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ba:	4a8b      	ldr	r2, [pc, #556]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065bc:	f043 0302 	orr.w	r3, r3, #2
 80065c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065c4:	4b88      	ldr	r3, [pc, #544]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065d2:	4b85      	ldr	r3, [pc, #532]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065d8:	4a83      	ldr	r2, [pc, #524]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065da:	f043 0304 	orr.w	r3, r3, #4
 80065de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80065e2:	4b81      	ldr	r3, [pc, #516]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065f0:	4b7d      	ldr	r3, [pc, #500]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065f6:	4a7c      	ldr	r2, [pc, #496]	@ (80067e8 <LTDC_MspInit+0x284>)
 80065f8:	f043 0308 	orr.w	r3, r3, #8
 80065fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006600:	4b79      	ldr	r3, [pc, #484]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	623b      	str	r3, [r7, #32]
 800660c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800660e:	4b76      	ldr	r3, [pc, #472]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006614:	4a74      	ldr	r2, [pc, #464]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006616:	f043 0310 	orr.w	r3, r3, #16
 800661a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800661e:	4b72      	ldr	r3, [pc, #456]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	61fb      	str	r3, [r7, #28]
 800662a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800662c:	4b6e      	ldr	r3, [pc, #440]	@ (80067e8 <LTDC_MspInit+0x284>)
 800662e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006632:	4a6d      	ldr	r2, [pc, #436]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006638:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800663c:	4b6a      	ldr	r3, [pc, #424]	@ (80067e8 <LTDC_MspInit+0x284>)
 800663e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800664a:	4b67      	ldr	r3, [pc, #412]	@ (80067e8 <LTDC_MspInit+0x284>)
 800664c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006650:	4a65      	ldr	r2, [pc, #404]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800665a:	4b63      	ldr	r3, [pc, #396]	@ (80067e8 <LTDC_MspInit+0x284>)
 800665c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	697b      	ldr	r3, [r7, #20]

    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006668:	2302      	movs	r3, #2
 800666a:	63bb      	str	r3, [r7, #56]	@ 0x38
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800666c:	2300      	movs	r3, #0
 800666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006670:	2302      	movs	r3, #2
 8006672:	643b      	str	r3, [r7, #64]	@ 0x40
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006674:	230e      	movs	r3, #14
 8006676:	647b      	str	r3, [r7, #68]	@ 0x44

    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6;
 8006678:	2358      	movs	r3, #88	@ 0x58
 800667a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800667c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006680:	4619      	mov	r1, r3
 8006682:	485a      	ldr	r0, [pc, #360]	@ (80067ec <LTDC_MspInit+0x288>)
 8006684:	f004 f908 	bl	800a898 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9;
 8006688:	f240 3303 	movw	r3, #771	@ 0x303
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800668e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006692:	4619      	mov	r1, r3
 8006694:	4856      	ldr	r0, [pc, #344]	@ (80067f0 <LTDC_MspInit+0x28c>)
 8006696:	f004 f8ff 	bl	800a898 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7;
 800669a:	23c0      	movs	r3, #192	@ 0xc0
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800669e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066a2:	4619      	mov	r1, r3
 80066a4:	4853      	ldr	r0, [pc, #332]	@ (80067f4 <LTDC_MspInit+0x290>)
 80066a6:	f004 f8f7 	bl	800a898 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_6;
 80066aa:	2349      	movs	r3, #73	@ 0x49
 80066ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80066ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066b2:	4619      	mov	r1, r3
 80066b4:	4850      	ldr	r0, [pc, #320]	@ (80067f8 <LTDC_MspInit+0x294>)
 80066b6:	f004 f8ef 	bl	800a898 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
 80066ba:	f649 0303 	movw	r3, #38915	@ 0x9803
 80066be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80066c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066c4:	4619      	mov	r1, r3
 80066c6:	484d      	ldr	r0, [pc, #308]	@ (80067fc <LTDC_MspInit+0x298>)
 80066c8:	f004 f8e6 	bl	800a898 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_14;
 80066cc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80066d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80066d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066d6:	4619      	mov	r1, r3
 80066d8:	4849      	ldr	r0, [pc, #292]	@ (8006800 <LTDC_MspInit+0x29c>)
 80066da:	f004 f8dd 	bl	800a898 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_15;
 80066de:	f648 7308 	movw	r3, #36616	@ 0x8f08
 80066e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80066e4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066e8:	4619      	mov	r1, r3
 80066ea:	4846      	ldr	r0, [pc, #280]	@ (8006804 <LTDC_MspInit+0x2a0>)
 80066ec:	f004 f8d4 	bl	800a898 <HAL_GPIO_Init>

    gpio_init_structure.Alternate = GPIO_AF13_LTDC;
 80066f0:	230d      	movs	r3, #13
 80066f2:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Pin       = GPIO_PIN_8;
 80066f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80066fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066fe:	4619      	mov	r1, r3
 8006700:	483a      	ldr	r0, [pc, #232]	@ (80067ec <LTDC_MspInit+0x288>)
 8006702:	f004 f8c9 	bl	800a898 <HAL_GPIO_Init>

    gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006706:	2309      	movs	r3, #9
 8006708:	647b      	str	r3, [r7, #68]	@ 0x44
    gpio_init_structure.Pin       = GPIO_PIN_4;
 800670a:	2310      	movs	r3, #16
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800670e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006712:	4619      	mov	r1, r3
 8006714:	483b      	ldr	r0, [pc, #236]	@ (8006804 <LTDC_MspInit+0x2a0>)
 8006716:	f004 f8bf 	bl	800a898 <HAL_GPIO_Init>

    /** Toggle Sw reset of LTDC peripheral */
    __HAL_RCC_LTDC_FORCE_RESET();
 800671a:	4b33      	ldr	r3, [pc, #204]	@ (80067e8 <LTDC_MspInit+0x284>)
 800671c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006720:	4a31      	ldr	r2, [pc, #196]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006722:	f043 0308 	orr.w	r3, r3, #8
 8006726:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800672a:	4b2f      	ldr	r3, [pc, #188]	@ (80067e8 <LTDC_MspInit+0x284>)
 800672c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006730:	4a2d      	ldr	r2, [pc, #180]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006732:	f023 0308 	bic.w	r3, r3, #8
 8006736:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

  }

  LCD_DISP_CTRL_GPIO_CLK_ENABLE();
 800673a:	4b2b      	ldr	r3, [pc, #172]	@ (80067e8 <LTDC_MspInit+0x284>)
 800673c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006740:	4a29      	ldr	r2, [pc, #164]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006742:	f043 0308 	orr.w	r3, r3, #8
 8006746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800674a:	4b27      	ldr	r3, [pc, #156]	@ (80067e8 <LTDC_MspInit+0x284>)
 800674c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	693b      	ldr	r3, [r7, #16]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006758:	4b23      	ldr	r3, [pc, #140]	@ (80067e8 <LTDC_MspInit+0x284>)
 800675a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800675e:	4a22      	ldr	r2, [pc, #136]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006768:	4b1f      	ldr	r3, [pc, #124]	@ (80067e8 <LTDC_MspInit+0x284>)
 800676a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800676e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
  LCD_DISP_EN_GPIO_CLK_ENABLE();
 8006776:	4b1c      	ldr	r3, [pc, #112]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800677c:	4a1a      	ldr	r2, [pc, #104]	@ (80067e8 <LTDC_MspInit+0x284>)
 800677e:	f043 0310 	orr.w	r3, r3, #16
 8006782:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006786:	4b18      	ldr	r3, [pc, #96]	@ (80067e8 <LTDC_MspInit+0x284>)
 8006788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	68bb      	ldr	r3, [r7, #8]

  /* LCD_DISP_EN GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_EN_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006798:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800679a:	2301      	movs	r3, #1
 800679c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_EN_GPIO_PORT, &gpio_init_structure);
 800679e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80067a2:	4619      	mov	r1, r3
 80067a4:	4815      	ldr	r0, [pc, #84]	@ (80067fc <LTDC_MspInit+0x298>)
 80067a6:	f004 f877 	bl	800a898 <HAL_GPIO_Init>

  /* LCD_DISP_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_CTRL_PIN;     /* LCD_DISP pin has to be manually controlled */
 80067aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80067b0:	2301      	movs	r3, #1
 80067b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_CTRL_GPIO_PORT, &gpio_init_structure);
 80067b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80067b8:	4619      	mov	r1, r3
 80067ba:	480f      	ldr	r0, [pc, #60]	@ (80067f8 <LTDC_MspInit+0x294>)
 80067bc:	f004 f86c 	bl	800a898 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80067c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80067c6:	2301      	movs	r3, #1
 80067c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80067ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80067ce:	4619      	mov	r1, r3
 80067d0:	480b      	ldr	r0, [pc, #44]	@ (8006800 <LTDC_MspInit+0x29c>)
 80067d2:	f004 f861 	bl	800a898 <HAL_GPIO_Init>

  HAL_Delay(40);
 80067d6:	2028      	movs	r0, #40	@ 0x28
 80067d8:	f000 fd72 	bl	80072c0 <HAL_Delay>
}
 80067dc:	bf00      	nop
 80067de:	3748      	adds	r7, #72	@ 0x48
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	50001000 	.word	0x50001000
 80067e8:	58024400 	.word	0x58024400
 80067ec:	58020000 	.word	0x58020000
 80067f0:	58020400 	.word	0x58020400
 80067f4:	58020800 	.word	0x58020800
 80067f8:	58020c00 	.word	0x58020c00
 80067fc:	58021000 	.word	0x58021000
 8006800:	58021800 	.word	0x58021800
 8006804:	58021c00 	.word	0x58021c00

08006808 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a11      	ldr	r2, [pc, #68]	@ (800685c <DMA2D_MspInit+0x54>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d11a      	bne.n	8006850 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800681a:	4b11      	ldr	r3, [pc, #68]	@ (8006860 <DMA2D_MspInit+0x58>)
 800681c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006820:	4a0f      	ldr	r2, [pc, #60]	@ (8006860 <DMA2D_MspInit+0x58>)
 8006822:	f043 0310 	orr.w	r3, r3, #16
 8006826:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800682a:	4b0d      	ldr	r3, [pc, #52]	@ (8006860 <DMA2D_MspInit+0x58>)
 800682c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8006838:	4b09      	ldr	r3, [pc, #36]	@ (8006860 <DMA2D_MspInit+0x58>)
 800683a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800683c:	4a08      	ldr	r2, [pc, #32]	@ (8006860 <DMA2D_MspInit+0x58>)
 800683e:	f043 0310 	orr.w	r3, r3, #16
 8006842:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8006844:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <DMA2D_MspInit+0x58>)
 8006846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006848:	4a05      	ldr	r2, [pc, #20]	@ (8006860 <DMA2D_MspInit+0x58>)
 800684a:	f023 0310 	bic.w	r3, r3, #16
 800684e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	52001000 	.word	0x52001000
 8006860:	58024400 	.word	0x58024400

08006864 <BSP_OSPI_RAM_Init>:
  * @param  Instance   OSPI Instance
  * @param  Init       OSPI Init structure
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_Init(uint32_t Instance, BSP_OSPI_RAM_Init_t *Init)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	@ 0x28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  MX_OSPI_InitTypeDef ospi_init;

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <BSP_OSPI_RAM_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006874:	f06f 0301 	mvn.w	r3, #1
 8006878:	627b      	str	r3, [r7, #36]	@ 0x24
 800687a:	e060      	b.n	800693e <BSP_OSPI_RAM_Init+0xda>
  }
  else
  {
    /* Check if the instance is already initialized */
    if (Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 800687c:	4a32      	ldr	r2, [pc, #200]	@ (8006948 <BSP_OSPI_RAM_Init+0xe4>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d158      	bne.n	800693a <BSP_OSPI_RAM_Init+0xd6>
    {
#if (USE_HAL_OSPI_REGISTER_CALLBACKS == 0)
      /* Msp OSPI initialization */
      OSPI_RAM_MspInit(&hospi_ram[Instance]);
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	4613      	mov	r3, r2
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	4413      	add	r3, r2
 8006890:	015b      	lsls	r3, r3, #5
 8006892:	4a2e      	ldr	r2, [pc, #184]	@ (800694c <BSP_OSPI_RAM_Init+0xe8>)
 8006894:	4413      	add	r3, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fa64 	bl	8006d64 <OSPI_RAM_MspInit>
        }
      }
#endif /* USE_HAL_OSPI_REGISTER_CALLBACKS */

      /* Fill config structure */
      ospi_init.ClockPrescaler = 2U; /* OctoSPI clock = 200 MHz / ClockPrescaler = 100 MHz */
 800689c:	2302      	movs	r3, #2
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80068a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	fa93 f3a3 	rbit	r3, r3
 80068ac:	61bb      	str	r3, [r7, #24]
  return result;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <BSP_OSPI_RAM_Init+0x58>
    return 32U;
 80068b8:	2320      	movs	r3, #32
 80068ba:	e003      	b.n	80068c4 <BSP_OSPI_RAM_Init+0x60>
  return __builtin_clz(value);
 80068bc:	6a3b      	ldr	r3, [r7, #32]
 80068be:	fab3 f383 	clz	r3, r3
 80068c2:	b2db      	uxtb	r3, r3
      ospi_init.MemorySize     = (uint32_t)POSITION_VAL(S70KL1281_RAM_SIZE);
 80068c4:	60bb      	str	r3, [r7, #8]
      ospi_init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80068c6:	2300      	movs	r3, #0
 80068c8:	613b      	str	r3, [r7, #16]

      /* STM32 OSPI Clock configuration */
      if (MX_OSPI_ClockConfig(&hospi_ram[Instance]) != HAL_OK)
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4613      	mov	r3, r2
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	4413      	add	r3, r2
 80068d2:	015b      	lsls	r3, r3, #5
 80068d4:	4a1d      	ldr	r2, [pc, #116]	@ (800694c <BSP_OSPI_RAM_Init+0xe8>)
 80068d6:	4413      	add	r3, r2
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f839 	bl	8006950 <MX_OSPI_ClockConfig>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <BSP_OSPI_RAM_Init+0x88>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80068e4:	f06f 0303 	mvn.w	r3, #3
 80068e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ea:	e028      	b.n	800693e <BSP_OSPI_RAM_Init+0xda>
      }
      /* STM32 OSPI interface initialization */
      else if (MX_OSPI_RAM_Init(&hospi_ram[Instance], &ospi_init) != HAL_OK)
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	4413      	add	r3, r2
 80068f4:	015b      	lsls	r3, r3, #5
 80068f6:	4a15      	ldr	r2, [pc, #84]	@ (800694c <BSP_OSPI_RAM_Init+0xe8>)
 80068f8:	4413      	add	r3, r2
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	4611      	mov	r1, r2
 8006900:	4618      	mov	r0, r3
 8006902:	f000 f849 	bl	8006998 <MX_OSPI_RAM_Init>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <BSP_OSPI_RAM_Init+0xb0>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800690c:	f06f 0303 	mvn.w	r3, #3
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
 8006912:	e014      	b.n	800693e <BSP_OSPI_RAM_Init+0xda>
      }
      /* Configure the memory */
      else if (BSP_OSPI_RAM_ConfigHyperRAM(Instance, Init->LatencyType, Init->BurstType, Init->BurstLength) != BSP_ERROR_NONE)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	7819      	ldrb	r1, [r3, #0]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	785a      	ldrb	r2, [r3, #1]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	789b      	ldrb	r3, [r3, #2]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8bf 	bl	8006aa4 <BSP_OSPI_RAM_ConfigHyperRAM>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <BSP_OSPI_RAM_Init+0xd0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800692c:	f06f 0304 	mvn.w	r3, #4
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
 8006932:	e004      	b.n	800693e <BSP_OSPI_RAM_Init+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8006934:	2300      	movs	r3, #0
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
 8006938:	e001      	b.n	800693e <BSP_OSPI_RAM_Init+0xda>
      }
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800693a:	2300      	movs	r3, #0
 800693c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  /* Return BSP status */
  return ret;
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006940:	4618      	mov	r0, r3
 8006942:	3728      	adds	r7, #40	@ 0x28
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	24000460 	.word	0x24000460
 800694c:	240059e4 	.word	0x240059e4

08006950 <MX_OSPI_ClockConfig>:
  * @param  hospi  OSPI Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_OSPI_ClockConfig(OSPI_HandleTypeDef *hospi)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b0b0      	sub	sp, #192	@ 0xc0
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* OSPI clock configuration */
  /* PLL2_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL2_VCO Output = PLL2_VCO Input * PLL3N = 400 Mhz */
  /* PLLOSPICLK = PLL2_VCO Output/PLL2R = 400/2 = 200 Mhz */
  /* OSPI clock frequency = PLLOSPICLK = 200 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8006958:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800695c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 800695e:	2320      	movs	r3, #32
 8006960:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8006962:	2305      	movs	r3, #5
 8006964:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8006966:	2350      	movs	r3, #80	@ 0x50
 8006968:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 800696a:	2305      	movs	r3, #5
 800696c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800696e:	2302      	movs	r3, #2
 8006970:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8006972:	2302      	movs	r3, #2
 8006974:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800697a:	2300      	movs	r3, #0
 800697c:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 800697e:	2300      	movs	r3, #0
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8006982:	f107 030c 	add.w	r3, r7, #12
 8006986:	4618      	mov	r0, r3
 8006988:	f006 fec8 	bl	800d71c <HAL_RCCEx_PeriphCLKConfig>
 800698c:	4603      	mov	r3, r0
}
 800698e:	4618      	mov	r0, r3
 8006990:	37c0      	adds	r7, #192	@ 0xc0
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <MX_OSPI_RAM_Init>:
  * @param  hospi          OSPI handle
  * @param  Init           OSPI config structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_OSPI_RAM_Init(OSPI_HandleTypeDef *hospi, MX_OSPI_InitTypeDef *Init)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  HAL_StatusTypeDef status;

  hospi->Instance = OCTOSPI2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a28      	ldr	r2, [pc, #160]	@ (8006a48 <MX_OSPI_RAM_Init+0xb0>)
 80069a6:	601a      	str	r2, [r3, #0]
  HAL_OSPI_DeInit(hospi);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f005 fc71 	bl	800c290 <HAL_OSPI_DeInit>

  hospi->Init.FifoThreshold         = 4;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2204      	movs	r2, #4
 80069b2:	605a      	str	r2, [r3, #4]
  hospi->Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	609a      	str	r2, [r3, #8]
  hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_HYPERBUS;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80069c0:	60da      	str	r2, [r3, #12]
  hospi->Init.DeviceSize            = Init->MemorySize;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	611a      	str	r2, [r3, #16]
  hospi->Init.ChipSelectHighTime    = 4;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2204      	movs	r2, #4
 80069ce:	615a      	str	r2, [r3, #20]
  hospi->Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	619a      	str	r2, [r3, #24]
  hospi->Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	61da      	str	r2, [r3, #28]
  hospi->Init.WrapSize              = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	621a      	str	r2, [r3, #32]
  hospi->Init.ClockPrescaler        = Init->ClockPrescaler;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi->Init.SampleShifting        = Init->SampleShifting;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi->Init.Refresh               = 400; /*4us @100MHz*/
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8006a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hospi->Init.ChipSelectBoundary    = 23;  /* memory die boundary 2^23=8MBs*/
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2217      	movs	r2, #23
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30

  status = HAL_OSPI_Init(hospi);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f005 fb77 	bl	800c0fc <HAL_OSPI_Init>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	77fb      	strb	r3, [r7, #31]
  if (status == HAL_OK)
 8006a12:	7ffb      	ldrb	r3, [r7, #31]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d111      	bne.n	8006a3c <MX_OSPI_RAM_Init+0xa4>
  {
    sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	60fb      	str	r3, [r7, #12]
    sHyperbusCfg.AccessTime       = DEFAULT_INITIAL_LATENCY;
 8006a1c:	2306      	movs	r3, #6
 8006a1e:	613b      	str	r3, [r7, #16]
    sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	617b      	str	r3, [r7, #20]
    sHyperbusCfg.LatencyMode      = HAL_OSPI_FIXED_LATENCY;
 8006a24:	2301      	movs	r3, #1
 8006a26:	61bb      	str	r3, [r7, #24]

    status = HAL_OSPI_HyperbusCfg(hospi, &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006a28:	f107 030c 	add.w	r3, r7, #12
 8006a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f005 fc5d 	bl	800c2f2 <HAL_OSPI_HyperbusCfg>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8006a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	5200a000 	.word	0x5200a000

08006a4c <BSP_OSPI_RAM_EnableMemoryMappedMode>:
  * @brief  Configure the OSPI in memory-mapped mode
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_EnableMemoryMappedMode(uint32_t Instance)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a5e:	f06f 0301 	mvn.w	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e015      	b.n	8006a92 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x46>
  }
  else
  {
    if(S70KL1281_EnableMemoryMappedMode(&hospi_ram[Instance]) != S70KL1281_OK)
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	4413      	add	r3, r2
 8006a6e:	015b      	lsls	r3, r3, #5
 8006a70:	4a0a      	ldr	r2, [pc, #40]	@ (8006a9c <BSP_OSPI_RAM_EnableMemoryMappedMode+0x50>)
 8006a72:	4413      	add	r3, r2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7f9 fd04 	bl	8000482 <S70KL1281_EnableMemoryMappedMode>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x3c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a80:	f06f 0304 	mvn.w	r3, #4
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	e004      	b.n	8006a92 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x46>
    }
    else /* Update OSPI context if all operations are well done */
    {
      Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8006a88:	4a05      	ldr	r2, [pc, #20]	@ (8006aa0 <BSP_OSPI_RAM_EnableMemoryMappedMode+0x54>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2102      	movs	r1, #2
 8006a8e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }
  }

  /* Return BSP status */
  return ret;
 8006a92:	68fb      	ldr	r3, [r7, #12]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	240059e4 	.word	0x240059e4
 8006aa0:	24000460 	.word	0x24000460

08006aa4 <BSP_OSPI_RAM_ConfigHyperRAM>:
  * @param  BurstType   OSPI burst type
  * @param  BurstLength OSPI burst length
  * @retval BSP status
  */
int32_t BSP_OSPI_RAM_ConfigHyperRAM(uint32_t Instance, BSP_OSPI_RAM_Latency_t Latency, BSP_OSPI_RAM_BurstType_t BurstType, BSP_OSPI_RAM_BurstLength_t BurstLength)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b08a      	sub	sp, #40	@ 0x28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	4608      	mov	r0, r1
 8006aae:	4611      	mov	r1, r2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	70fb      	strb	r3, [r7, #3]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	70bb      	strb	r3, [r7, #2]
 8006aba:	4613      	mov	r3, r2
 8006abc:	707b      	strb	r3, [r7, #1]
  OSPI_HyperbusCfgTypeDef sHyperbusCfg;
  int32_t ret = BSP_ERROR_NONE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t initial_latency, latency_mode;
  uint16_t reg;

  /* Check if the instance is supported */
  if(Instance >= OSPI_RAM_INSTANCES_NUMBER)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <BSP_OSPI_RAM_ConfigHyperRAM+0x2c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006ac8:	f06f 0301 	mvn.w	r3, #1
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ace:	e13f      	b.n	8006d50 <BSP_OSPI_RAM_ConfigHyperRAM+0x2ac>
  }
  else
  {
    /* Check if MMP mode locked ***********************************************/
    if(Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8006ad0:	4aa2      	ldr	r2, [pc, #648]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d103      	bne.n	8006ae4 <BSP_OSPI_RAM_ConfigHyperRAM+0x40>
    {
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8006adc:	f06f 0319 	mvn.w	r3, #25
 8006ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae2:	e135      	b.n	8006d50 <BSP_OSPI_RAM_ConfigHyperRAM+0x2ac>
    }
    else if((Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE) ||
 8006ae4:	4a9d      	ldr	r2, [pc, #628]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d018      	beq.n	8006b22 <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].LatencyType   != Latency)              ||
 8006af0:	4a9a      	ldr	r2, [pc, #616]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4413      	add	r3, r2
 8006af8:	785b      	ldrb	r3, [r3, #1]
    else if((Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE) ||
 8006afa:	78fa      	ldrb	r2, [r7, #3]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d110      	bne.n	8006b22 <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].BurstType     != BurstType)            ||
 8006b00:	4a96      	ldr	r2, [pc, #600]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	4413      	add	r3, r2
 8006b08:	789b      	ldrb	r3, [r3, #2]
            (Ospi_Ram_Ctx[Instance].LatencyType   != Latency)              ||
 8006b0a:	78ba      	ldrb	r2, [r7, #2]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d108      	bne.n	8006b22 <BSP_OSPI_RAM_ConfigHyperRAM+0x7e>
            (Ospi_Ram_Ctx[Instance].BurstLength   != BurstLength))
 8006b10:	4a92      	ldr	r2, [pc, #584]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	78db      	ldrb	r3, [r3, #3]
            (Ospi_Ram_Ctx[Instance].BurstType     != BurstType)            ||
 8006b1a:	787a      	ldrb	r2, [r7, #1]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	f000 8117 	beq.w	8006d50 <BSP_OSPI_RAM_ConfigHyperRAM+0x2ac>
    {
      /* Reading the configuration of the HyperRAM ****************************/
      if(S70KL1281_ReadCfgReg0(&hospi_ram[Instance], &reg) != S70KL1281_OK)
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4413      	add	r3, r2
 8006b2a:	015b      	lsls	r3, r3, #5
 8006b2c:	4a8c      	ldr	r2, [pc, #560]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006b2e:	4413      	add	r3, r2
 8006b30:	f107 020a 	add.w	r2, r7, #10
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7f9 fcd4 	bl	80004e4 <S70KL1281_ReadCfgReg0>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <BSP_OSPI_RAM_ConfigHyperRAM+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b42:	f06f 0304 	mvn.w	r3, #4
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b48:	e0e8      	b.n	8006d1c <BSP_OSPI_RAM_ConfigHyperRAM+0x278>
      }
      else
      {
        /* Configure the HyperRAM memory **************************************/
        /* Initial latency */
        if(Ospi_Ram_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8006b4a:	4a84      	ldr	r2, [pc, #528]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d104      	bne.n	8006b60 <BSP_OSPI_RAM_ConfigHyperRAM+0xbc>
        {
          initial_latency = DEFAULT_INITIAL_LATENCY;
 8006b56:	2306      	movs	r3, #6
 8006b58:	623b      	str	r3, [r7, #32]
          latency_mode = HAL_OSPI_FIXED_LATENCY;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
 8006b5e:	e010      	b.n	8006b82 <BSP_OSPI_RAM_ConfigHyperRAM+0xde>
        }
        else
        {
          initial_latency = (uint32_t) ((Ospi_Ram_Ctx[Instance].LatencyType == BSP_OSPI_RAM_FIXED_LATENCY) ? \
 8006b60:	4a7e      	ldr	r2, [pc, #504]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4413      	add	r3, r2
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <BSP_OSPI_RAM_ConfigHyperRAM+0xce>
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e000      	b.n	8006b74 <BSP_OSPI_RAM_ConfigHyperRAM+0xd0>
 8006b72:	2306      	movs	r3, #6
 8006b74:	623b      	str	r3, [r7, #32]
                             OPTIMAL_FIXED_INITIAL_LATENCY : OPTIMAL_VARIABLE_INITIAL_LATENCY);
          latency_mode = (uint32_t) Ospi_Ram_Ctx[Instance].LatencyType;
 8006b76:	4a79      	ldr	r2, [pc, #484]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	61fb      	str	r3, [r7, #28]
        }

        /* Latency Type */
        if (Latency == BSP_OSPI_RAM_FIXED_LATENCY)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d10f      	bne.n	8006ba8 <BSP_OSPI_RAM_ConfigHyperRAM+0x104>
        {
          SET_BIT(reg, S70KL1281_CR0_FLE);
 8006b88:	897b      	ldrh	r3, [r7, #10]
 8006b8a:	f043 0308 	orr.w	r3, r3, #8
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	817b      	strh	r3, [r7, #10]
          MODIFY_REG(reg, (uint16_t) S70KL1281_CR0_IL, (uint16_t) OPTIMAL_FIXED_INITIAL_LATENCY_REG_VAL);
 8006b92:	897b      	ldrh	r3, [r7, #10]
 8006b94:	b21b      	sxth	r3, r3
 8006b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b9a:	b21b      	sxth	r3, r3
 8006b9c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8006ba0:	b21b      	sxth	r3, r3
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	817b      	strh	r3, [r7, #10]
 8006ba6:	e00e      	b.n	8006bc6 <BSP_OSPI_RAM_ConfigHyperRAM+0x122>
        }
        else
        {
          CLEAR_BIT(reg, S70KL1281_CR0_FLE);
 8006ba8:	897b      	ldrh	r3, [r7, #10]
 8006baa:	f023 0308 	bic.w	r3, r3, #8
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	817b      	strh	r3, [r7, #10]
          MODIFY_REG(reg, (uint16_t) S70KL1281_CR0_IL, (uint16_t) OPTIMAL_VARIABLE_INITIAL_LATENCY_REG_VAL);
 8006bb2:	897b      	ldrh	r3, [r7, #10]
 8006bb4:	b21b      	sxth	r3, r3
 8006bb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bba:	b21b      	sxth	r3, r3
 8006bbc:	f043 0310 	orr.w	r3, r3, #16
 8006bc0:	b21b      	sxth	r3, r3
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	817b      	strh	r3, [r7, #10]
        }

        /* Burst type */
        if (BurstType == BSP_OSPI_RAM_HYBRID_BURST)
 8006bc6:	78bb      	ldrb	r3, [r7, #2]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d105      	bne.n	8006bd8 <BSP_OSPI_RAM_ConfigHyperRAM+0x134>
        {
          CLEAR_BIT(reg, S70KL1281_CR0_HBE);
 8006bcc:	897b      	ldrh	r3, [r7, #10]
 8006bce:	f023 0304 	bic.w	r3, r3, #4
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	817b      	strh	r3, [r7, #10]
 8006bd6:	e004      	b.n	8006be2 <BSP_OSPI_RAM_ConfigHyperRAM+0x13e>
        }
        else
        {
          SET_BIT(reg, S70KL1281_CR0_HBE);
 8006bd8:	897b      	ldrh	r3, [r7, #10]
 8006bda:	f043 0304 	orr.w	r3, r3, #4
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	817b      	strh	r3, [r7, #10]
        }

        /* Burst length */
        MODIFY_REG(reg, (uint16_t) S70KL1281_CR0_BLENGTH, (uint16_t) BurstLength);
 8006be2:	897b      	ldrh	r3, [r7, #10]
 8006be4:	b21b      	sxth	r3, r3
 8006be6:	f023 0303 	bic.w	r3, r3, #3
 8006bea:	b21a      	sxth	r2, r3
 8006bec:	787b      	ldrb	r3, [r7, #1]
 8006bee:	b21b      	sxth	r3, r3
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	b21b      	sxth	r3, r3
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	817b      	strh	r3, [r7, #10]

        if (S70KL1281_WriteCfgReg0(&hospi_ram[Instance], reg, latency_mode, initial_latency) != S70KL1281_OK)
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4413      	add	r3, r2
 8006c00:	015b      	lsls	r3, r3, #5
 8006c02:	4a57      	ldr	r2, [pc, #348]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c04:	1898      	adds	r0, r3, r2
 8006c06:	8979      	ldrh	r1, [r7, #10]
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	f7f9 fc9c 	bl	8000548 <S70KL1281_WriteCfgReg0>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <BSP_OSPI_RAM_ConfigHyperRAM+0x17a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c16:	f06f 0304 	mvn.w	r3, #4
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1c:	e07e      	b.n	8006d1c <BSP_OSPI_RAM_ConfigHyperRAM+0x278>
        }
        else
        {
          /* Configure the peripheral *****************************************/
          if (BurstType == BSP_OSPI_RAM_HYBRID_BURST)
 8006c1e:	78bb      	ldrb	r3, [r7, #2]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d13d      	bne.n	8006ca0 <BSP_OSPI_RAM_ConfigHyperRAM+0x1fc>
          {
            switch (BurstLength)
 8006c24:	787b      	ldrb	r3, [r7, #1]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d845      	bhi.n	8006cb6 <BSP_OSPI_RAM_ConfigHyperRAM+0x212>
 8006c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c30 <BSP_OSPI_RAM_ConfigHyperRAM+0x18c>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c71 	.word	0x08006c71
 8006c38:	08006c41 	.word	0x08006c41
 8006c3c:	08006c59 	.word	0x08006c59
            {
            case BSP_OSPI_RAM_BURST_16_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_16_BYTES;
 8006c40:	4947      	ldr	r1, [pc, #284]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	4613      	mov	r3, r2
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	4413      	add	r3, r2
 8006c4a:	015b      	lsls	r3, r3, #5
 8006c4c:	440b      	add	r3, r1
 8006c4e:	3320      	adds	r3, #32
 8006c50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006c54:	601a      	str	r2, [r3, #0]
              break;
 8006c56:	e02f      	b.n	8006cb8 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
            case BSP_OSPI_RAM_BURST_32_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_32_BYTES;
 8006c58:	4941      	ldr	r1, [pc, #260]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	4413      	add	r3, r2
 8006c62:	015b      	lsls	r3, r3, #5
 8006c64:	440b      	add	r3, r1
 8006c66:	3320      	adds	r3, #32
 8006c68:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006c6c:	601a      	str	r2, [r3, #0]
              break;
 8006c6e:	e023      	b.n	8006cb8 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
            case BSP_OSPI_RAM_BURST_64_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_64_BYTES;
 8006c70:	493b      	ldr	r1, [pc, #236]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	4413      	add	r3, r2
 8006c7a:	015b      	lsls	r3, r3, #5
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3320      	adds	r3, #32
 8006c80:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006c84:	601a      	str	r2, [r3, #0]
              break;
 8006c86:	e017      	b.n	8006cb8 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
            case BSP_OSPI_RAM_BURST_128_BYTES :
              hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_128_BYTES;
 8006c88:	4935      	ldr	r1, [pc, #212]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	4413      	add	r3, r2
 8006c92:	015b      	lsls	r3, r3, #5
 8006c94:	440b      	add	r3, r1
 8006c96:	3320      	adds	r3, #32
 8006c98:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8006c9c:	601a      	str	r2, [r3, #0]
              break;
 8006c9e:	e00b      	b.n	8006cb8 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
              break;
            }
          }
          else
          {
            hospi_ram[Instance].Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8006ca0:	492f      	ldr	r1, [pc, #188]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	4413      	add	r3, r2
 8006caa:	015b      	lsls	r3, r3, #5
 8006cac:	440b      	add	r3, r1
 8006cae:	3320      	adds	r3, #32
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e000      	b.n	8006cb8 <BSP_OSPI_RAM_ConfigHyperRAM+0x214>
              break;
 8006cb6:	bf00      	nop
          }
          if (HAL_OSPI_Init(&hospi_ram[Instance]) != HAL_OK)
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4413      	add	r3, r2
 8006cc0:	015b      	lsls	r3, r3, #5
 8006cc2:	4a27      	ldr	r2, [pc, #156]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006cc4:	4413      	add	r3, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f005 fa18 	bl	800c0fc <HAL_OSPI_Init>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <BSP_OSPI_RAM_ConfigHyperRAM+0x236>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8006cd2:	f06f 0303 	mvn.w	r3, #3
 8006cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cd8:	e020      	b.n	8006d1c <BSP_OSPI_RAM_ConfigHyperRAM+0x278>
          }
          else
          {
            sHyperbusCfg.RWRecoveryTime   = RW_RECOVERY_TIME;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	60fb      	str	r3, [r7, #12]
            sHyperbusCfg.AccessTime       = (uint32_t) ((Latency == BSP_OSPI_RAM_FIXED_LATENCY) ? \
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <BSP_OSPI_RAM_ConfigHyperRAM+0x244>
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e000      	b.n	8006cea <BSP_OSPI_RAM_ConfigHyperRAM+0x246>
 8006ce8:	2306      	movs	r3, #6
 8006cea:	613b      	str	r3, [r7, #16]
                                             OPTIMAL_FIXED_INITIAL_LATENCY : OPTIMAL_VARIABLE_INITIAL_LATENCY);
            sHyperbusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
            sHyperbusCfg.LatencyMode      = (uint32_t) Latency;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	61bb      	str	r3, [r7, #24]

            if (HAL_OSPI_HyperbusCfg(&hospi_ram[Instance], &sHyperbusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	015b      	lsls	r3, r3, #5
 8006cfe:	4a18      	ldr	r2, [pc, #96]	@ (8006d60 <BSP_OSPI_RAM_ConfigHyperRAM+0x2bc>)
 8006d00:	4413      	add	r3, r2
 8006d02:	f107 010c 	add.w	r1, r7, #12
 8006d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f005 faf1 	bl	800c2f2 <HAL_OSPI_HyperbusCfg>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <BSP_OSPI_RAM_ConfigHyperRAM+0x278>
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 8006d16:	f06f 0303 	mvn.w	r3, #3
 8006d1a:	627b      	str	r3, [r7, #36]	@ 0x24
          }
        }
      }

      /* Update OSPI context if all operations are well done */
      if(ret == BSP_ERROR_NONE)
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d116      	bne.n	8006d50 <BSP_OSPI_RAM_ConfigHyperRAM+0x2ac>
      {
        /* Update current status parameter *****************************************/
        Ospi_Ram_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8006d22:	4a0e      	ldr	r2, [pc, #56]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2101      	movs	r1, #1
 8006d28:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
        Ospi_Ram_Ctx[Instance].LatencyType   = Latency;
 8006d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	4413      	add	r3, r2
 8006d34:	78fa      	ldrb	r2, [r7, #3]
 8006d36:	705a      	strb	r2, [r3, #1]
        Ospi_Ram_Ctx[Instance].BurstType     = BurstType;
 8006d38:	4a08      	ldr	r2, [pc, #32]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4413      	add	r3, r2
 8006d40:	78ba      	ldrb	r2, [r7, #2]
 8006d42:	709a      	strb	r2, [r3, #2]
        Ospi_Ram_Ctx[Instance].BurstLength   = BurstLength;
 8006d44:	4a05      	ldr	r2, [pc, #20]	@ (8006d5c <BSP_OSPI_RAM_ConfigHyperRAM+0x2b8>)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	787a      	ldrb	r2, [r7, #1]
 8006d4e:	70da      	strb	r2, [r3, #3]
      /* Nothing to do */
    }
  }

  /* Return BSP status */
  return ret;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3728      	adds	r7, #40	@ 0x28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	24000460 	.word	0x24000460
 8006d60:	240059e4 	.word	0x240059e4

08006d64 <OSPI_RAM_MspInit>:
  * @brief  Initializes the OSPI MSP.
  * @param  hospi OSPI handle
  * @retval None
  */
static void OSPI_RAM_MspInit(OSPI_HandleTypeDef *hospi)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b094      	sub	sp, #80	@ 0x50
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the OctoSPI memory interface, DMA and GPIO clocks */
  OSPI_RAM_CLK_ENABLE();
 8006d6c:	4bba      	ldr	r3, [pc, #744]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006d6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d72:	4ab9      	ldr	r2, [pc, #740]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006d74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d78:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8006d7c:	4bb6      	ldr	r3, [pc, #728]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006d7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  OSPI_RAM_MDMAx_CLK_ENABLE();
 8006d8a:	4bb3      	ldr	r3, [pc, #716]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006d8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d90:	4ab1      	ldr	r2, [pc, #708]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8006d9a:	4baf      	ldr	r3, [pc, #700]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006d9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  OSPI_RAM_CLK_GPIO_CLK_ENABLE();
 8006da8:	4bab      	ldr	r3, [pc, #684]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dae:	4aaa      	ldr	r2, [pc, #680]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006db0:	f043 0320 	orr.w	r3, r3, #32
 8006db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006db8:	4ba7      	ldr	r3, [pc, #668]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  OSPI_RAM_DQS_GPIO_CLK_ENABLE();
 8006dc6:	4ba4      	ldr	r3, [pc, #656]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dcc:	4aa2      	ldr	r2, [pc, #648]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006dce:	f043 0320 	orr.w	r3, r3, #32
 8006dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006dd6:	4ba0      	ldr	r3, [pc, #640]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ddc:	f003 0320 	and.w	r3, r3, #32
 8006de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  OSPI_RAM_CS_GPIO_CLK_ENABLE();
 8006de4:	4b9c      	ldr	r3, [pc, #624]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dea:	4a9b      	ldr	r2, [pc, #620]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006df4:	4b98      	ldr	r3, [pc, #608]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  OSPI_RAM_D0_GPIO_CLK_ENABLE();
 8006e02:	4b95      	ldr	r3, [pc, #596]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e08:	4a93      	ldr	r2, [pc, #588]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e0a:	f043 0320 	orr.w	r3, r3, #32
 8006e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e12:	4b91      	ldr	r3, [pc, #580]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  OSPI_RAM_D1_GPIO_CLK_ENABLE();
 8006e20:	4b8d      	ldr	r3, [pc, #564]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e26:	4a8c      	ldr	r2, [pc, #560]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e28:	f043 0320 	orr.w	r3, r3, #32
 8006e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e30:	4b89      	ldr	r3, [pc, #548]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
  OSPI_RAM_D2_GPIO_CLK_ENABLE();
 8006e3e:	4b86      	ldr	r3, [pc, #536]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e44:	4a84      	ldr	r2, [pc, #528]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e46:	f043 0320 	orr.w	r3, r3, #32
 8006e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e4e:	4b82      	ldr	r3, [pc, #520]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	69fb      	ldr	r3, [r7, #28]
  OSPI_RAM_D3_GPIO_CLK_ENABLE();
 8006e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e62:	4a7d      	ldr	r2, [pc, #500]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e64:	f043 0320 	orr.w	r3, r3, #32
 8006e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e6c:	4b7a      	ldr	r3, [pc, #488]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e72:	f003 0320 	and.w	r3, r3, #32
 8006e76:	61bb      	str	r3, [r7, #24]
 8006e78:	69bb      	ldr	r3, [r7, #24]
  OSPI_RAM_D4_GPIO_CLK_ENABLE();
 8006e7a:	4b77      	ldr	r3, [pc, #476]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e80:	4a75      	ldr	r2, [pc, #468]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e8a:	4b73      	ldr	r3, [pc, #460]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	697b      	ldr	r3, [r7, #20]
  OSPI_RAM_D5_GPIO_CLK_ENABLE();
 8006e98:	4b6f      	ldr	r3, [pc, #444]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e9e:	4a6e      	ldr	r2, [pc, #440]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ea8:	4b6b      	ldr	r3, [pc, #428]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb2:	613b      	str	r3, [r7, #16]
 8006eb4:	693b      	ldr	r3, [r7, #16]
  OSPI_RAM_D6_GPIO_CLK_ENABLE();
 8006eb6:	4b68      	ldr	r3, [pc, #416]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ebc:	4a66      	ldr	r2, [pc, #408]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ec6:	4b64      	ldr	r3, [pc, #400]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
  OSPI_RAM_D7_GPIO_CLK_ENABLE();
 8006ed4:	4b60      	ldr	r3, [pc, #384]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eda:	4a5f      	ldr	r2, [pc, #380]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eee:	60bb      	str	r3, [r7, #8]
 8006ef0:	68bb      	ldr	r3, [r7, #8]

  /* Reset the OctoSPI memory interface */
  OSPI_RAM_FORCE_RESET();
 8006ef2:	4b59      	ldr	r3, [pc, #356]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ef6:	4a58      	ldr	r2, [pc, #352]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006ef8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006efc:	67d3      	str	r3, [r2, #124]	@ 0x7c
  OSPI_RAM_RELEASE_RESET();
 8006efe:	4b56      	ldr	r3, [pc, #344]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f02:	4a55      	ldr	r2, [pc, #340]	@ (8007058 <OSPI_RAM_MspInit+0x2f4>)
 8006f04:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006f08:	67d3      	str	r3, [r2, #124]	@ 0x7c

  /* OctoSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_CS_PIN;
 8006f0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8006f10:	2302      	movs	r3, #2
 8006f12:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8006f14:	2301      	movs	r3, #1
 8006f16:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Alternate = OSPI_RAM_CS_PIN_AF;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_CS_GPIO_PORT, &GPIO_InitStruct);
 8006f20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f24:	4619      	mov	r1, r3
 8006f26:	484d      	ldr	r0, [pc, #308]	@ (800705c <OSPI_RAM_MspInit+0x2f8>)
 8006f28:	f003 fcb6 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI DQS GPIO pin configuration  */
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Pin       = OSPI_RAM_DQS_PIN;
 8006f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_DQS_PIN_AF;
 8006f36:	2309      	movs	r3, #9
 8006f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_DQS_GPIO_PORT, &GPIO_InitStruct);
 8006f3a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4847      	ldr	r0, [pc, #284]	@ (8007060 <OSPI_RAM_MspInit+0x2fc>)
 8006f42:	f003 fca9 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_CLK_PIN;
 8006f46:	2310      	movs	r3, #16
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_CLK_PIN_AF;
 8006f4a:	2309      	movs	r3, #9
 8006f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_CLK_GPIO_PORT, &GPIO_InitStruct);
 8006f4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f52:	4619      	mov	r1, r3
 8006f54:	4842      	ldr	r0, [pc, #264]	@ (8007060 <OSPI_RAM_MspInit+0x2fc>)
 8006f56:	f003 fc9f 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D0_PIN;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D0_PIN_AF;
 8006f5e:	2309      	movs	r3, #9
 8006f60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D0_GPIO_PORT, &GPIO_InitStruct);
 8006f62:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f66:	4619      	mov	r1, r3
 8006f68:	483d      	ldr	r0, [pc, #244]	@ (8007060 <OSPI_RAM_MspInit+0x2fc>)
 8006f6a:	f003 fc95 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D1_PIN;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D1_PIN_AF;
 8006f72:	2309      	movs	r3, #9
 8006f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D1_GPIO_PORT, &GPIO_InitStruct);
 8006f76:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4838      	ldr	r0, [pc, #224]	@ (8007060 <OSPI_RAM_MspInit+0x2fc>)
 8006f7e:	f003 fc8b 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D2_PIN;
 8006f82:	2304      	movs	r3, #4
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D2_PIN_AF;
 8006f86:	2309      	movs	r3, #9
 8006f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D2_GPIO_PORT, &GPIO_InitStruct);
 8006f8a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4833      	ldr	r0, [pc, #204]	@ (8007060 <OSPI_RAM_MspInit+0x2fc>)
 8006f92:	f003 fc81 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D3_PIN;
 8006f96:	2308      	movs	r3, #8
 8006f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D3_PIN_AF;
 8006f9a:	2309      	movs	r3, #9
 8006f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D3_GPIO_PORT, &GPIO_InitStruct);
 8006f9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	482e      	ldr	r0, [pc, #184]	@ (8007060 <OSPI_RAM_MspInit+0x2fc>)
 8006fa6:	f003 fc77 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI D4 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D4_PIN;
 8006faa:	2301      	movs	r3, #1
 8006fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D4_PIN_AF;
 8006fae:	2309      	movs	r3, #9
 8006fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D4_GPIO_PORT, &GPIO_InitStruct);
 8006fb2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4828      	ldr	r0, [pc, #160]	@ (800705c <OSPI_RAM_MspInit+0x2f8>)
 8006fba:	f003 fc6d 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI D5 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D5_PIN;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D5_PIN_AF;
 8006fc2:	2309      	movs	r3, #9
 8006fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D5_GPIO_PORT, &GPIO_InitStruct);
 8006fc6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4823      	ldr	r0, [pc, #140]	@ (800705c <OSPI_RAM_MspInit+0x2f8>)
 8006fce:	f003 fc63 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI D6 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D6_PIN;
 8006fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D6_PIN_AF;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D6_GPIO_PORT, &GPIO_InitStruct);
 8006fdc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	481e      	ldr	r0, [pc, #120]	@ (800705c <OSPI_RAM_MspInit+0x2f8>)
 8006fe4:	f003 fc58 	bl	800a898 <HAL_GPIO_Init>

  /* OctoSPI D7 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = OSPI_RAM_D7_PIN;
 8006fe8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Alternate = OSPI_RAM_D7_PIN_AF;
 8006fee:	2309      	movs	r3, #9
 8006ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(OSPI_RAM_D7_GPIO_PORT, &GPIO_InitStruct);
 8006ff2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4818      	ldr	r0, [pc, #96]	@ (800705c <OSPI_RAM_MspInit+0x2f8>)
 8006ffa:	f003 fc4d 	bl	800a898 <HAL_GPIO_Init>

  /* Configure the OctoSPI DMA */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006ffe:	4b19      	ldr	r3, [pc, #100]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007000:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007004:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8007006:	4b17      	ldr	r3, [pc, #92]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700c:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800700e:	4b15      	ldr	r3, [pc, #84]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007010:	2280      	movs	r2, #128	@ 0x80
 8007012:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8007014:	4b13      	ldr	r3, [pc, #76]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007016:	f240 2202 	movw	r2, #514	@ 0x202
 800701a:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800701c:	4b11      	ldr	r3, [pc, #68]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 800701e:	f640 0208 	movw	r2, #2056	@ 0x808
 8007022:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8007024:	4b0f      	ldr	r3, [pc, #60]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007026:	2220      	movs	r2, #32
 8007028:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800702a:	4b0e      	ldr	r3, [pc, #56]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 800702c:	2280      	movs	r2, #128	@ 0x80
 800702e:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007032:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007036:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8007038:	4b0a      	ldr	r3, [pc, #40]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 800703a:	2200      	movs	r2, #0
 800703c:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800703e:	4b09      	ldr	r3, [pc, #36]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8007044:	4b07      	ldr	r3, [pc, #28]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007046:	2280      	movs	r2, #128	@ 0x80
 8007048:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 800704c:	2200      	movs	r2, #0
 800704e:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8007050:	4b04      	ldr	r3, [pc, #16]	@ (8007064 <OSPI_RAM_MspInit+0x300>)
 8007052:	2200      	movs	r2, #0
 8007054:	e008      	b.n	8007068 <OSPI_RAM_MspInit+0x304>
 8007056:	bf00      	nop
 8007058:	58024400 	.word	0x58024400
 800705c:	58021800 	.word	0x58021800
 8007060:	58021400 	.word	0x58021400
 8007064:	24005a44 	.word	0x24005a44
 8007068:	639a      	str	r2, [r3, #56]	@ 0x38

  mdma_handle.Instance = OSPI_RAM_MDMAx_CHANNEL;
 800706a:	4b10      	ldr	r3, [pc, #64]	@ (80070ac <OSPI_RAM_MspInit+0x348>)
 800706c:	4a10      	ldr	r2, [pc, #64]	@ (80070b0 <OSPI_RAM_MspInit+0x34c>)
 800706e:	601a      	str	r2, [r3, #0]

  __HAL_LINKDMA(hospi, hmdma, mdma_handle);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a0e      	ldr	r2, [pc, #56]	@ (80070ac <OSPI_RAM_MspInit+0x348>)
 8007074:	651a      	str	r2, [r3, #80]	@ 0x50
 8007076:	4a0d      	ldr	r2, [pc, #52]	@ (80070ac <OSPI_RAM_MspInit+0x348>)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6413      	str	r3, [r2, #64]	@ 0x40
  (void) HAL_MDMA_Init(&mdma_handle);
 800707c:	480b      	ldr	r0, [pc, #44]	@ (80070ac <OSPI_RAM_MspInit+0x348>)
 800707e:	f004 ff51 	bl	800bf24 <HAL_MDMA_Init>

  /* Enable and set priority of the OctoSPI and DMA interrupts */
  HAL_NVIC_SetPriority(OCTOSPI2_IRQn, BSP_OSPI_RAM_IT_PRIORITY, 0);
 8007082:	2200      	movs	r2, #0
 8007084:	2107      	movs	r1, #7
 8007086:	2096      	movs	r0, #150	@ 0x96
 8007088:	f000 fa29 	bl	80074de <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(OSPI_RAM_MDMAx_IRQn, BSP_OSPI_RAM_DMA_IT_PRIORITY, 0);
 800708c:	2200      	movs	r2, #0
 800708e:	2107      	movs	r1, #7
 8007090:	207a      	movs	r0, #122	@ 0x7a
 8007092:	f000 fa24 	bl	80074de <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(OCTOSPI2_IRQn);
 8007096:	2096      	movs	r0, #150	@ 0x96
 8007098:	f000 fa3b 	bl	8007512 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(OSPI_RAM_MDMAx_IRQn);
 800709c:	207a      	movs	r0, #122	@ 0x7a
 800709e:	f000 fa38 	bl	8007512 <HAL_NVIC_EnableIRQ>

}
 80070a2:	bf00      	nop
 80070a4:	3750      	adds	r7, #80	@ 0x50
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	24005a44 	.word	0x24005a44
 80070b0:	52000040 	.word	0x52000040

080070b4 <BSP_SD_DETECT_IRQHandler>:
  * @brief  This function handles SD interrupt request.
  * @param  Instance  SD Instance
  * @retval None
  */
void BSP_SD_DETECT_IRQHandler(uint32_t Instance)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  HAL_EXTI_IRQHandler(&hsd_exti[Instance]);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	4a04      	ldr	r2, [pc, #16]	@ (80070d4 <BSP_SD_DETECT_IRQHandler+0x20>)
 80070c2:	4413      	add	r3, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f003 fbb7 	bl	800a838 <HAL_EXTI_IRQHandler>
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	24005b2c 	.word	0x24005b2c

080070d8 <BSP_SD_IRQHandler>:
  * @brief  This function handles SDMMC interrupt requests.
  * @param  Instance  SD Instance
  * @retval None
  */
void BSP_SD_IRQHandler(uint32_t Instance)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  HAL_SD_IRQHandler(&hsd_sdmmc[Instance]);
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	015b      	lsls	r3, r3, #5
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4a04      	ldr	r2, [pc, #16]	@ (80070fc <BSP_SD_IRQHandler+0x24>)
 80070ec:	4413      	add	r3, r2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f009 fae2 	bl	80106b8 <HAL_SD_IRQHandler>
}
 80070f4:	bf00      	nop
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	24005ab0 	.word	0x24005ab0

08007100 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a06      	ldr	r2, [pc, #24]	@ (8007124 <HAL_SD_TxCpltCallback+0x24>)
 800710c:	4293      	cmp	r3, r2
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	4618      	mov	r0, r3
 8007118:	f000 f81a 	bl	8007150 <BSP_SD_WriteCpltCallback>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	24005ab0 	.word	0x24005ab0

08007128 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a06      	ldr	r2, [pc, #24]	@ (800714c <HAL_SD_RxCpltCallback+0x24>)
 8007134:	4293      	cmp	r3, r2
 8007136:	bf14      	ite	ne
 8007138:	2301      	movne	r3, #1
 800713a:	2300      	moveq	r3, #0
 800713c:	b2db      	uxtb	r3, r3
 800713e:	4618      	mov	r0, r3
 8007140:	f000 f810 	bl	8007164 <BSP_SD_ReadCpltCallback>
}
 8007144:	bf00      	nop
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	24005ab0 	.word	0x24005ab0

08007150 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callbacks
  * @param  Instance     SD Instance
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(uint32_t Instance)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callbacks
  * @param  Instance     SD Instance
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(uint32_t Instance)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <BSP_TS_IRQHandler>:
  * @brief  This function handles TS interrupt request.
  * @param  Instance TS instance
  * @retval None
  */
void BSP_TS_IRQHandler(uint32_t Instance)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  HAL_EXTI_IRQHandler(&hts_exti[Instance]);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4a04      	ldr	r2, [pc, #16]	@ (8007198 <BSP_TS_IRQHandler+0x20>)
 8007186:	4413      	add	r3, r2
 8007188:	4618      	mov	r0, r3
 800718a:	f003 fb55 	bl	800a838 <HAL_EXTI_IRQHandler>
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	24005b34 	.word	0x24005b34

0800719c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071a2:	2003      	movs	r0, #3
 80071a4:	f000 f990 	bl	80074c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80071a8:	f006 f8f8 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 80071ac:	4602      	mov	r2, r0
 80071ae:	4b15      	ldr	r3, [pc, #84]	@ (8007204 <HAL_Init+0x68>)
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	0a1b      	lsrs	r3, r3, #8
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	4913      	ldr	r1, [pc, #76]	@ (8007208 <HAL_Init+0x6c>)
 80071ba:	5ccb      	ldrb	r3, [r1, r3]
 80071bc:	f003 031f 	and.w	r3, r3, #31
 80071c0:	fa22 f303 	lsr.w	r3, r2, r3
 80071c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007204 <HAL_Init+0x68>)
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007208 <HAL_Init+0x6c>)
 80071d0:	5cd3      	ldrb	r3, [r2, r3]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
 80071dc:	4a0b      	ldr	r2, [pc, #44]	@ (800720c <HAL_Init+0x70>)
 80071de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007210 <HAL_Init+0x74>)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80071e6:	200f      	movs	r0, #15
 80071e8:	f000 f814 	bl	8007214 <HAL_InitTick>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e002      	b.n	80071fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80071f6:	f004 ff79 	bl	800c0ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	58024400 	.word	0x58024400
 8007208:	08015a7c 	.word	0x08015a7c
 800720c:	24000528 	.word	0x24000528
 8007210:	24000524 	.word	0x24000524

08007214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800721c:	4b15      	ldr	r3, [pc, #84]	@ (8007274 <HAL_InitTick+0x60>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e021      	b.n	800726c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007228:	4b13      	ldr	r3, [pc, #76]	@ (8007278 <HAL_InitTick+0x64>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	4b11      	ldr	r3, [pc, #68]	@ (8007274 <HAL_InitTick+0x60>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	4619      	mov	r1, r3
 8007232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007236:	fbb3 f3f1 	udiv	r3, r3, r1
 800723a:	fbb2 f3f3 	udiv	r3, r2, r3
 800723e:	4618      	mov	r0, r3
 8007240:	f000 f975 	bl	800752e <HAL_SYSTICK_Config>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e00e      	b.n	800726c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b0f      	cmp	r3, #15
 8007252:	d80a      	bhi.n	800726a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007254:	2200      	movs	r2, #0
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	f000 f93f 	bl	80074de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007260:	4a06      	ldr	r2, [pc, #24]	@ (800727c <HAL_InitTick+0x68>)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	e000      	b.n	800726c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	2400046c 	.word	0x2400046c
 8007278:	24000524 	.word	0x24000524
 800727c:	24000468 	.word	0x24000468

08007280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007284:	4b06      	ldr	r3, [pc, #24]	@ (80072a0 <HAL_IncTick+0x20>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <HAL_IncTick+0x24>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4413      	add	r3, r2
 8007290:	4a04      	ldr	r2, [pc, #16]	@ (80072a4 <HAL_IncTick+0x24>)
 8007292:	6013      	str	r3, [r2, #0]
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	2400046c 	.word	0x2400046c
 80072a4:	24005b3c 	.word	0x24005b3c

080072a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
  return uwTick;
 80072ac:	4b03      	ldr	r3, [pc, #12]	@ (80072bc <HAL_GetTick+0x14>)
 80072ae:	681b      	ldr	r3, [r3, #0]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	24005b3c 	.word	0x24005b3c

080072c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072c8:	f7ff ffee 	bl	80072a8 <HAL_GetTick>
 80072cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d8:	d005      	beq.n	80072e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072da:	4b0a      	ldr	r3, [pc, #40]	@ (8007304 <HAL_Delay+0x44>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80072e6:	bf00      	nop
 80072e8:	f7ff ffde 	bl	80072a8 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d8f7      	bhi.n	80072e8 <HAL_Delay+0x28>
  {
  }
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	2400046c 	.word	0x2400046c

08007308 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800730c:	4b05      	ldr	r3, [pc, #20]	@ (8007324 <HAL_EnableCompensationCell+0x1c>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	4a04      	ldr	r2, [pc, #16]	@ (8007324 <HAL_EnableCompensationCell+0x1c>)
 8007312:	f043 0301 	orr.w	r3, r3, #1
 8007316:	6213      	str	r3, [r2, #32]
}
 8007318:	bf00      	nop
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	58000400 	.word	0x58000400

08007328 <__NVIC_SetPriorityGrouping>:
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007338:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <__NVIC_SetPriorityGrouping+0x40>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007344:	4013      	ands	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007350:	4b06      	ldr	r3, [pc, #24]	@ (800736c <__NVIC_SetPriorityGrouping+0x44>)
 8007352:	4313      	orrs	r3, r2
 8007354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007356:	4a04      	ldr	r2, [pc, #16]	@ (8007368 <__NVIC_SetPriorityGrouping+0x40>)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	60d3      	str	r3, [r2, #12]
}
 800735c:	bf00      	nop
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	e000ed00 	.word	0xe000ed00
 800736c:	05fa0000 	.word	0x05fa0000

08007370 <__NVIC_GetPriorityGrouping>:
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007374:	4b04      	ldr	r3, [pc, #16]	@ (8007388 <__NVIC_GetPriorityGrouping+0x18>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	0a1b      	lsrs	r3, r3, #8
 800737a:	f003 0307 	and.w	r3, r3, #7
}
 800737e:	4618      	mov	r0, r3
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	e000ed00 	.word	0xe000ed00

0800738c <__NVIC_EnableIRQ>:
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800739a:	2b00      	cmp	r3, #0
 800739c:	db0b      	blt.n	80073b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	f003 021f 	and.w	r2, r3, #31
 80073a4:	4907      	ldr	r1, [pc, #28]	@ (80073c4 <__NVIC_EnableIRQ+0x38>)
 80073a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	2001      	movs	r0, #1
 80073ae:	fa00 f202 	lsl.w	r2, r0, r2
 80073b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	e000e100 	.word	0xe000e100

080073c8 <__NVIC_SetPriority>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	6039      	str	r1, [r7, #0]
 80073d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80073d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	db0a      	blt.n	80073f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	b2da      	uxtb	r2, r3
 80073e0:	490c      	ldr	r1, [pc, #48]	@ (8007414 <__NVIC_SetPriority+0x4c>)
 80073e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073e6:	0112      	lsls	r2, r2, #4
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	440b      	add	r3, r1
 80073ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80073f0:	e00a      	b.n	8007408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	4908      	ldr	r1, [pc, #32]	@ (8007418 <__NVIC_SetPriority+0x50>)
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	3b04      	subs	r3, #4
 8007400:	0112      	lsls	r2, r2, #4
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	440b      	add	r3, r1
 8007406:	761a      	strb	r2, [r3, #24]
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	e000e100 	.word	0xe000e100
 8007418:	e000ed00 	.word	0xe000ed00

0800741c <NVIC_EncodePriority>:
{
 800741c:	b480      	push	{r7}
 800741e:	b089      	sub	sp, #36	@ 0x24
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f1c3 0307 	rsb	r3, r3, #7
 8007436:	2b04      	cmp	r3, #4
 8007438:	bf28      	it	cs
 800743a:	2304      	movcs	r3, #4
 800743c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	3304      	adds	r3, #4
 8007442:	2b06      	cmp	r3, #6
 8007444:	d902      	bls.n	800744c <NVIC_EncodePriority+0x30>
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	3b03      	subs	r3, #3
 800744a:	e000      	b.n	800744e <NVIC_EncodePriority+0x32>
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	43da      	mvns	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	401a      	ands	r2, r3
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007464:	f04f 31ff 	mov.w	r1, #4294967295
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	fa01 f303 	lsl.w	r3, r1, r3
 800746e:	43d9      	mvns	r1, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007474:	4313      	orrs	r3, r2
}
 8007476:	4618      	mov	r0, r3
 8007478:	3724      	adds	r7, #36	@ 0x24
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
	...

08007484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3b01      	subs	r3, #1
 8007490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007494:	d301      	bcc.n	800749a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007496:	2301      	movs	r3, #1
 8007498:	e00f      	b.n	80074ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800749a:	4a0a      	ldr	r2, [pc, #40]	@ (80074c4 <SysTick_Config+0x40>)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3b01      	subs	r3, #1
 80074a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074a2:	210f      	movs	r1, #15
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	f7ff ff8e 	bl	80073c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074ac:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <SysTick_Config+0x40>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074b2:	4b04      	ldr	r3, [pc, #16]	@ (80074c4 <SysTick_Config+0x40>)
 80074b4:	2207      	movs	r2, #7
 80074b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	e000e010 	.word	0xe000e010

080074c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff ff29 	bl	8007328 <__NVIC_SetPriorityGrouping>
}
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	4603      	mov	r3, r0
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80074ec:	f7ff ff40 	bl	8007370 <__NVIC_GetPriorityGrouping>
 80074f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	68b9      	ldr	r1, [r7, #8]
 80074f6:	6978      	ldr	r0, [r7, #20]
 80074f8:	f7ff ff90 	bl	800741c <NVIC_EncodePriority>
 80074fc:	4602      	mov	r2, r0
 80074fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007502:	4611      	mov	r1, r2
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff ff5f 	bl	80073c8 <__NVIC_SetPriority>
}
 800750a:	bf00      	nop
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	4603      	mov	r3, r0
 800751a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800751c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff ff33 	bl	800738c <__NVIC_EnableIRQ>
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff ffa4 	bl	8007484 <SysTick_Config>
 800753c:	4603      	mov	r3, r0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800754c:	f3bf 8f5f 	dmb	sy
}
 8007550:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007552:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <HAL_MPU_Disable+0x28>)
 8007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007556:	4a06      	ldr	r2, [pc, #24]	@ (8007570 <HAL_MPU_Disable+0x28>)
 8007558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800755c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800755e:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <HAL_MPU_Disable+0x2c>)
 8007560:	2200      	movs	r2, #0
 8007562:	605a      	str	r2, [r3, #4]
}
 8007564:	bf00      	nop
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	e000ed00 	.word	0xe000ed00
 8007574:	e000ed90 	.word	0xe000ed90

08007578 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007580:	4a0b      	ldr	r2, [pc, #44]	@ (80075b0 <HAL_MPU_Enable+0x38>)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f043 0301 	orr.w	r3, r3, #1
 8007588:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800758a:	4b0a      	ldr	r3, [pc, #40]	@ (80075b4 <HAL_MPU_Enable+0x3c>)
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	4a09      	ldr	r2, [pc, #36]	@ (80075b4 <HAL_MPU_Enable+0x3c>)
 8007590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007594:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007596:	f3bf 8f4f 	dsb	sy
}
 800759a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800759c:	f3bf 8f6f 	isb	sy
}
 80075a0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	e000ed90 	.word	0xe000ed90
 80075b4:	e000ed00 	.word	0xe000ed00

080075b8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	785a      	ldrb	r2, [r3, #1]
 80075c4:	4b1d      	ldr	r3, [pc, #116]	@ (800763c <HAL_MPU_ConfigRegion+0x84>)
 80075c6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d029      	beq.n	8007624 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80075d0:	4a1a      	ldr	r2, [pc, #104]	@ (800763c <HAL_MPU_ConfigRegion+0x84>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7b1b      	ldrb	r3, [r3, #12]
 80075dc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	7adb      	ldrb	r3, [r3, #11]
 80075e2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80075e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	7a9b      	ldrb	r3, [r3, #10]
 80075ea:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80075ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7b5b      	ldrb	r3, [r3, #13]
 80075f2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80075f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7b9b      	ldrb	r3, [r3, #14]
 80075fa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80075fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	7bdb      	ldrb	r3, [r3, #15]
 8007602:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007604:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	7a5b      	ldrb	r3, [r3, #9]
 800760a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800760c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7a1b      	ldrb	r3, [r3, #8]
 8007612:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007614:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	7812      	ldrb	r2, [r2, #0]
 800761a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800761c:	4a07      	ldr	r2, [pc, #28]	@ (800763c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800761e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007620:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8007622:	e005      	b.n	8007630 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8007624:	4b05      	ldr	r3, [pc, #20]	@ (800763c <HAL_MPU_ConfigRegion+0x84>)
 8007626:	2200      	movs	r2, #0
 8007628:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800762a:	4b04      	ldr	r3, [pc, #16]	@ (800763c <HAL_MPU_ConfigRegion+0x84>)
 800762c:	2200      	movs	r2, #0
 800762e:	611a      	str	r2, [r3, #16]
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	e000ed90 	.word	0xe000ed90

08007640 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e0b4      	b.n	80077bc <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8007652:	4b5c      	ldr	r3, [pc, #368]	@ (80077c4 <HAL_DFSDM_ChannelInit+0x184>)
 8007654:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 8007656:	4b5c      	ldr	r3, [pc, #368]	@ (80077c8 <HAL_DFSDM_ChannelInit+0x188>)
 8007658:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 800765a:	4b5c      	ldr	r3, [pc, #368]	@ (80077cc <HAL_DFSDM_ChannelInit+0x18c>)
 800765c:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 faa6 	bl	8007bb4 <DFSDM_GetChannelFromInstance>
 8007668:	4603      	mov	r3, r0
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4413      	add	r3, r2
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e0a0      	b.n	80077bc <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f8a8 	bl	80077d0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d125      	bne.n	80076de <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	791b      	ldrb	r3, [r3, #4]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d108      	bne.n	80076d2 <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	431a      	orrs	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80076ec:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80076fc:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8007702:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 020f 	bic.w	r2, r2, #15
 800771a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8007742:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6899      	ldr	r1, [r3, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	3b01      	subs	r3, #1
 8007754:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f002 0207 	and.w	r2, r2, #7
 800776e:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6859      	ldr	r1, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777a:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007780:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800779a:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f000 fa03 	bl	8007bb4 <DFSDM_GetChannelFromInstance>
 80077ae:	4603      	mov	r3, r0
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	4413      	add	r3, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	24005b40 	.word	0x24005b40
 80077c8:	24005b44 	.word	0x24005b44
 80077cc:	40017800 	.word	0x40017800

080077d0 <HAL_DFSDM_ChannelMspInit>:
  * @brief  Initialize the DFSDM channel MSP.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_ChannelMspInit could be implemented in the user file.
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  const DFSDM_Filter_TypeDef *filter0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e0c8      	b.n	8007988 <HAL_DFSDM_FilterInit+0x1a4>
  else
  {
    filter0Instance = DFSDM2_Filter0;
  }
#else /* DFSDM2_Channel0 */
  filter0Instance = DFSDM1_Filter0;
 80077f6:	4b66      	ldr	r3, [pc, #408]	@ (8007990 <HAL_DFSDM_FilterInit+0x1ac>)
 80077f8:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	429a      	cmp	r2, r3
 8007802:	d109      	bne.n	8007818 <HAL_DFSDM_FilterInit+0x34>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == filter0Instance) &&
 8007808:	2b01      	cmp	r3, #1
 800780a:	d003      	beq.n	8007814 <HAL_DFSDM_FilterInit+0x30>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_DFSDM_FilterInit+0x34>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0b7      	b.n	8007988 <HAL_DFSDM_FilterInit+0x1a4>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	645a      	str	r2, [r3, #68]	@ 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	649a      	str	r2, [r3, #72]	@ 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	651a      	str	r2, [r3, #80]	@ 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f8b3 	bl	800799c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 2200 	bic.w	r2, r2, #524288	@ 0x80000
 8007844:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	7a1b      	ldrb	r3, [r3, #8]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d108      	bne.n	8007860 <HAL_DFSDM_FilterInit+0x7c>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	e007      	b.n	8007870 <HAL_DFSDM_FilterInit+0x8c>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800786e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7a5b      	ldrb	r3, [r3, #9]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d108      	bne.n	800788a <HAL_DFSDM_FilterInit+0xa6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8007886:	601a      	str	r2, [r3, #0]
 8007888:	e007      	b.n	800789a <HAL_DFSDM_FilterInit+0xb6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8007898:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6819      	ldr	r1, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007994 <HAL_DFSDM_FilterInit+0x1b0>)
 80078a6:	400b      	ands	r3, r1
 80078a8:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d108      	bne.n	80078c4 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6819      	ldr	r1, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695a      	ldr	r2, [r3, #20]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	7c1b      	ldrb	r3, [r3, #16]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d108      	bne.n	80078de <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0210 	orr.w	r2, r2, #16
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e007      	b.n	80078ee <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0210 	bic.w	r2, r2, #16
 80078ec:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7c5b      	ldrb	r3, [r3, #17]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d108      	bne.n	8007908 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0220 	orr.w	r2, r2, #32
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	e007      	b.n	8007918 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0220 	bic.w	r2, r2, #32
 8007916:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6959      	ldr	r1, [r3, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b1d      	ldr	r3, [pc, #116]	@ (8007998 <HAL_DFSDM_FilterInit+0x1b4>)
 8007924:	400b      	ands	r3, r1
 8007926:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6959      	ldr	r1, [r3, #20]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	3b01      	subs	r3, #1
 8007938:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800793a:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007940:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8007942:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	430a      	orrs	r2, r1
 800794a:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	635a      	str	r2, [r3, #52]	@ 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7c1a      	ldrb	r2, [r3, #16]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0201 	orr.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40017900 	.word	0x40017900
 8007994:	ffff80f7 	.word	0xffff80f7
 8007998:	1c00ff00 	.word	0x1c00ff00

0800799c <HAL_DFSDM_FilterMspInit>:
  * @brief  Initializes the DFSDM filter MSP.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the function is needed,
            the HAL_DFSDM_FilterMspInit could be implemented in the user file.
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d02c      	beq.n	8007a24 <HAL_DFSDM_FilterConfigRegChannel+0x74>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80079d0:	2bff      	cmp	r3, #255	@ 0xff
 80079d2:	d027      	beq.n	8007a24 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6819      	ldr	r1, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b16      	ldr	r3, [pc, #88]	@ (8007a38 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80079e0:	400b      	ands	r3, r1
 80079e2:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d10d      	bne.n	8007a06 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	021b      	lsls	r3, r3, #8
 80079f4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	e00a      	b.n	8007a1c <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6819      	ldr	r1, [r3, #0]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a22:	e001      	b.n	8007a28 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	f8fbffff 	.word	0xf8fbffff

08007a3c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0U))
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d002      	beq.n	8007a58 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
 8007a5c:	e066      	b.n	8007b2c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a6c:	d002      	beq.n	8007a74 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	75fb      	strb	r3, [r7, #23]
 8007a72:	e05b      	b.n	8007b2c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10e      	bne.n	8007a9a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a88:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d002      	beq.n	8007a9a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	75fb      	strb	r3, [r7, #23]
 8007a98:	e048      	b.n	8007b2c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10c      	bne.n	8007abc <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d108      	bne.n	8007abc <HAL_DFSDM_FilterRegularStart_DMA+0x80>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aae:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8007ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab4:	d102      	bne.n	8007abc <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	75fb      	strb	r3, [r7, #23]
 8007aba:	e037      	b.n	8007b2c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d004      	beq.n	8007ad0 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d12b      	bne.n	8007b28 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad4:	4a18      	ldr	r2, [pc, #96]	@ (8007b38 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8007ad6:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007adc:	4a17      	ldr	r2, [pc, #92]	@ (8007b3c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8007ade:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae4:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8007ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aea:	d101      	bne.n	8007af0 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8007aec:	4a14      	ldr	r2, [pc, #80]	@ (8007b40 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8007aee:	e000      	b.n	8007af2 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8007af0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	331c      	adds	r3, #28
 8007b02:	4619      	mov	r1, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f000 fe04 	bl	8008714 <HAL_DMA_Start_IT>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d006      	beq.n	8007b20 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	22ff      	movs	r2, #255	@ 0xff
 8007b16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      status = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8007b1e:	e005      	b.n	8007b2c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f893 	bl	8007c4c <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8007b26:	e001      	b.n	8007b2c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	08007b75 	.word	0x08007b75
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007b59 	.word	0x08007b59

08007b44 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b64:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7fc fd52 	bl	8004610 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8007b6c:	bf00      	nop
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7fc fae8 	bl	8004158 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f7ff ffcd 	bl	8007b44 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8007c30 <DFSDM_GetChannelFromInstance+0x7c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d102      	bne.n	8007bca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	e02b      	b.n	8007c22 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a19      	ldr	r2, [pc, #100]	@ (8007c34 <DFSDM_GetChannelFromInstance+0x80>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d102      	bne.n	8007bd8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e024      	b.n	8007c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a17      	ldr	r2, [pc, #92]	@ (8007c38 <DFSDM_GetChannelFromInstance+0x84>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d102      	bne.n	8007be6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8007be0:	2302      	movs	r3, #2
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e01d      	b.n	8007c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a14      	ldr	r2, [pc, #80]	@ (8007c3c <DFSDM_GetChannelFromInstance+0x88>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d102      	bne.n	8007bf4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e016      	b.n	8007c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a12      	ldr	r2, [pc, #72]	@ (8007c40 <DFSDM_GetChannelFromInstance+0x8c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d102      	bne.n	8007c02 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8007bfc:	2304      	movs	r3, #4
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e00f      	b.n	8007c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a0f      	ldr	r2, [pc, #60]	@ (8007c44 <DFSDM_GetChannelFromInstance+0x90>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d102      	bne.n	8007c10 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8007c0a:	2305      	movs	r3, #5
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e008      	b.n	8007c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a0d      	ldr	r2, [pc, #52]	@ (8007c48 <DFSDM_GetChannelFromInstance+0x94>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d102      	bne.n	8007c1e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8007c18:	2306      	movs	r3, #6
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e001      	b.n	8007c22 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8007c1e:	2307      	movs	r3, #7
 8007c20:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8007c22:	68fb      	ldr	r3, [r7, #12]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	40017800 	.word	0x40017800
 8007c34:	40017820 	.word	0x40017820
 8007c38:	40017840 	.word	0x40017840
 8007c3c:	40017860 	.word	0x40017860
 8007c40:	40017880 	.word	0x40017880
 8007c44:	400178a0 	.word	0x400178a0
 8007c48:	400178c0 	.word	0x400178c0

08007c4c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d108      	bne.n	8007c6e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	e033      	b.n	8007cd6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0201 	bic.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8007c8c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0201 	orr.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d116      	bne.n	8007cd6 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d107      	bne.n	8007cc0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f042 0202 	orr.w	r2, r2, #2
 8007cbe:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d102      	bne.n	8007cd0 <DFSDM_RegConvStart+0x84>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cce:	e000      	b.n	8007cd2 <DFSDM_RegConvStart+0x86>
 8007cd0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6493      	str	r3, [r2, #72]	@ 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <DFSDM_RegConvStart+0x98>
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	e000      	b.n	8007ce6 <DFSDM_RegConvStart+0x9a>
 8007ce4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007d00:	f7ff fad2 	bl	80072a8 <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e312      	b.n	8008336 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a66      	ldr	r2, [pc, #408]	@ (8007eb0 <HAL_DMA_Init+0x1b8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d04a      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a65      	ldr	r2, [pc, #404]	@ (8007eb4 <HAL_DMA_Init+0x1bc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d045      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a63      	ldr	r2, [pc, #396]	@ (8007eb8 <HAL_DMA_Init+0x1c0>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d040      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a62      	ldr	r2, [pc, #392]	@ (8007ebc <HAL_DMA_Init+0x1c4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d03b      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a60      	ldr	r2, [pc, #384]	@ (8007ec0 <HAL_DMA_Init+0x1c8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d036      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a5f      	ldr	r2, [pc, #380]	@ (8007ec4 <HAL_DMA_Init+0x1cc>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d031      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a5d      	ldr	r2, [pc, #372]	@ (8007ec8 <HAL_DMA_Init+0x1d0>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d02c      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8007ecc <HAL_DMA_Init+0x1d4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d027      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a5a      	ldr	r2, [pc, #360]	@ (8007ed0 <HAL_DMA_Init+0x1d8>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d022      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a59      	ldr	r2, [pc, #356]	@ (8007ed4 <HAL_DMA_Init+0x1dc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d01d      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a57      	ldr	r2, [pc, #348]	@ (8007ed8 <HAL_DMA_Init+0x1e0>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d018      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a56      	ldr	r2, [pc, #344]	@ (8007edc <HAL_DMA_Init+0x1e4>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d013      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a54      	ldr	r2, [pc, #336]	@ (8007ee0 <HAL_DMA_Init+0x1e8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00e      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a53      	ldr	r2, [pc, #332]	@ (8007ee4 <HAL_DMA_Init+0x1ec>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d009      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a51      	ldr	r2, [pc, #324]	@ (8007ee8 <HAL_DMA_Init+0x1f0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d004      	beq.n	8007db0 <HAL_DMA_Init+0xb8>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a50      	ldr	r2, [pc, #320]	@ (8007eec <HAL_DMA_Init+0x1f4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d101      	bne.n	8007db4 <HAL_DMA_Init+0xbc>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e000      	b.n	8007db6 <HAL_DMA_Init+0xbe>
 8007db4:	2300      	movs	r3, #0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 813c 	beq.w	8008034 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2202      	movs	r2, #2
 8007dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a37      	ldr	r2, [pc, #220]	@ (8007eb0 <HAL_DMA_Init+0x1b8>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d04a      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a36      	ldr	r2, [pc, #216]	@ (8007eb4 <HAL_DMA_Init+0x1bc>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d045      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a34      	ldr	r2, [pc, #208]	@ (8007eb8 <HAL_DMA_Init+0x1c0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d040      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a33      	ldr	r2, [pc, #204]	@ (8007ebc <HAL_DMA_Init+0x1c4>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d03b      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a31      	ldr	r2, [pc, #196]	@ (8007ec0 <HAL_DMA_Init+0x1c8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d036      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a30      	ldr	r2, [pc, #192]	@ (8007ec4 <HAL_DMA_Init+0x1cc>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d031      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ec8 <HAL_DMA_Init+0x1d0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d02c      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a2d      	ldr	r2, [pc, #180]	@ (8007ecc <HAL_DMA_Init+0x1d4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d027      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a2b      	ldr	r2, [pc, #172]	@ (8007ed0 <HAL_DMA_Init+0x1d8>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d022      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8007ed4 <HAL_DMA_Init+0x1dc>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d01d      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a28      	ldr	r2, [pc, #160]	@ (8007ed8 <HAL_DMA_Init+0x1e0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a27      	ldr	r2, [pc, #156]	@ (8007edc <HAL_DMA_Init+0x1e4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a25      	ldr	r2, [pc, #148]	@ (8007ee0 <HAL_DMA_Init+0x1e8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00e      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a24      	ldr	r2, [pc, #144]	@ (8007ee4 <HAL_DMA_Init+0x1ec>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a22      	ldr	r2, [pc, #136]	@ (8007ee8 <HAL_DMA_Init+0x1f0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_DMA_Init+0x174>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a21      	ldr	r2, [pc, #132]	@ (8007eec <HAL_DMA_Init+0x1f4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d108      	bne.n	8007e7e <HAL_DMA_Init+0x186>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	e007      	b.n	8007e8e <HAL_DMA_Init+0x196>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0201 	bic.w	r2, r2, #1
 8007e8c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e8e:	e02f      	b.n	8007ef0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007e90:	f7ff fa0a 	bl	80072a8 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	2b05      	cmp	r3, #5
 8007e9c:	d928      	bls.n	8007ef0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e242      	b.n	8008336 <HAL_DMA_Init+0x63e>
 8007eb0:	40020010 	.word	0x40020010
 8007eb4:	40020028 	.word	0x40020028
 8007eb8:	40020040 	.word	0x40020040
 8007ebc:	40020058 	.word	0x40020058
 8007ec0:	40020070 	.word	0x40020070
 8007ec4:	40020088 	.word	0x40020088
 8007ec8:	400200a0 	.word	0x400200a0
 8007ecc:	400200b8 	.word	0x400200b8
 8007ed0:	40020410 	.word	0x40020410
 8007ed4:	40020428 	.word	0x40020428
 8007ed8:	40020440 	.word	0x40020440
 8007edc:	40020458 	.word	0x40020458
 8007ee0:	40020470 	.word	0x40020470
 8007ee4:	40020488 	.word	0x40020488
 8007ee8:	400204a0 	.word	0x400204a0
 8007eec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1c8      	bne.n	8007e90 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	4b83      	ldr	r3, [pc, #524]	@ (8008118 <HAL_DMA_Init+0x420>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007f16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f40:	2b04      	cmp	r3, #4
 8007f42:	d107      	bne.n	8007f54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	2b28      	cmp	r3, #40	@ 0x28
 8007f5a:	d903      	bls.n	8007f64 <HAL_DMA_Init+0x26c>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f62:	d91f      	bls.n	8007fa4 <HAL_DMA_Init+0x2ac>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f6a:	d903      	bls.n	8007f74 <HAL_DMA_Init+0x27c>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	2b42      	cmp	r3, #66	@ 0x42
 8007f72:	d917      	bls.n	8007fa4 <HAL_DMA_Init+0x2ac>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	2b46      	cmp	r3, #70	@ 0x46
 8007f7a:	d903      	bls.n	8007f84 <HAL_DMA_Init+0x28c>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	2b48      	cmp	r3, #72	@ 0x48
 8007f82:	d90f      	bls.n	8007fa4 <HAL_DMA_Init+0x2ac>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b4e      	cmp	r3, #78	@ 0x4e
 8007f8a:	d903      	bls.n	8007f94 <HAL_DMA_Init+0x29c>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b52      	cmp	r3, #82	@ 0x52
 8007f92:	d907      	bls.n	8007fa4 <HAL_DMA_Init+0x2ac>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b73      	cmp	r3, #115	@ 0x73
 8007f9a:	d905      	bls.n	8007fa8 <HAL_DMA_Init+0x2b0>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b77      	cmp	r3, #119	@ 0x77
 8007fa2:	d801      	bhi.n	8007fa8 <HAL_DMA_Init+0x2b0>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e000      	b.n	8007faa <HAL_DMA_Init+0x2b2>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fb4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f023 0307 	bic.w	r3, r3, #7
 8007fcc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fdc:	2b04      	cmp	r3, #4
 8007fde:	d117      	bne.n	8008010 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00e      	beq.n	8008010 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 ff8c 	bl	8009f10 <DMA_CheckFifoParam>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2240      	movs	r2, #64	@ 0x40
 8008002:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e192      	b.n	8008336 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 fec7 	bl	8009dac <DMA_CalcBaseAndBitshift>
 800801e:	4603      	mov	r3, r0
 8008020:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	223f      	movs	r2, #63	@ 0x3f
 800802c:	409a      	lsls	r2, r3
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	609a      	str	r2, [r3, #8]
 8008032:	e0c8      	b.n	80081c6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a38      	ldr	r2, [pc, #224]	@ (800811c <HAL_DMA_Init+0x424>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d022      	beq.n	8008084 <HAL_DMA_Init+0x38c>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a37      	ldr	r2, [pc, #220]	@ (8008120 <HAL_DMA_Init+0x428>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d01d      	beq.n	8008084 <HAL_DMA_Init+0x38c>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a35      	ldr	r2, [pc, #212]	@ (8008124 <HAL_DMA_Init+0x42c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d018      	beq.n	8008084 <HAL_DMA_Init+0x38c>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a34      	ldr	r2, [pc, #208]	@ (8008128 <HAL_DMA_Init+0x430>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d013      	beq.n	8008084 <HAL_DMA_Init+0x38c>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a32      	ldr	r2, [pc, #200]	@ (800812c <HAL_DMA_Init+0x434>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00e      	beq.n	8008084 <HAL_DMA_Init+0x38c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a31      	ldr	r2, [pc, #196]	@ (8008130 <HAL_DMA_Init+0x438>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d009      	beq.n	8008084 <HAL_DMA_Init+0x38c>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a2f      	ldr	r2, [pc, #188]	@ (8008134 <HAL_DMA_Init+0x43c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d004      	beq.n	8008084 <HAL_DMA_Init+0x38c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a2e      	ldr	r2, [pc, #184]	@ (8008138 <HAL_DMA_Init+0x440>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d101      	bne.n	8008088 <HAL_DMA_Init+0x390>
 8008084:	2301      	movs	r3, #1
 8008086:	e000      	b.n	800808a <HAL_DMA_Init+0x392>
 8008088:	2300      	movs	r3, #0
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8092 	beq.w	80081b4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a21      	ldr	r2, [pc, #132]	@ (800811c <HAL_DMA_Init+0x424>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d021      	beq.n	80080de <HAL_DMA_Init+0x3e6>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a20      	ldr	r2, [pc, #128]	@ (8008120 <HAL_DMA_Init+0x428>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d01c      	beq.n	80080de <HAL_DMA_Init+0x3e6>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008124 <HAL_DMA_Init+0x42c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d017      	beq.n	80080de <HAL_DMA_Init+0x3e6>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a1d      	ldr	r2, [pc, #116]	@ (8008128 <HAL_DMA_Init+0x430>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d012      	beq.n	80080de <HAL_DMA_Init+0x3e6>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a1b      	ldr	r2, [pc, #108]	@ (800812c <HAL_DMA_Init+0x434>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d00d      	beq.n	80080de <HAL_DMA_Init+0x3e6>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008130 <HAL_DMA_Init+0x438>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d008      	beq.n	80080de <HAL_DMA_Init+0x3e6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a18      	ldr	r2, [pc, #96]	@ (8008134 <HAL_DMA_Init+0x43c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <HAL_DMA_Init+0x3e6>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a17      	ldr	r2, [pc, #92]	@ (8008138 <HAL_DMA_Init+0x440>)
 80080dc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2202      	movs	r2, #2
 80080ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4b10      	ldr	r3, [pc, #64]	@ (800813c <HAL_DMA_Init+0x444>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b40      	cmp	r3, #64	@ 0x40
 8008104:	d01c      	beq.n	8008140 <HAL_DMA_Init+0x448>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	2b80      	cmp	r3, #128	@ 0x80
 800810c:	d102      	bne.n	8008114 <HAL_DMA_Init+0x41c>
 800810e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008112:	e016      	b.n	8008142 <HAL_DMA_Init+0x44a>
 8008114:	2300      	movs	r3, #0
 8008116:	e014      	b.n	8008142 <HAL_DMA_Init+0x44a>
 8008118:	fe10803f 	.word	0xfe10803f
 800811c:	58025408 	.word	0x58025408
 8008120:	5802541c 	.word	0x5802541c
 8008124:	58025430 	.word	0x58025430
 8008128:	58025444 	.word	0x58025444
 800812c:	58025458 	.word	0x58025458
 8008130:	5802546c 	.word	0x5802546c
 8008134:	58025480 	.word	0x58025480
 8008138:	58025494 	.word	0x58025494
 800813c:	fffe000f 	.word	0xfffe000f
 8008140:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	68d2      	ldr	r2, [r2, #12]
 8008146:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008160:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008168:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008170:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	4b6e      	ldr	r3, [pc, #440]	@ (8008340 <HAL_DMA_Init+0x648>)
 8008188:	4413      	add	r3, r2
 800818a:	4a6e      	ldr	r2, [pc, #440]	@ (8008344 <HAL_DMA_Init+0x64c>)
 800818c:	fba2 2303 	umull	r2, r3, r2, r3
 8008190:	091b      	lsrs	r3, r3, #4
 8008192:	009a      	lsls	r2, r3, #2
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fe07 	bl	8009dac <DMA_CalcBaseAndBitshift>
 800819e:	4603      	mov	r3, r0
 80081a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081a6:	f003 031f 	and.w	r3, r3, #31
 80081aa:	2201      	movs	r2, #1
 80081ac:	409a      	lsls	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	605a      	str	r2, [r3, #4]
 80081b2:	e008      	b.n	80081c6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2240      	movs	r2, #64	@ 0x40
 80081b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2203      	movs	r2, #3
 80081be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e0b7      	b.n	8008336 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a5f      	ldr	r2, [pc, #380]	@ (8008348 <HAL_DMA_Init+0x650>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d072      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a5d      	ldr	r2, [pc, #372]	@ (800834c <HAL_DMA_Init+0x654>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d06d      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a5c      	ldr	r2, [pc, #368]	@ (8008350 <HAL_DMA_Init+0x658>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d068      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a5a      	ldr	r2, [pc, #360]	@ (8008354 <HAL_DMA_Init+0x65c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d063      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a59      	ldr	r2, [pc, #356]	@ (8008358 <HAL_DMA_Init+0x660>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d05e      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a57      	ldr	r2, [pc, #348]	@ (800835c <HAL_DMA_Init+0x664>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d059      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a56      	ldr	r2, [pc, #344]	@ (8008360 <HAL_DMA_Init+0x668>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d054      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a54      	ldr	r2, [pc, #336]	@ (8008364 <HAL_DMA_Init+0x66c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d04f      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a53      	ldr	r2, [pc, #332]	@ (8008368 <HAL_DMA_Init+0x670>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d04a      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a51      	ldr	r2, [pc, #324]	@ (800836c <HAL_DMA_Init+0x674>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d045      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a50      	ldr	r2, [pc, #320]	@ (8008370 <HAL_DMA_Init+0x678>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d040      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a4e      	ldr	r2, [pc, #312]	@ (8008374 <HAL_DMA_Init+0x67c>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d03b      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a4d      	ldr	r2, [pc, #308]	@ (8008378 <HAL_DMA_Init+0x680>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d036      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a4b      	ldr	r2, [pc, #300]	@ (800837c <HAL_DMA_Init+0x684>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d031      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a4a      	ldr	r2, [pc, #296]	@ (8008380 <HAL_DMA_Init+0x688>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d02c      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a48      	ldr	r2, [pc, #288]	@ (8008384 <HAL_DMA_Init+0x68c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d027      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a47      	ldr	r2, [pc, #284]	@ (8008388 <HAL_DMA_Init+0x690>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a45      	ldr	r2, [pc, #276]	@ (800838c <HAL_DMA_Init+0x694>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01d      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a44      	ldr	r2, [pc, #272]	@ (8008390 <HAL_DMA_Init+0x698>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d018      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a42      	ldr	r2, [pc, #264]	@ (8008394 <HAL_DMA_Init+0x69c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a41      	ldr	r2, [pc, #260]	@ (8008398 <HAL_DMA_Init+0x6a0>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00e      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a3f      	ldr	r2, [pc, #252]	@ (800839c <HAL_DMA_Init+0x6a4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d009      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a3e      	ldr	r2, [pc, #248]	@ (80083a0 <HAL_DMA_Init+0x6a8>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d004      	beq.n	80082b6 <HAL_DMA_Init+0x5be>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a3c      	ldr	r2, [pc, #240]	@ (80083a4 <HAL_DMA_Init+0x6ac>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d101      	bne.n	80082ba <HAL_DMA_Init+0x5c2>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <HAL_DMA_Init+0x5c4>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d032      	beq.n	8008326 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 fea1 	bl	800a008 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b80      	cmp	r3, #128	@ 0x80
 80082cc:	d102      	bne.n	80082d4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80082e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d010      	beq.n	8008314 <HAL_DMA_Init+0x61c>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d80c      	bhi.n	8008314 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f001 ff1e 	bl	800a13c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008310:	605a      	str	r2, [r3, #4]
 8008312:	e008      	b.n	8008326 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	a7fdabf8 	.word	0xa7fdabf8
 8008344:	cccccccd 	.word	0xcccccccd
 8008348:	40020010 	.word	0x40020010
 800834c:	40020028 	.word	0x40020028
 8008350:	40020040 	.word	0x40020040
 8008354:	40020058 	.word	0x40020058
 8008358:	40020070 	.word	0x40020070
 800835c:	40020088 	.word	0x40020088
 8008360:	400200a0 	.word	0x400200a0
 8008364:	400200b8 	.word	0x400200b8
 8008368:	40020410 	.word	0x40020410
 800836c:	40020428 	.word	0x40020428
 8008370:	40020440 	.word	0x40020440
 8008374:	40020458 	.word	0x40020458
 8008378:	40020470 	.word	0x40020470
 800837c:	40020488 	.word	0x40020488
 8008380:	400204a0 	.word	0x400204a0
 8008384:	400204b8 	.word	0x400204b8
 8008388:	58025408 	.word	0x58025408
 800838c:	5802541c 	.word	0x5802541c
 8008390:	58025430 	.word	0x58025430
 8008394:	58025444 	.word	0x58025444
 8008398:	58025458 	.word	0x58025458
 800839c:	5802546c 	.word	0x5802546c
 80083a0:	58025480 	.word	0x58025480
 80083a4:	58025494 	.word	0x58025494

080083a8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e1a8      	b.n	800870c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a82      	ldr	r2, [pc, #520]	@ (80085c8 <HAL_DMA_DeInit+0x220>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d04a      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a80      	ldr	r2, [pc, #512]	@ (80085cc <HAL_DMA_DeInit+0x224>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d045      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a7f      	ldr	r2, [pc, #508]	@ (80085d0 <HAL_DMA_DeInit+0x228>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d040      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a7d      	ldr	r2, [pc, #500]	@ (80085d4 <HAL_DMA_DeInit+0x22c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d03b      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a7c      	ldr	r2, [pc, #496]	@ (80085d8 <HAL_DMA_DeInit+0x230>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d036      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a7a      	ldr	r2, [pc, #488]	@ (80085dc <HAL_DMA_DeInit+0x234>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d031      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a79      	ldr	r2, [pc, #484]	@ (80085e0 <HAL_DMA_DeInit+0x238>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d02c      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a77      	ldr	r2, [pc, #476]	@ (80085e4 <HAL_DMA_DeInit+0x23c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d027      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a76      	ldr	r2, [pc, #472]	@ (80085e8 <HAL_DMA_DeInit+0x240>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d022      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a74      	ldr	r2, [pc, #464]	@ (80085ec <HAL_DMA_DeInit+0x244>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01d      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a73      	ldr	r2, [pc, #460]	@ (80085f0 <HAL_DMA_DeInit+0x248>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d018      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a71      	ldr	r2, [pc, #452]	@ (80085f4 <HAL_DMA_DeInit+0x24c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a70      	ldr	r2, [pc, #448]	@ (80085f8 <HAL_DMA_DeInit+0x250>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00e      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a6e      	ldr	r2, [pc, #440]	@ (80085fc <HAL_DMA_DeInit+0x254>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d009      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a6d      	ldr	r2, [pc, #436]	@ (8008600 <HAL_DMA_DeInit+0x258>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d004      	beq.n	800845a <HAL_DMA_DeInit+0xb2>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a6b      	ldr	r2, [pc, #428]	@ (8008604 <HAL_DMA_DeInit+0x25c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d108      	bne.n	800846c <HAL_DMA_DeInit+0xc4>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	e007      	b.n	800847c <HAL_DMA_DeInit+0xd4>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0201 	bic.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a51      	ldr	r2, [pc, #324]	@ (80085c8 <HAL_DMA_DeInit+0x220>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d04a      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a50      	ldr	r2, [pc, #320]	@ (80085cc <HAL_DMA_DeInit+0x224>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d045      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a4e      	ldr	r2, [pc, #312]	@ (80085d0 <HAL_DMA_DeInit+0x228>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d040      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a4d      	ldr	r2, [pc, #308]	@ (80085d4 <HAL_DMA_DeInit+0x22c>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d03b      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a4b      	ldr	r2, [pc, #300]	@ (80085d8 <HAL_DMA_DeInit+0x230>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d036      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a4a      	ldr	r2, [pc, #296]	@ (80085dc <HAL_DMA_DeInit+0x234>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d031      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a48      	ldr	r2, [pc, #288]	@ (80085e0 <HAL_DMA_DeInit+0x238>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d02c      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a47      	ldr	r2, [pc, #284]	@ (80085e4 <HAL_DMA_DeInit+0x23c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d027      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a45      	ldr	r2, [pc, #276]	@ (80085e8 <HAL_DMA_DeInit+0x240>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d022      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a44      	ldr	r2, [pc, #272]	@ (80085ec <HAL_DMA_DeInit+0x244>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d01d      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a42      	ldr	r2, [pc, #264]	@ (80085f0 <HAL_DMA_DeInit+0x248>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d018      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a41      	ldr	r2, [pc, #260]	@ (80085f4 <HAL_DMA_DeInit+0x24c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d013      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a3f      	ldr	r2, [pc, #252]	@ (80085f8 <HAL_DMA_DeInit+0x250>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00e      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a3e      	ldr	r2, [pc, #248]	@ (80085fc <HAL_DMA_DeInit+0x254>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d009      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a3c      	ldr	r2, [pc, #240]	@ (8008600 <HAL_DMA_DeInit+0x258>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d004      	beq.n	800851c <HAL_DMA_DeInit+0x174>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a3b      	ldr	r2, [pc, #236]	@ (8008604 <HAL_DMA_DeInit+0x25c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d101      	bne.n	8008520 <HAL_DMA_DeInit+0x178>
 800851c:	2301      	movs	r3, #1
 800851e:	e000      	b.n	8008522 <HAL_DMA_DeInit+0x17a>
 8008520:	2300      	movs	r3, #0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d025      	beq.n	8008572 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2200      	movs	r2, #0
 800852c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2200      	movs	r2, #0
 8008534:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2200      	movs	r2, #0
 800853c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2200      	movs	r2, #0
 8008544:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2221      	movs	r2, #33	@ 0x21
 8008554:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f001 fc28 	bl	8009dac <DMA_CalcBaseAndBitshift>
 800855c:	4603      	mov	r3, r0
 800855e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008564:	f003 031f 	and.w	r3, r3, #31
 8008568:	223f      	movs	r2, #63	@ 0x3f
 800856a:	409a      	lsls	r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	609a      	str	r2, [r3, #8]
 8008570:	e081      	b.n	8008676 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a24      	ldr	r2, [pc, #144]	@ (8008608 <HAL_DMA_DeInit+0x260>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d022      	beq.n	80085c2 <HAL_DMA_DeInit+0x21a>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a22      	ldr	r2, [pc, #136]	@ (800860c <HAL_DMA_DeInit+0x264>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d01d      	beq.n	80085c2 <HAL_DMA_DeInit+0x21a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a21      	ldr	r2, [pc, #132]	@ (8008610 <HAL_DMA_DeInit+0x268>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d018      	beq.n	80085c2 <HAL_DMA_DeInit+0x21a>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a1f      	ldr	r2, [pc, #124]	@ (8008614 <HAL_DMA_DeInit+0x26c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d013      	beq.n	80085c2 <HAL_DMA_DeInit+0x21a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a1e      	ldr	r2, [pc, #120]	@ (8008618 <HAL_DMA_DeInit+0x270>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00e      	beq.n	80085c2 <HAL_DMA_DeInit+0x21a>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a1c      	ldr	r2, [pc, #112]	@ (800861c <HAL_DMA_DeInit+0x274>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d009      	beq.n	80085c2 <HAL_DMA_DeInit+0x21a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008620 <HAL_DMA_DeInit+0x278>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <HAL_DMA_DeInit+0x21a>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a19      	ldr	r2, [pc, #100]	@ (8008624 <HAL_DMA_DeInit+0x27c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d132      	bne.n	8008628 <HAL_DMA_DeInit+0x280>
 80085c2:	2301      	movs	r3, #1
 80085c4:	e031      	b.n	800862a <HAL_DMA_DeInit+0x282>
 80085c6:	bf00      	nop
 80085c8:	40020010 	.word	0x40020010
 80085cc:	40020028 	.word	0x40020028
 80085d0:	40020040 	.word	0x40020040
 80085d4:	40020058 	.word	0x40020058
 80085d8:	40020070 	.word	0x40020070
 80085dc:	40020088 	.word	0x40020088
 80085e0:	400200a0 	.word	0x400200a0
 80085e4:	400200b8 	.word	0x400200b8
 80085e8:	40020410 	.word	0x40020410
 80085ec:	40020428 	.word	0x40020428
 80085f0:	40020440 	.word	0x40020440
 80085f4:	40020458 	.word	0x40020458
 80085f8:	40020470 	.word	0x40020470
 80085fc:	40020488 	.word	0x40020488
 8008600:	400204a0 	.word	0x400204a0
 8008604:	400204b8 	.word	0x400204b8
 8008608:	58025408 	.word	0x58025408
 800860c:	5802541c 	.word	0x5802541c
 8008610:	58025430 	.word	0x58025430
 8008614:	58025444 	.word	0x58025444
 8008618:	58025458 	.word	0x58025458
 800861c:	5802546c 	.word	0x5802546c
 8008620:	58025480 	.word	0x58025480
 8008624:	58025494 	.word	0x58025494
 8008628:	2300      	movs	r3, #0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d021      	beq.n	8008672 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2200      	movs	r2, #0
 8008644:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2200      	movs	r2, #0
 800864c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2200      	movs	r2, #0
 8008654:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 fba8 	bl	8009dac <DMA_CalcBaseAndBitshift>
 800865c:	4603      	mov	r3, r0
 800865e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008664:	f003 031f 	and.w	r3, r3, #31
 8008668:	2201      	movs	r2, #1
 800866a:	409a      	lsls	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	605a      	str	r2, [r3, #4]
 8008670:	e001      	b.n	8008676 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e04a      	b.n	800870c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f001 fcc6 	bl	800a008 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008694:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00f      	beq.n	80086be <HAL_DMA_DeInit+0x316>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b08      	cmp	r3, #8
 80086a4:	d80b      	bhi.n	80086be <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fd48 	bl	800a13c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80086bc:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e226      	b.n	8008b7e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_DMA_Start_IT+0x2a>
 800873a:	2302      	movs	r3, #2
 800873c:	e21f      	b.n	8008b7e <HAL_DMA_Start_IT+0x46a>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b01      	cmp	r3, #1
 8008750:	f040 820a 	bne.w	8008b68 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a68      	ldr	r2, [pc, #416]	@ (8008908 <HAL_DMA_Start_IT+0x1f4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d04a      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a66      	ldr	r2, [pc, #408]	@ (800890c <HAL_DMA_Start_IT+0x1f8>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d045      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a65      	ldr	r2, [pc, #404]	@ (8008910 <HAL_DMA_Start_IT+0x1fc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d040      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a63      	ldr	r2, [pc, #396]	@ (8008914 <HAL_DMA_Start_IT+0x200>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d03b      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a62      	ldr	r2, [pc, #392]	@ (8008918 <HAL_DMA_Start_IT+0x204>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d036      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a60      	ldr	r2, [pc, #384]	@ (800891c <HAL_DMA_Start_IT+0x208>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d031      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a5f      	ldr	r2, [pc, #380]	@ (8008920 <HAL_DMA_Start_IT+0x20c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d02c      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a5d      	ldr	r2, [pc, #372]	@ (8008924 <HAL_DMA_Start_IT+0x210>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d027      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a5c      	ldr	r2, [pc, #368]	@ (8008928 <HAL_DMA_Start_IT+0x214>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d022      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a5a      	ldr	r2, [pc, #360]	@ (800892c <HAL_DMA_Start_IT+0x218>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d01d      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a59      	ldr	r2, [pc, #356]	@ (8008930 <HAL_DMA_Start_IT+0x21c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d018      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a57      	ldr	r2, [pc, #348]	@ (8008934 <HAL_DMA_Start_IT+0x220>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d013      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a56      	ldr	r2, [pc, #344]	@ (8008938 <HAL_DMA_Start_IT+0x224>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d00e      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a54      	ldr	r2, [pc, #336]	@ (800893c <HAL_DMA_Start_IT+0x228>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d009      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a53      	ldr	r2, [pc, #332]	@ (8008940 <HAL_DMA_Start_IT+0x22c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d004      	beq.n	8008802 <HAL_DMA_Start_IT+0xee>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a51      	ldr	r2, [pc, #324]	@ (8008944 <HAL_DMA_Start_IT+0x230>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d108      	bne.n	8008814 <HAL_DMA_Start_IT+0x100>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0201 	bic.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	e007      	b.n	8008824 <HAL_DMA_Start_IT+0x110>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0201 	bic.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	68b9      	ldr	r1, [r7, #8]
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f001 f912 	bl	8009a54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a34      	ldr	r2, [pc, #208]	@ (8008908 <HAL_DMA_Start_IT+0x1f4>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d04a      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a33      	ldr	r2, [pc, #204]	@ (800890c <HAL_DMA_Start_IT+0x1f8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d045      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a31      	ldr	r2, [pc, #196]	@ (8008910 <HAL_DMA_Start_IT+0x1fc>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d040      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a30      	ldr	r2, [pc, #192]	@ (8008914 <HAL_DMA_Start_IT+0x200>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d03b      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a2e      	ldr	r2, [pc, #184]	@ (8008918 <HAL_DMA_Start_IT+0x204>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d036      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a2d      	ldr	r2, [pc, #180]	@ (800891c <HAL_DMA_Start_IT+0x208>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d031      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a2b      	ldr	r2, [pc, #172]	@ (8008920 <HAL_DMA_Start_IT+0x20c>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d02c      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a2a      	ldr	r2, [pc, #168]	@ (8008924 <HAL_DMA_Start_IT+0x210>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d027      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a28      	ldr	r2, [pc, #160]	@ (8008928 <HAL_DMA_Start_IT+0x214>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d022      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a27      	ldr	r2, [pc, #156]	@ (800892c <HAL_DMA_Start_IT+0x218>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d01d      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a25      	ldr	r2, [pc, #148]	@ (8008930 <HAL_DMA_Start_IT+0x21c>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d018      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a24      	ldr	r2, [pc, #144]	@ (8008934 <HAL_DMA_Start_IT+0x220>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d013      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a22      	ldr	r2, [pc, #136]	@ (8008938 <HAL_DMA_Start_IT+0x224>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d00e      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a21      	ldr	r2, [pc, #132]	@ (800893c <HAL_DMA_Start_IT+0x228>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d009      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008940 <HAL_DMA_Start_IT+0x22c>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d004      	beq.n	80088d0 <HAL_DMA_Start_IT+0x1bc>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008944 <HAL_DMA_Start_IT+0x230>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d101      	bne.n	80088d4 <HAL_DMA_Start_IT+0x1c0>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <HAL_DMA_Start_IT+0x1c2>
 80088d4:	2300      	movs	r3, #0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d036      	beq.n	8008948 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f023 021e 	bic.w	r2, r3, #30
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f042 0216 	orr.w	r2, r2, #22
 80088ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d03e      	beq.n	8008974 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0208 	orr.w	r2, r2, #8
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	e035      	b.n	8008974 <HAL_DMA_Start_IT+0x260>
 8008908:	40020010 	.word	0x40020010
 800890c:	40020028 	.word	0x40020028
 8008910:	40020040 	.word	0x40020040
 8008914:	40020058 	.word	0x40020058
 8008918:	40020070 	.word	0x40020070
 800891c:	40020088 	.word	0x40020088
 8008920:	400200a0 	.word	0x400200a0
 8008924:	400200b8 	.word	0x400200b8
 8008928:	40020410 	.word	0x40020410
 800892c:	40020428 	.word	0x40020428
 8008930:	40020440 	.word	0x40020440
 8008934:	40020458 	.word	0x40020458
 8008938:	40020470 	.word	0x40020470
 800893c:	40020488 	.word	0x40020488
 8008940:	400204a0 	.word	0x400204a0
 8008944:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f023 020e 	bic.w	r2, r3, #14
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f042 020a 	orr.w	r2, r2, #10
 800895a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008960:	2b00      	cmp	r3, #0
 8008962:	d007      	beq.n	8008974 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0204 	orr.w	r2, r2, #4
 8008972:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a83      	ldr	r2, [pc, #524]	@ (8008b88 <HAL_DMA_Start_IT+0x474>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d072      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a82      	ldr	r2, [pc, #520]	@ (8008b8c <HAL_DMA_Start_IT+0x478>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d06d      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a80      	ldr	r2, [pc, #512]	@ (8008b90 <HAL_DMA_Start_IT+0x47c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d068      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a7f      	ldr	r2, [pc, #508]	@ (8008b94 <HAL_DMA_Start_IT+0x480>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d063      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a7d      	ldr	r2, [pc, #500]	@ (8008b98 <HAL_DMA_Start_IT+0x484>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d05e      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a7c      	ldr	r2, [pc, #496]	@ (8008b9c <HAL_DMA_Start_IT+0x488>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d059      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a7a      	ldr	r2, [pc, #488]	@ (8008ba0 <HAL_DMA_Start_IT+0x48c>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d054      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a79      	ldr	r2, [pc, #484]	@ (8008ba4 <HAL_DMA_Start_IT+0x490>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d04f      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a77      	ldr	r2, [pc, #476]	@ (8008ba8 <HAL_DMA_Start_IT+0x494>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d04a      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a76      	ldr	r2, [pc, #472]	@ (8008bac <HAL_DMA_Start_IT+0x498>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d045      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a74      	ldr	r2, [pc, #464]	@ (8008bb0 <HAL_DMA_Start_IT+0x49c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d040      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a73      	ldr	r2, [pc, #460]	@ (8008bb4 <HAL_DMA_Start_IT+0x4a0>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d03b      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a71      	ldr	r2, [pc, #452]	@ (8008bb8 <HAL_DMA_Start_IT+0x4a4>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d036      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a70      	ldr	r2, [pc, #448]	@ (8008bbc <HAL_DMA_Start_IT+0x4a8>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d031      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a6e      	ldr	r2, [pc, #440]	@ (8008bc0 <HAL_DMA_Start_IT+0x4ac>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d02c      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a6d      	ldr	r2, [pc, #436]	@ (8008bc4 <HAL_DMA_Start_IT+0x4b0>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d027      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a6b      	ldr	r2, [pc, #428]	@ (8008bc8 <HAL_DMA_Start_IT+0x4b4>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d022      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a6a      	ldr	r2, [pc, #424]	@ (8008bcc <HAL_DMA_Start_IT+0x4b8>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d01d      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a68      	ldr	r2, [pc, #416]	@ (8008bd0 <HAL_DMA_Start_IT+0x4bc>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d018      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a67      	ldr	r2, [pc, #412]	@ (8008bd4 <HAL_DMA_Start_IT+0x4c0>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d013      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a65      	ldr	r2, [pc, #404]	@ (8008bd8 <HAL_DMA_Start_IT+0x4c4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00e      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a64      	ldr	r2, [pc, #400]	@ (8008bdc <HAL_DMA_Start_IT+0x4c8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d009      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a62      	ldr	r2, [pc, #392]	@ (8008be0 <HAL_DMA_Start_IT+0x4cc>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d004      	beq.n	8008a64 <HAL_DMA_Start_IT+0x350>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a61      	ldr	r2, [pc, #388]	@ (8008be4 <HAL_DMA_Start_IT+0x4d0>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d101      	bne.n	8008a68 <HAL_DMA_Start_IT+0x354>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e000      	b.n	8008a6a <HAL_DMA_Start_IT+0x356>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01a      	beq.n	8008aa4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d007      	beq.n	8008a8c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a8a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008aa2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a37      	ldr	r2, [pc, #220]	@ (8008b88 <HAL_DMA_Start_IT+0x474>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d04a      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a36      	ldr	r2, [pc, #216]	@ (8008b8c <HAL_DMA_Start_IT+0x478>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d045      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a34      	ldr	r2, [pc, #208]	@ (8008b90 <HAL_DMA_Start_IT+0x47c>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d040      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a33      	ldr	r2, [pc, #204]	@ (8008b94 <HAL_DMA_Start_IT+0x480>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d03b      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a31      	ldr	r2, [pc, #196]	@ (8008b98 <HAL_DMA_Start_IT+0x484>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d036      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a30      	ldr	r2, [pc, #192]	@ (8008b9c <HAL_DMA_Start_IT+0x488>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d031      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8008ba0 <HAL_DMA_Start_IT+0x48c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d02c      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a2d      	ldr	r2, [pc, #180]	@ (8008ba4 <HAL_DMA_Start_IT+0x490>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d027      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a2b      	ldr	r2, [pc, #172]	@ (8008ba8 <HAL_DMA_Start_IT+0x494>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d022      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a2a      	ldr	r2, [pc, #168]	@ (8008bac <HAL_DMA_Start_IT+0x498>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d01d      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a28      	ldr	r2, [pc, #160]	@ (8008bb0 <HAL_DMA_Start_IT+0x49c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d018      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a27      	ldr	r2, [pc, #156]	@ (8008bb4 <HAL_DMA_Start_IT+0x4a0>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d013      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a25      	ldr	r2, [pc, #148]	@ (8008bb8 <HAL_DMA_Start_IT+0x4a4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00e      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a24      	ldr	r2, [pc, #144]	@ (8008bbc <HAL_DMA_Start_IT+0x4a8>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d009      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a22      	ldr	r2, [pc, #136]	@ (8008bc0 <HAL_DMA_Start_IT+0x4ac>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <HAL_DMA_Start_IT+0x430>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a21      	ldr	r2, [pc, #132]	@ (8008bc4 <HAL_DMA_Start_IT+0x4b0>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d108      	bne.n	8008b56 <HAL_DMA_Start_IT+0x442>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f042 0201 	orr.w	r2, r2, #1
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	e012      	b.n	8008b7c <HAL_DMA_Start_IT+0x468>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f042 0201 	orr.w	r2, r2, #1
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	e009      	b.n	8008b7c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	40020010 	.word	0x40020010
 8008b8c:	40020028 	.word	0x40020028
 8008b90:	40020040 	.word	0x40020040
 8008b94:	40020058 	.word	0x40020058
 8008b98:	40020070 	.word	0x40020070
 8008b9c:	40020088 	.word	0x40020088
 8008ba0:	400200a0 	.word	0x400200a0
 8008ba4:	400200b8 	.word	0x400200b8
 8008ba8:	40020410 	.word	0x40020410
 8008bac:	40020428 	.word	0x40020428
 8008bb0:	40020440 	.word	0x40020440
 8008bb4:	40020458 	.word	0x40020458
 8008bb8:	40020470 	.word	0x40020470
 8008bbc:	40020488 	.word	0x40020488
 8008bc0:	400204a0 	.word	0x400204a0
 8008bc4:	400204b8 	.word	0x400204b8
 8008bc8:	58025408 	.word	0x58025408
 8008bcc:	5802541c 	.word	0x5802541c
 8008bd0:	58025430 	.word	0x58025430
 8008bd4:	58025444 	.word	0x58025444
 8008bd8:	58025458 	.word	0x58025458
 8008bdc:	5802546c 	.word	0x5802546c
 8008be0:	58025480 	.word	0x58025480
 8008be4:	58025494 	.word	0x58025494

08008be8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08a      	sub	sp, #40	@ 0x28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008bf4:	4b67      	ldr	r3, [pc, #412]	@ (8008d94 <HAL_DMA_IRQHandler+0x1ac>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a67      	ldr	r2, [pc, #412]	@ (8008d98 <HAL_DMA_IRQHandler+0x1b0>)
 8008bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008bfe:	0a9b      	lsrs	r3, r3, #10
 8008c00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8008d9c <HAL_DMA_IRQHandler+0x1b4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d04a      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a5d      	ldr	r2, [pc, #372]	@ (8008da0 <HAL_DMA_IRQHandler+0x1b8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d045      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a5c      	ldr	r2, [pc, #368]	@ (8008da4 <HAL_DMA_IRQHandler+0x1bc>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d040      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8008da8 <HAL_DMA_IRQHandler+0x1c0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d03b      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a59      	ldr	r2, [pc, #356]	@ (8008dac <HAL_DMA_IRQHandler+0x1c4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d036      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a57      	ldr	r2, [pc, #348]	@ (8008db0 <HAL_DMA_IRQHandler+0x1c8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d031      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a56      	ldr	r2, [pc, #344]	@ (8008db4 <HAL_DMA_IRQHandler+0x1cc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d02c      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a54      	ldr	r2, [pc, #336]	@ (8008db8 <HAL_DMA_IRQHandler+0x1d0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d027      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a53      	ldr	r2, [pc, #332]	@ (8008dbc <HAL_DMA_IRQHandler+0x1d4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d022      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a51      	ldr	r2, [pc, #324]	@ (8008dc0 <HAL_DMA_IRQHandler+0x1d8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d01d      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a50      	ldr	r2, [pc, #320]	@ (8008dc4 <HAL_DMA_IRQHandler+0x1dc>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d018      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a4e      	ldr	r2, [pc, #312]	@ (8008dc8 <HAL_DMA_IRQHandler+0x1e0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d013      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a4d      	ldr	r2, [pc, #308]	@ (8008dcc <HAL_DMA_IRQHandler+0x1e4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00e      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8008dd0 <HAL_DMA_IRQHandler+0x1e8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d009      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a4a      	ldr	r2, [pc, #296]	@ (8008dd4 <HAL_DMA_IRQHandler+0x1ec>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d004      	beq.n	8008cba <HAL_DMA_IRQHandler+0xd2>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a48      	ldr	r2, [pc, #288]	@ (8008dd8 <HAL_DMA_IRQHandler+0x1f0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d101      	bne.n	8008cbe <HAL_DMA_IRQHandler+0xd6>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <HAL_DMA_IRQHandler+0xd8>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	f000 842b 	beq.w	800951c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cca:	f003 031f 	and.w	r3, r3, #31
 8008cce:	2208      	movs	r2, #8
 8008cd0:	409a      	lsls	r2, r3
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80a2 	beq.w	8008e20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8008d9c <HAL_DMA_IRQHandler+0x1b4>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d04a      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a2d      	ldr	r2, [pc, #180]	@ (8008da0 <HAL_DMA_IRQHandler+0x1b8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d045      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8008da4 <HAL_DMA_IRQHandler+0x1bc>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d040      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8008da8 <HAL_DMA_IRQHandler+0x1c0>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d03b      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a28      	ldr	r2, [pc, #160]	@ (8008dac <HAL_DMA_IRQHandler+0x1c4>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d036      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a27      	ldr	r2, [pc, #156]	@ (8008db0 <HAL_DMA_IRQHandler+0x1c8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d031      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a25      	ldr	r2, [pc, #148]	@ (8008db4 <HAL_DMA_IRQHandler+0x1cc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d02c      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a24      	ldr	r2, [pc, #144]	@ (8008db8 <HAL_DMA_IRQHandler+0x1d0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d027      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a22      	ldr	r2, [pc, #136]	@ (8008dbc <HAL_DMA_IRQHandler+0x1d4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d022      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a21      	ldr	r2, [pc, #132]	@ (8008dc0 <HAL_DMA_IRQHandler+0x1d8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d01d      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc4 <HAL_DMA_IRQHandler+0x1dc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d018      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8008dc8 <HAL_DMA_IRQHandler+0x1e0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d013      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a1c      	ldr	r2, [pc, #112]	@ (8008dcc <HAL_DMA_IRQHandler+0x1e4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00e      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd0 <HAL_DMA_IRQHandler+0x1e8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d009      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a19      	ldr	r2, [pc, #100]	@ (8008dd4 <HAL_DMA_IRQHandler+0x1ec>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d004      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x194>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a18      	ldr	r2, [pc, #96]	@ (8008dd8 <HAL_DMA_IRQHandler+0x1f0>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d12f      	bne.n	8008ddc <HAL_DMA_IRQHandler+0x1f4>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bf14      	ite	ne
 8008d8a:	2301      	movne	r3, #1
 8008d8c:	2300      	moveq	r3, #0
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	e02e      	b.n	8008df0 <HAL_DMA_IRQHandler+0x208>
 8008d92:	bf00      	nop
 8008d94:	24000524 	.word	0x24000524
 8008d98:	1b4e81b5 	.word	0x1b4e81b5
 8008d9c:	40020010 	.word	0x40020010
 8008da0:	40020028 	.word	0x40020028
 8008da4:	40020040 	.word	0x40020040
 8008da8:	40020058 	.word	0x40020058
 8008dac:	40020070 	.word	0x40020070
 8008db0:	40020088 	.word	0x40020088
 8008db4:	400200a0 	.word	0x400200a0
 8008db8:	400200b8 	.word	0x400200b8
 8008dbc:	40020410 	.word	0x40020410
 8008dc0:	40020428 	.word	0x40020428
 8008dc4:	40020440 	.word	0x40020440
 8008dc8:	40020458 	.word	0x40020458
 8008dcc:	40020470 	.word	0x40020470
 8008dd0:	40020488 	.word	0x40020488
 8008dd4:	400204a0 	.word	0x400204a0
 8008dd8:	400204b8 	.word	0x400204b8
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bf14      	ite	ne
 8008dea:	2301      	movne	r3, #1
 8008dec:	2300      	moveq	r3, #0
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d015      	beq.n	8008e20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0204 	bic.w	r2, r2, #4
 8008e02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e08:	f003 031f 	and.w	r3, r3, #31
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	409a      	lsls	r2, r3
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e18:	f043 0201 	orr.w	r2, r3, #1
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e24:	f003 031f 	and.w	r3, r3, #31
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d06e      	beq.n	8008f14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a69      	ldr	r2, [pc, #420]	@ (8008fe0 <HAL_DMA_IRQHandler+0x3f8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d04a      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a67      	ldr	r2, [pc, #412]	@ (8008fe4 <HAL_DMA_IRQHandler+0x3fc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d045      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a66      	ldr	r2, [pc, #408]	@ (8008fe8 <HAL_DMA_IRQHandler+0x400>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d040      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a64      	ldr	r2, [pc, #400]	@ (8008fec <HAL_DMA_IRQHandler+0x404>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d03b      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a63      	ldr	r2, [pc, #396]	@ (8008ff0 <HAL_DMA_IRQHandler+0x408>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d036      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a61      	ldr	r2, [pc, #388]	@ (8008ff4 <HAL_DMA_IRQHandler+0x40c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d031      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a60      	ldr	r2, [pc, #384]	@ (8008ff8 <HAL_DMA_IRQHandler+0x410>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d02c      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a5e      	ldr	r2, [pc, #376]	@ (8008ffc <HAL_DMA_IRQHandler+0x414>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d027      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8009000 <HAL_DMA_IRQHandler+0x418>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d022      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a5b      	ldr	r2, [pc, #364]	@ (8009004 <HAL_DMA_IRQHandler+0x41c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d01d      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a5a      	ldr	r2, [pc, #360]	@ (8009008 <HAL_DMA_IRQHandler+0x420>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d018      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a58      	ldr	r2, [pc, #352]	@ (800900c <HAL_DMA_IRQHandler+0x424>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d013      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a57      	ldr	r2, [pc, #348]	@ (8009010 <HAL_DMA_IRQHandler+0x428>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d00e      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a55      	ldr	r2, [pc, #340]	@ (8009014 <HAL_DMA_IRQHandler+0x42c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d009      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a54      	ldr	r2, [pc, #336]	@ (8009018 <HAL_DMA_IRQHandler+0x430>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d004      	beq.n	8008ed6 <HAL_DMA_IRQHandler+0x2ee>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a52      	ldr	r2, [pc, #328]	@ (800901c <HAL_DMA_IRQHandler+0x434>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d10a      	bne.n	8008eec <HAL_DMA_IRQHandler+0x304>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bf14      	ite	ne
 8008ee4:	2301      	movne	r3, #1
 8008ee6:	2300      	moveq	r3, #0
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	e003      	b.n	8008ef4 <HAL_DMA_IRQHandler+0x30c>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00d      	beq.n	8008f14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008efc:	f003 031f 	and.w	r3, r3, #31
 8008f00:	2201      	movs	r2, #1
 8008f02:	409a      	lsls	r2, r3
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f0c:	f043 0202 	orr.w	r2, r3, #2
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f18:	f003 031f 	and.w	r3, r3, #31
 8008f1c:	2204      	movs	r2, #4
 8008f1e:	409a      	lsls	r2, r3
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	4013      	ands	r3, r2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 808f 	beq.w	8009048 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008fe0 <HAL_DMA_IRQHandler+0x3f8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d04a      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe4 <HAL_DMA_IRQHandler+0x3fc>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d045      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a29      	ldr	r2, [pc, #164]	@ (8008fe8 <HAL_DMA_IRQHandler+0x400>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d040      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a27      	ldr	r2, [pc, #156]	@ (8008fec <HAL_DMA_IRQHandler+0x404>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d03b      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a26      	ldr	r2, [pc, #152]	@ (8008ff0 <HAL_DMA_IRQHandler+0x408>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d036      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a24      	ldr	r2, [pc, #144]	@ (8008ff4 <HAL_DMA_IRQHandler+0x40c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d031      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a23      	ldr	r2, [pc, #140]	@ (8008ff8 <HAL_DMA_IRQHandler+0x410>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d02c      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a21      	ldr	r2, [pc, #132]	@ (8008ffc <HAL_DMA_IRQHandler+0x414>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d027      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a20      	ldr	r2, [pc, #128]	@ (8009000 <HAL_DMA_IRQHandler+0x418>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d022      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1e      	ldr	r2, [pc, #120]	@ (8009004 <HAL_DMA_IRQHandler+0x41c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d01d      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a1d      	ldr	r2, [pc, #116]	@ (8009008 <HAL_DMA_IRQHandler+0x420>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d018      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800900c <HAL_DMA_IRQHandler+0x424>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d013      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8009010 <HAL_DMA_IRQHandler+0x428>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d00e      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a18      	ldr	r2, [pc, #96]	@ (8009014 <HAL_DMA_IRQHandler+0x42c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d009      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a17      	ldr	r2, [pc, #92]	@ (8009018 <HAL_DMA_IRQHandler+0x430>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d004      	beq.n	8008fca <HAL_DMA_IRQHandler+0x3e2>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a15      	ldr	r2, [pc, #84]	@ (800901c <HAL_DMA_IRQHandler+0x434>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d12a      	bne.n	8009020 <HAL_DMA_IRQHandler+0x438>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0302 	and.w	r3, r3, #2
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bf14      	ite	ne
 8008fd8:	2301      	movne	r3, #1
 8008fda:	2300      	moveq	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	e023      	b.n	8009028 <HAL_DMA_IRQHandler+0x440>
 8008fe0:	40020010 	.word	0x40020010
 8008fe4:	40020028 	.word	0x40020028
 8008fe8:	40020040 	.word	0x40020040
 8008fec:	40020058 	.word	0x40020058
 8008ff0:	40020070 	.word	0x40020070
 8008ff4:	40020088 	.word	0x40020088
 8008ff8:	400200a0 	.word	0x400200a0
 8008ffc:	400200b8 	.word	0x400200b8
 8009000:	40020410 	.word	0x40020410
 8009004:	40020428 	.word	0x40020428
 8009008:	40020440 	.word	0x40020440
 800900c:	40020458 	.word	0x40020458
 8009010:	40020470 	.word	0x40020470
 8009014:	40020488 	.word	0x40020488
 8009018:	400204a0 	.word	0x400204a0
 800901c:	400204b8 	.word	0x400204b8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2300      	movs	r3, #0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00d      	beq.n	8009048 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009030:	f003 031f 	and.w	r3, r3, #31
 8009034:	2204      	movs	r2, #4
 8009036:	409a      	lsls	r2, r3
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009040:	f043 0204 	orr.w	r2, r3, #4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800904c:	f003 031f 	and.w	r3, r3, #31
 8009050:	2210      	movs	r2, #16
 8009052:	409a      	lsls	r2, r3
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	4013      	ands	r3, r2
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 80a6 	beq.w	80091aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a85      	ldr	r2, [pc, #532]	@ (8009278 <HAL_DMA_IRQHandler+0x690>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d04a      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a83      	ldr	r2, [pc, #524]	@ (800927c <HAL_DMA_IRQHandler+0x694>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d045      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a82      	ldr	r2, [pc, #520]	@ (8009280 <HAL_DMA_IRQHandler+0x698>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d040      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a80      	ldr	r2, [pc, #512]	@ (8009284 <HAL_DMA_IRQHandler+0x69c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d03b      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a7f      	ldr	r2, [pc, #508]	@ (8009288 <HAL_DMA_IRQHandler+0x6a0>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d036      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a7d      	ldr	r2, [pc, #500]	@ (800928c <HAL_DMA_IRQHandler+0x6a4>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d031      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a7c      	ldr	r2, [pc, #496]	@ (8009290 <HAL_DMA_IRQHandler+0x6a8>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d02c      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a7a      	ldr	r2, [pc, #488]	@ (8009294 <HAL_DMA_IRQHandler+0x6ac>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d027      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a79      	ldr	r2, [pc, #484]	@ (8009298 <HAL_DMA_IRQHandler+0x6b0>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d022      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a77      	ldr	r2, [pc, #476]	@ (800929c <HAL_DMA_IRQHandler+0x6b4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d01d      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a76      	ldr	r2, [pc, #472]	@ (80092a0 <HAL_DMA_IRQHandler+0x6b8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d018      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a74      	ldr	r2, [pc, #464]	@ (80092a4 <HAL_DMA_IRQHandler+0x6bc>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d013      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a73      	ldr	r2, [pc, #460]	@ (80092a8 <HAL_DMA_IRQHandler+0x6c0>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d00e      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a71      	ldr	r2, [pc, #452]	@ (80092ac <HAL_DMA_IRQHandler+0x6c4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d009      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a70      	ldr	r2, [pc, #448]	@ (80092b0 <HAL_DMA_IRQHandler+0x6c8>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d004      	beq.n	80090fe <HAL_DMA_IRQHandler+0x516>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a6e      	ldr	r2, [pc, #440]	@ (80092b4 <HAL_DMA_IRQHandler+0x6cc>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d10a      	bne.n	8009114 <HAL_DMA_IRQHandler+0x52c>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0308 	and.w	r3, r3, #8
 8009108:	2b00      	cmp	r3, #0
 800910a:	bf14      	ite	ne
 800910c:	2301      	movne	r3, #1
 800910e:	2300      	moveq	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	e009      	b.n	8009128 <HAL_DMA_IRQHandler+0x540>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	bf14      	ite	ne
 8009122:	2301      	movne	r3, #1
 8009124:	2300      	moveq	r3, #0
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	d03e      	beq.n	80091aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009130:	f003 031f 	and.w	r3, r3, #31
 8009134:	2210      	movs	r2, #16
 8009136:	409a      	lsls	r2, r3
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d018      	beq.n	800917c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d108      	bne.n	800916a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	d024      	beq.n	80091aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	4798      	blx	r3
 8009168:	e01f      	b.n	80091aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916e:	2b00      	cmp	r3, #0
 8009170:	d01b      	beq.n	80091aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	4798      	blx	r3
 800917a:	e016      	b.n	80091aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009186:	2b00      	cmp	r3, #0
 8009188:	d107      	bne.n	800919a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f022 0208 	bic.w	r2, r2, #8
 8009198:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d003      	beq.n	80091aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091ae:	f003 031f 	and.w	r3, r3, #31
 80091b2:	2220      	movs	r2, #32
 80091b4:	409a      	lsls	r2, r3
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	4013      	ands	r3, r2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8110 	beq.w	80093e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009278 <HAL_DMA_IRQHandler+0x690>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d04a      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a2b      	ldr	r2, [pc, #172]	@ (800927c <HAL_DMA_IRQHandler+0x694>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d045      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a29      	ldr	r2, [pc, #164]	@ (8009280 <HAL_DMA_IRQHandler+0x698>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d040      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a28      	ldr	r2, [pc, #160]	@ (8009284 <HAL_DMA_IRQHandler+0x69c>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d03b      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a26      	ldr	r2, [pc, #152]	@ (8009288 <HAL_DMA_IRQHandler+0x6a0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d036      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a25      	ldr	r2, [pc, #148]	@ (800928c <HAL_DMA_IRQHandler+0x6a4>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d031      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a23      	ldr	r2, [pc, #140]	@ (8009290 <HAL_DMA_IRQHandler+0x6a8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d02c      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a22      	ldr	r2, [pc, #136]	@ (8009294 <HAL_DMA_IRQHandler+0x6ac>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d027      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a20      	ldr	r2, [pc, #128]	@ (8009298 <HAL_DMA_IRQHandler+0x6b0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d022      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a1f      	ldr	r2, [pc, #124]	@ (800929c <HAL_DMA_IRQHandler+0x6b4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d01d      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1d      	ldr	r2, [pc, #116]	@ (80092a0 <HAL_DMA_IRQHandler+0x6b8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d018      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1c      	ldr	r2, [pc, #112]	@ (80092a4 <HAL_DMA_IRQHandler+0x6bc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d013      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1a      	ldr	r2, [pc, #104]	@ (80092a8 <HAL_DMA_IRQHandler+0x6c0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00e      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a19      	ldr	r2, [pc, #100]	@ (80092ac <HAL_DMA_IRQHandler+0x6c4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d009      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a17      	ldr	r2, [pc, #92]	@ (80092b0 <HAL_DMA_IRQHandler+0x6c8>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_DMA_IRQHandler+0x678>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a16      	ldr	r2, [pc, #88]	@ (80092b4 <HAL_DMA_IRQHandler+0x6cc>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d12b      	bne.n	80092b8 <HAL_DMA_IRQHandler+0x6d0>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0310 	and.w	r3, r3, #16
 800926a:	2b00      	cmp	r3, #0
 800926c:	bf14      	ite	ne
 800926e:	2301      	movne	r3, #1
 8009270:	2300      	moveq	r3, #0
 8009272:	b2db      	uxtb	r3, r3
 8009274:	e02a      	b.n	80092cc <HAL_DMA_IRQHandler+0x6e4>
 8009276:	bf00      	nop
 8009278:	40020010 	.word	0x40020010
 800927c:	40020028 	.word	0x40020028
 8009280:	40020040 	.word	0x40020040
 8009284:	40020058 	.word	0x40020058
 8009288:	40020070 	.word	0x40020070
 800928c:	40020088 	.word	0x40020088
 8009290:	400200a0 	.word	0x400200a0
 8009294:	400200b8 	.word	0x400200b8
 8009298:	40020410 	.word	0x40020410
 800929c:	40020428 	.word	0x40020428
 80092a0:	40020440 	.word	0x40020440
 80092a4:	40020458 	.word	0x40020458
 80092a8:	40020470 	.word	0x40020470
 80092ac:	40020488 	.word	0x40020488
 80092b0:	400204a0 	.word	0x400204a0
 80092b4:	400204b8 	.word	0x400204b8
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bf14      	ite	ne
 80092c6:	2301      	movne	r3, #1
 80092c8:	2300      	moveq	r3, #0
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 8087 	beq.w	80093e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092d6:	f003 031f 	and.w	r3, r3, #31
 80092da:	2220      	movs	r2, #32
 80092dc:	409a      	lsls	r2, r3
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	d139      	bne.n	8009362 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0216 	bic.w	r2, r2, #22
 80092fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695a      	ldr	r2, [r3, #20]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800930c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d103      	bne.n	800931e <HAL_DMA_IRQHandler+0x736>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800931a:	2b00      	cmp	r3, #0
 800931c:	d007      	beq.n	800932e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0208 	bic.w	r2, r2, #8
 800932c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009332:	f003 031f 	and.w	r3, r3, #31
 8009336:	223f      	movs	r2, #63	@ 0x3f
 8009338:	409a      	lsls	r2, r3
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          if(hdma->XferAbortCallback != NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 834a 	beq.w	80099ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
          }
          return;
 8009360:	e344      	b.n	80099ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d018      	beq.n	80093a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d108      	bne.n	8009390 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009382:	2b00      	cmp	r3, #0
 8009384:	d02c      	beq.n	80093e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	4798      	blx	r3
 800938e:	e027      	b.n	80093e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d023      	beq.n	80093e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	4798      	blx	r3
 80093a0:	e01e      	b.n	80093e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10f      	bne.n	80093d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 0210 	bic.w	r2, r2, #16
 80093be:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8306 	beq.w	80099f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 8088 	beq.w	8009508 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2204      	movs	r2, #4
 80093fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a7a      	ldr	r2, [pc, #488]	@ (80095f0 <HAL_DMA_IRQHandler+0xa08>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d04a      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a79      	ldr	r2, [pc, #484]	@ (80095f4 <HAL_DMA_IRQHandler+0xa0c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d045      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a77      	ldr	r2, [pc, #476]	@ (80095f8 <HAL_DMA_IRQHandler+0xa10>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d040      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a76      	ldr	r2, [pc, #472]	@ (80095fc <HAL_DMA_IRQHandler+0xa14>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d03b      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a74      	ldr	r2, [pc, #464]	@ (8009600 <HAL_DMA_IRQHandler+0xa18>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d036      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a73      	ldr	r2, [pc, #460]	@ (8009604 <HAL_DMA_IRQHandler+0xa1c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d031      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a71      	ldr	r2, [pc, #452]	@ (8009608 <HAL_DMA_IRQHandler+0xa20>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d02c      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a70      	ldr	r2, [pc, #448]	@ (800960c <HAL_DMA_IRQHandler+0xa24>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d027      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a6e      	ldr	r2, [pc, #440]	@ (8009610 <HAL_DMA_IRQHandler+0xa28>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d022      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a6d      	ldr	r2, [pc, #436]	@ (8009614 <HAL_DMA_IRQHandler+0xa2c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d01d      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a6b      	ldr	r2, [pc, #428]	@ (8009618 <HAL_DMA_IRQHandler+0xa30>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d018      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a6a      	ldr	r2, [pc, #424]	@ (800961c <HAL_DMA_IRQHandler+0xa34>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d013      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a68      	ldr	r2, [pc, #416]	@ (8009620 <HAL_DMA_IRQHandler+0xa38>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00e      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a67      	ldr	r2, [pc, #412]	@ (8009624 <HAL_DMA_IRQHandler+0xa3c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a65      	ldr	r2, [pc, #404]	@ (8009628 <HAL_DMA_IRQHandler+0xa40>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <HAL_DMA_IRQHandler+0x8b8>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a64      	ldr	r2, [pc, #400]	@ (800962c <HAL_DMA_IRQHandler+0xa44>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d108      	bne.n	80094b2 <HAL_DMA_IRQHandler+0x8ca>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0201 	bic.w	r2, r2, #1
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e007      	b.n	80094c2 <HAL_DMA_IRQHandler+0x8da>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0201 	bic.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3301      	adds	r3, #1
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d307      	bcc.n	80094de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f2      	bne.n	80094c2 <HAL_DMA_IRQHandler+0x8da>
 80094dc:	e000      	b.n	80094e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80094de:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2203      	movs	r2, #3
 80094fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80094fe:	e003      	b.n	8009508 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800950c:	2b00      	cmp	r3, #0
 800950e:	f000 8272 	beq.w	80099f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
 800951a:	e26c      	b.n	80099f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a43      	ldr	r2, [pc, #268]	@ (8009630 <HAL_DMA_IRQHandler+0xa48>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d022      	beq.n	800956c <HAL_DMA_IRQHandler+0x984>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a42      	ldr	r2, [pc, #264]	@ (8009634 <HAL_DMA_IRQHandler+0xa4c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d01d      	beq.n	800956c <HAL_DMA_IRQHandler+0x984>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a40      	ldr	r2, [pc, #256]	@ (8009638 <HAL_DMA_IRQHandler+0xa50>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d018      	beq.n	800956c <HAL_DMA_IRQHandler+0x984>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a3f      	ldr	r2, [pc, #252]	@ (800963c <HAL_DMA_IRQHandler+0xa54>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d013      	beq.n	800956c <HAL_DMA_IRQHandler+0x984>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a3d      	ldr	r2, [pc, #244]	@ (8009640 <HAL_DMA_IRQHandler+0xa58>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00e      	beq.n	800956c <HAL_DMA_IRQHandler+0x984>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a3c      	ldr	r2, [pc, #240]	@ (8009644 <HAL_DMA_IRQHandler+0xa5c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d009      	beq.n	800956c <HAL_DMA_IRQHandler+0x984>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a3a      	ldr	r2, [pc, #232]	@ (8009648 <HAL_DMA_IRQHandler+0xa60>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d004      	beq.n	800956c <HAL_DMA_IRQHandler+0x984>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a39      	ldr	r2, [pc, #228]	@ (800964c <HAL_DMA_IRQHandler+0xa64>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d101      	bne.n	8009570 <HAL_DMA_IRQHandler+0x988>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <HAL_DMA_IRQHandler+0x98a>
 8009570:	2300      	movs	r3, #0
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 823f 	beq.w	80099f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009584:	f003 031f 	and.w	r3, r3, #31
 8009588:	2204      	movs	r2, #4
 800958a:	409a      	lsls	r2, r3
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	4013      	ands	r3, r2
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 80cd 	beq.w	8009730 <HAL_DMA_IRQHandler+0xb48>
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f003 0304 	and.w	r3, r3, #4
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 80c7 	beq.w	8009730 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095a6:	f003 031f 	and.w	r3, r3, #31
 80095aa:	2204      	movs	r2, #4
 80095ac:	409a      	lsls	r2, r3
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d049      	beq.n	8009650 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8210 	beq.w	80099f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095d8:	e20a      	b.n	80099f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 8206 	beq.w	80099f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095ec:	e200      	b.n	80099f0 <HAL_DMA_IRQHandler+0xe08>
 80095ee:	bf00      	nop
 80095f0:	40020010 	.word	0x40020010
 80095f4:	40020028 	.word	0x40020028
 80095f8:	40020040 	.word	0x40020040
 80095fc:	40020058 	.word	0x40020058
 8009600:	40020070 	.word	0x40020070
 8009604:	40020088 	.word	0x40020088
 8009608:	400200a0 	.word	0x400200a0
 800960c:	400200b8 	.word	0x400200b8
 8009610:	40020410 	.word	0x40020410
 8009614:	40020428 	.word	0x40020428
 8009618:	40020440 	.word	0x40020440
 800961c:	40020458 	.word	0x40020458
 8009620:	40020470 	.word	0x40020470
 8009624:	40020488 	.word	0x40020488
 8009628:	400204a0 	.word	0x400204a0
 800962c:	400204b8 	.word	0x400204b8
 8009630:	58025408 	.word	0x58025408
 8009634:	5802541c 	.word	0x5802541c
 8009638:	58025430 	.word	0x58025430
 800963c:	58025444 	.word	0x58025444
 8009640:	58025458 	.word	0x58025458
 8009644:	5802546c 	.word	0x5802546c
 8009648:	58025480 	.word	0x58025480
 800964c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b00      	cmp	r3, #0
 8009658:	d160      	bne.n	800971c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a7f      	ldr	r2, [pc, #508]	@ (800985c <HAL_DMA_IRQHandler+0xc74>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d04a      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a7d      	ldr	r2, [pc, #500]	@ (8009860 <HAL_DMA_IRQHandler+0xc78>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d045      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a7c      	ldr	r2, [pc, #496]	@ (8009864 <HAL_DMA_IRQHandler+0xc7c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d040      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a7a      	ldr	r2, [pc, #488]	@ (8009868 <HAL_DMA_IRQHandler+0xc80>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d03b      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a79      	ldr	r2, [pc, #484]	@ (800986c <HAL_DMA_IRQHandler+0xc84>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d036      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a77      	ldr	r2, [pc, #476]	@ (8009870 <HAL_DMA_IRQHandler+0xc88>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d031      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a76      	ldr	r2, [pc, #472]	@ (8009874 <HAL_DMA_IRQHandler+0xc8c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d02c      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a74      	ldr	r2, [pc, #464]	@ (8009878 <HAL_DMA_IRQHandler+0xc90>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d027      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a73      	ldr	r2, [pc, #460]	@ (800987c <HAL_DMA_IRQHandler+0xc94>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d022      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a71      	ldr	r2, [pc, #452]	@ (8009880 <HAL_DMA_IRQHandler+0xc98>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d01d      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a70      	ldr	r2, [pc, #448]	@ (8009884 <HAL_DMA_IRQHandler+0xc9c>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d018      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a6e      	ldr	r2, [pc, #440]	@ (8009888 <HAL_DMA_IRQHandler+0xca0>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d013      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a6d      	ldr	r2, [pc, #436]	@ (800988c <HAL_DMA_IRQHandler+0xca4>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d00e      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a6b      	ldr	r2, [pc, #428]	@ (8009890 <HAL_DMA_IRQHandler+0xca8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d009      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a6a      	ldr	r2, [pc, #424]	@ (8009894 <HAL_DMA_IRQHandler+0xcac>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d004      	beq.n	80096fa <HAL_DMA_IRQHandler+0xb12>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a68      	ldr	r2, [pc, #416]	@ (8009898 <HAL_DMA_IRQHandler+0xcb0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d108      	bne.n	800970c <HAL_DMA_IRQHandler+0xb24>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0208 	bic.w	r2, r2, #8
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	e007      	b.n	800971c <HAL_DMA_IRQHandler+0xb34>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0204 	bic.w	r2, r2, #4
 800971a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 8165 	beq.w	80099f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800972e:	e15f      	b.n	80099f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009734:	f003 031f 	and.w	r3, r3, #31
 8009738:	2202      	movs	r2, #2
 800973a:	409a      	lsls	r2, r3
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	4013      	ands	r3, r2
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 80c5 	beq.w	80098d0 <HAL_DMA_IRQHandler+0xce8>
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 80bf 	beq.w	80098d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009756:	f003 031f 	and.w	r3, r3, #31
 800975a:	2202      	movs	r2, #2
 800975c:	409a      	lsls	r2, r3
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d018      	beq.n	800979e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 813a 	beq.w	80099f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009788:	e134      	b.n	80099f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 8130 	beq.w	80099f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800979c:	e12a      	b.n	80099f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	f003 0320 	and.w	r3, r3, #32
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f040 8089 	bne.w	80098bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a2b      	ldr	r2, [pc, #172]	@ (800985c <HAL_DMA_IRQHandler+0xc74>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d04a      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a29      	ldr	r2, [pc, #164]	@ (8009860 <HAL_DMA_IRQHandler+0xc78>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d045      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a28      	ldr	r2, [pc, #160]	@ (8009864 <HAL_DMA_IRQHandler+0xc7c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d040      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a26      	ldr	r2, [pc, #152]	@ (8009868 <HAL_DMA_IRQHandler+0xc80>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d03b      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a25      	ldr	r2, [pc, #148]	@ (800986c <HAL_DMA_IRQHandler+0xc84>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d036      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a23      	ldr	r2, [pc, #140]	@ (8009870 <HAL_DMA_IRQHandler+0xc88>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d031      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a22      	ldr	r2, [pc, #136]	@ (8009874 <HAL_DMA_IRQHandler+0xc8c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d02c      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a20      	ldr	r2, [pc, #128]	@ (8009878 <HAL_DMA_IRQHandler+0xc90>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d027      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a1f      	ldr	r2, [pc, #124]	@ (800987c <HAL_DMA_IRQHandler+0xc94>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d022      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a1d      	ldr	r2, [pc, #116]	@ (8009880 <HAL_DMA_IRQHandler+0xc98>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d01d      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a1c      	ldr	r2, [pc, #112]	@ (8009884 <HAL_DMA_IRQHandler+0xc9c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d018      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a1a      	ldr	r2, [pc, #104]	@ (8009888 <HAL_DMA_IRQHandler+0xca0>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d013      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a19      	ldr	r2, [pc, #100]	@ (800988c <HAL_DMA_IRQHandler+0xca4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d00e      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a17      	ldr	r2, [pc, #92]	@ (8009890 <HAL_DMA_IRQHandler+0xca8>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d009      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a16      	ldr	r2, [pc, #88]	@ (8009894 <HAL_DMA_IRQHandler+0xcac>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d004      	beq.n	800984a <HAL_DMA_IRQHandler+0xc62>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a14      	ldr	r2, [pc, #80]	@ (8009898 <HAL_DMA_IRQHandler+0xcb0>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d128      	bne.n	800989c <HAL_DMA_IRQHandler+0xcb4>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f022 0214 	bic.w	r2, r2, #20
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	e027      	b.n	80098ac <HAL_DMA_IRQHandler+0xcc4>
 800985c:	40020010 	.word	0x40020010
 8009860:	40020028 	.word	0x40020028
 8009864:	40020040 	.word	0x40020040
 8009868:	40020058 	.word	0x40020058
 800986c:	40020070 	.word	0x40020070
 8009870:	40020088 	.word	0x40020088
 8009874:	400200a0 	.word	0x400200a0
 8009878:	400200b8 	.word	0x400200b8
 800987c:	40020410 	.word	0x40020410
 8009880:	40020428 	.word	0x40020428
 8009884:	40020440 	.word	0x40020440
 8009888:	40020458 	.word	0x40020458
 800988c:	40020470 	.word	0x40020470
 8009890:	40020488 	.word	0x40020488
 8009894:	400204a0 	.word	0x400204a0
 8009898:	400204b8 	.word	0x400204b8
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f022 020a 	bic.w	r2, r2, #10
 80098aa:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 8097 	beq.w	80099f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098ce:	e091      	b.n	80099f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098d4:	f003 031f 	and.w	r3, r3, #31
 80098d8:	2208      	movs	r2, #8
 80098da:	409a      	lsls	r2, r3
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	4013      	ands	r3, r2
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 8088 	beq.w	80099f6 <HAL_DMA_IRQHandler+0xe0e>
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f003 0308 	and.w	r3, r3, #8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8082 	beq.w	80099f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a41      	ldr	r2, [pc, #260]	@ (80099fc <HAL_DMA_IRQHandler+0xe14>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d04a      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a3f      	ldr	r2, [pc, #252]	@ (8009a00 <HAL_DMA_IRQHandler+0xe18>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d045      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a3e      	ldr	r2, [pc, #248]	@ (8009a04 <HAL_DMA_IRQHandler+0xe1c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d040      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a3c      	ldr	r2, [pc, #240]	@ (8009a08 <HAL_DMA_IRQHandler+0xe20>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d03b      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a3b      	ldr	r2, [pc, #236]	@ (8009a0c <HAL_DMA_IRQHandler+0xe24>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d036      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a39      	ldr	r2, [pc, #228]	@ (8009a10 <HAL_DMA_IRQHandler+0xe28>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d031      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a38      	ldr	r2, [pc, #224]	@ (8009a14 <HAL_DMA_IRQHandler+0xe2c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d02c      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a36      	ldr	r2, [pc, #216]	@ (8009a18 <HAL_DMA_IRQHandler+0xe30>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d027      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a35      	ldr	r2, [pc, #212]	@ (8009a1c <HAL_DMA_IRQHandler+0xe34>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d022      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a33      	ldr	r2, [pc, #204]	@ (8009a20 <HAL_DMA_IRQHandler+0xe38>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d01d      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a32      	ldr	r2, [pc, #200]	@ (8009a24 <HAL_DMA_IRQHandler+0xe3c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d018      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a30      	ldr	r2, [pc, #192]	@ (8009a28 <HAL_DMA_IRQHandler+0xe40>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d013      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a2f      	ldr	r2, [pc, #188]	@ (8009a2c <HAL_DMA_IRQHandler+0xe44>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00e      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a2d      	ldr	r2, [pc, #180]	@ (8009a30 <HAL_DMA_IRQHandler+0xe48>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d009      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a2c      	ldr	r2, [pc, #176]	@ (8009a34 <HAL_DMA_IRQHandler+0xe4c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d004      	beq.n	8009992 <HAL_DMA_IRQHandler+0xdaa>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a2a      	ldr	r2, [pc, #168]	@ (8009a38 <HAL_DMA_IRQHandler+0xe50>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d108      	bne.n	80099a4 <HAL_DMA_IRQHandler+0xdbc>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 021c 	bic.w	r2, r2, #28
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	e007      	b.n	80099b4 <HAL_DMA_IRQHandler+0xdcc>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f022 020e 	bic.w	r2, r2, #14
 80099b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099b8:	f003 031f 	and.w	r3, r3, #31
 80099bc:	2201      	movs	r2, #1
 80099be:	409a      	lsls	r2, r3
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      if (hdma->XferErrorCallback != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	4798      	blx	r3
 80099ea:	e004      	b.n	80099f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80099ec:	bf00      	nop
 80099ee:	e002      	b.n	80099f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099f0:	bf00      	nop
 80099f2:	e000      	b.n	80099f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80099f6:	3728      	adds	r7, #40	@ 0x28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	40020010 	.word	0x40020010
 8009a00:	40020028 	.word	0x40020028
 8009a04:	40020040 	.word	0x40020040
 8009a08:	40020058 	.word	0x40020058
 8009a0c:	40020070 	.word	0x40020070
 8009a10:	40020088 	.word	0x40020088
 8009a14:	400200a0 	.word	0x400200a0
 8009a18:	400200b8 	.word	0x400200b8
 8009a1c:	40020410 	.word	0x40020410
 8009a20:	40020428 	.word	0x40020428
 8009a24:	40020440 	.word	0x40020440
 8009a28:	40020458 	.word	0x40020458
 8009a2c:	40020470 	.word	0x40020470
 8009a30:	40020488 	.word	0x40020488
 8009a34:	400204a0 	.word	0x400204a0
 8009a38:	400204b8 	.word	0x400204b8

08009a3c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a7f      	ldr	r2, [pc, #508]	@ (8009c70 <DMA_SetConfig+0x21c>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d072      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a7d      	ldr	r2, [pc, #500]	@ (8009c74 <DMA_SetConfig+0x220>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d06d      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a7c      	ldr	r2, [pc, #496]	@ (8009c78 <DMA_SetConfig+0x224>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d068      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a7a      	ldr	r2, [pc, #488]	@ (8009c7c <DMA_SetConfig+0x228>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d063      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a79      	ldr	r2, [pc, #484]	@ (8009c80 <DMA_SetConfig+0x22c>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d05e      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a77      	ldr	r2, [pc, #476]	@ (8009c84 <DMA_SetConfig+0x230>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d059      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a76      	ldr	r2, [pc, #472]	@ (8009c88 <DMA_SetConfig+0x234>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d054      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a74      	ldr	r2, [pc, #464]	@ (8009c8c <DMA_SetConfig+0x238>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d04f      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a73      	ldr	r2, [pc, #460]	@ (8009c90 <DMA_SetConfig+0x23c>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d04a      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a71      	ldr	r2, [pc, #452]	@ (8009c94 <DMA_SetConfig+0x240>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d045      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a70      	ldr	r2, [pc, #448]	@ (8009c98 <DMA_SetConfig+0x244>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d040      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a6e      	ldr	r2, [pc, #440]	@ (8009c9c <DMA_SetConfig+0x248>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d03b      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a6d      	ldr	r2, [pc, #436]	@ (8009ca0 <DMA_SetConfig+0x24c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d036      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a6b      	ldr	r2, [pc, #428]	@ (8009ca4 <DMA_SetConfig+0x250>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d031      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a6a      	ldr	r2, [pc, #424]	@ (8009ca8 <DMA_SetConfig+0x254>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d02c      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a68      	ldr	r2, [pc, #416]	@ (8009cac <DMA_SetConfig+0x258>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d027      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a67      	ldr	r2, [pc, #412]	@ (8009cb0 <DMA_SetConfig+0x25c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d022      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a65      	ldr	r2, [pc, #404]	@ (8009cb4 <DMA_SetConfig+0x260>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d01d      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a64      	ldr	r2, [pc, #400]	@ (8009cb8 <DMA_SetConfig+0x264>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d018      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a62      	ldr	r2, [pc, #392]	@ (8009cbc <DMA_SetConfig+0x268>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d013      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a61      	ldr	r2, [pc, #388]	@ (8009cc0 <DMA_SetConfig+0x26c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d00e      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a5f      	ldr	r2, [pc, #380]	@ (8009cc4 <DMA_SetConfig+0x270>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d009      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a5e      	ldr	r2, [pc, #376]	@ (8009cc8 <DMA_SetConfig+0x274>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d004      	beq.n	8009b5e <DMA_SetConfig+0x10a>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a5c      	ldr	r2, [pc, #368]	@ (8009ccc <DMA_SetConfig+0x278>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d101      	bne.n	8009b62 <DMA_SetConfig+0x10e>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <DMA_SetConfig+0x110>
 8009b62:	2300      	movs	r3, #0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00d      	beq.n	8009b84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009b70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d004      	beq.n	8009b84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b7e:	68fa      	ldr	r2, [r7, #12]
 8009b80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009b82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a39      	ldr	r2, [pc, #228]	@ (8009c70 <DMA_SetConfig+0x21c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d04a      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a38      	ldr	r2, [pc, #224]	@ (8009c74 <DMA_SetConfig+0x220>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d045      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a36      	ldr	r2, [pc, #216]	@ (8009c78 <DMA_SetConfig+0x224>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d040      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a35      	ldr	r2, [pc, #212]	@ (8009c7c <DMA_SetConfig+0x228>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d03b      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a33      	ldr	r2, [pc, #204]	@ (8009c80 <DMA_SetConfig+0x22c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d036      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a32      	ldr	r2, [pc, #200]	@ (8009c84 <DMA_SetConfig+0x230>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d031      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a30      	ldr	r2, [pc, #192]	@ (8009c88 <DMA_SetConfig+0x234>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d02c      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a2f      	ldr	r2, [pc, #188]	@ (8009c8c <DMA_SetConfig+0x238>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d027      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8009c90 <DMA_SetConfig+0x23c>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d022      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a2c      	ldr	r2, [pc, #176]	@ (8009c94 <DMA_SetConfig+0x240>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d01d      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a2a      	ldr	r2, [pc, #168]	@ (8009c98 <DMA_SetConfig+0x244>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d018      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a29      	ldr	r2, [pc, #164]	@ (8009c9c <DMA_SetConfig+0x248>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d013      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a27      	ldr	r2, [pc, #156]	@ (8009ca0 <DMA_SetConfig+0x24c>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00e      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a26      	ldr	r2, [pc, #152]	@ (8009ca4 <DMA_SetConfig+0x250>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d009      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a24      	ldr	r2, [pc, #144]	@ (8009ca8 <DMA_SetConfig+0x254>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d004      	beq.n	8009c24 <DMA_SetConfig+0x1d0>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a23      	ldr	r2, [pc, #140]	@ (8009cac <DMA_SetConfig+0x258>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d101      	bne.n	8009c28 <DMA_SetConfig+0x1d4>
 8009c24:	2301      	movs	r3, #1
 8009c26:	e000      	b.n	8009c2a <DMA_SetConfig+0x1d6>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d059      	beq.n	8009ce2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c32:	f003 031f 	and.w	r3, r3, #31
 8009c36:	223f      	movs	r2, #63	@ 0x3f
 8009c38:	409a      	lsls	r2, r3
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009c4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	2b40      	cmp	r3, #64	@ 0x40
 8009c5c:	d138      	bne.n	8009cd0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009c6e:	e086      	b.n	8009d7e <DMA_SetConfig+0x32a>
 8009c70:	40020010 	.word	0x40020010
 8009c74:	40020028 	.word	0x40020028
 8009c78:	40020040 	.word	0x40020040
 8009c7c:	40020058 	.word	0x40020058
 8009c80:	40020070 	.word	0x40020070
 8009c84:	40020088 	.word	0x40020088
 8009c88:	400200a0 	.word	0x400200a0
 8009c8c:	400200b8 	.word	0x400200b8
 8009c90:	40020410 	.word	0x40020410
 8009c94:	40020428 	.word	0x40020428
 8009c98:	40020440 	.word	0x40020440
 8009c9c:	40020458 	.word	0x40020458
 8009ca0:	40020470 	.word	0x40020470
 8009ca4:	40020488 	.word	0x40020488
 8009ca8:	400204a0 	.word	0x400204a0
 8009cac:	400204b8 	.word	0x400204b8
 8009cb0:	58025408 	.word	0x58025408
 8009cb4:	5802541c 	.word	0x5802541c
 8009cb8:	58025430 	.word	0x58025430
 8009cbc:	58025444 	.word	0x58025444
 8009cc0:	58025458 	.word	0x58025458
 8009cc4:	5802546c 	.word	0x5802546c
 8009cc8:	58025480 	.word	0x58025480
 8009ccc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	60da      	str	r2, [r3, #12]
}
 8009ce0:	e04d      	b.n	8009d7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a29      	ldr	r2, [pc, #164]	@ (8009d8c <DMA_SetConfig+0x338>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d022      	beq.n	8009d32 <DMA_SetConfig+0x2de>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a27      	ldr	r2, [pc, #156]	@ (8009d90 <DMA_SetConfig+0x33c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d01d      	beq.n	8009d32 <DMA_SetConfig+0x2de>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a26      	ldr	r2, [pc, #152]	@ (8009d94 <DMA_SetConfig+0x340>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d018      	beq.n	8009d32 <DMA_SetConfig+0x2de>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a24      	ldr	r2, [pc, #144]	@ (8009d98 <DMA_SetConfig+0x344>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d013      	beq.n	8009d32 <DMA_SetConfig+0x2de>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a23      	ldr	r2, [pc, #140]	@ (8009d9c <DMA_SetConfig+0x348>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00e      	beq.n	8009d32 <DMA_SetConfig+0x2de>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a21      	ldr	r2, [pc, #132]	@ (8009da0 <DMA_SetConfig+0x34c>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d009      	beq.n	8009d32 <DMA_SetConfig+0x2de>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a20      	ldr	r2, [pc, #128]	@ (8009da4 <DMA_SetConfig+0x350>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d004      	beq.n	8009d32 <DMA_SetConfig+0x2de>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8009da8 <DMA_SetConfig+0x354>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d101      	bne.n	8009d36 <DMA_SetConfig+0x2e2>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e000      	b.n	8009d38 <DMA_SetConfig+0x2e4>
 8009d36:	2300      	movs	r3, #0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d020      	beq.n	8009d7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d40:	f003 031f 	and.w	r3, r3, #31
 8009d44:	2201      	movs	r2, #1
 8009d46:	409a      	lsls	r2, r3
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	2b40      	cmp	r3, #64	@ 0x40
 8009d5a:	d108      	bne.n	8009d6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	60da      	str	r2, [r3, #12]
}
 8009d6c:	e007      	b.n	8009d7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	60da      	str	r2, [r3, #12]
}
 8009d7e:	bf00      	nop
 8009d80:	371c      	adds	r7, #28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	58025408 	.word	0x58025408
 8009d90:	5802541c 	.word	0x5802541c
 8009d94:	58025430 	.word	0x58025430
 8009d98:	58025444 	.word	0x58025444
 8009d9c:	58025458 	.word	0x58025458
 8009da0:	5802546c 	.word	0x5802546c
 8009da4:	58025480 	.word	0x58025480
 8009da8:	58025494 	.word	0x58025494

08009dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a42      	ldr	r2, [pc, #264]	@ (8009ec4 <DMA_CalcBaseAndBitshift+0x118>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d04a      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a41      	ldr	r2, [pc, #260]	@ (8009ec8 <DMA_CalcBaseAndBitshift+0x11c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d045      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ecc <DMA_CalcBaseAndBitshift+0x120>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d040      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8009ed0 <DMA_CalcBaseAndBitshift+0x124>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d03b      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a3c      	ldr	r2, [pc, #240]	@ (8009ed4 <DMA_CalcBaseAndBitshift+0x128>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d036      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a3b      	ldr	r2, [pc, #236]	@ (8009ed8 <DMA_CalcBaseAndBitshift+0x12c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d031      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a39      	ldr	r2, [pc, #228]	@ (8009edc <DMA_CalcBaseAndBitshift+0x130>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d02c      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a38      	ldr	r2, [pc, #224]	@ (8009ee0 <DMA_CalcBaseAndBitshift+0x134>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d027      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a36      	ldr	r2, [pc, #216]	@ (8009ee4 <DMA_CalcBaseAndBitshift+0x138>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d022      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a35      	ldr	r2, [pc, #212]	@ (8009ee8 <DMA_CalcBaseAndBitshift+0x13c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d01d      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a33      	ldr	r2, [pc, #204]	@ (8009eec <DMA_CalcBaseAndBitshift+0x140>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d018      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a32      	ldr	r2, [pc, #200]	@ (8009ef0 <DMA_CalcBaseAndBitshift+0x144>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d013      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a30      	ldr	r2, [pc, #192]	@ (8009ef4 <DMA_CalcBaseAndBitshift+0x148>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d00e      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8009ef8 <DMA_CalcBaseAndBitshift+0x14c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d009      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a2d      	ldr	r2, [pc, #180]	@ (8009efc <DMA_CalcBaseAndBitshift+0x150>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d004      	beq.n	8009e54 <DMA_CalcBaseAndBitshift+0xa8>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8009f00 <DMA_CalcBaseAndBitshift+0x154>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d101      	bne.n	8009e58 <DMA_CalcBaseAndBitshift+0xac>
 8009e54:	2301      	movs	r3, #1
 8009e56:	e000      	b.n	8009e5a <DMA_CalcBaseAndBitshift+0xae>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d024      	beq.n	8009ea8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	3b10      	subs	r3, #16
 8009e66:	4a27      	ldr	r2, [pc, #156]	@ (8009f04 <DMA_CalcBaseAndBitshift+0x158>)
 8009e68:	fba2 2303 	umull	r2, r3, r2, r3
 8009e6c:	091b      	lsrs	r3, r3, #4
 8009e6e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f003 0307 	and.w	r3, r3, #7
 8009e76:	4a24      	ldr	r2, [pc, #144]	@ (8009f08 <DMA_CalcBaseAndBitshift+0x15c>)
 8009e78:	5cd3      	ldrb	r3, [r2, r3]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d908      	bls.n	8009e98 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8009f0c <DMA_CalcBaseAndBitshift+0x160>)
 8009e8e:	4013      	ands	r3, r2
 8009e90:	1d1a      	adds	r2, r3, #4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	659a      	str	r2, [r3, #88]	@ 0x58
 8009e96:	e00d      	b.n	8009eb4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8009f0c <DMA_CalcBaseAndBitshift+0x160>)
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ea6:	e005      	b.n	8009eb4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr
 8009ec4:	40020010 	.word	0x40020010
 8009ec8:	40020028 	.word	0x40020028
 8009ecc:	40020040 	.word	0x40020040
 8009ed0:	40020058 	.word	0x40020058
 8009ed4:	40020070 	.word	0x40020070
 8009ed8:	40020088 	.word	0x40020088
 8009edc:	400200a0 	.word	0x400200a0
 8009ee0:	400200b8 	.word	0x400200b8
 8009ee4:	40020410 	.word	0x40020410
 8009ee8:	40020428 	.word	0x40020428
 8009eec:	40020440 	.word	0x40020440
 8009ef0:	40020458 	.word	0x40020458
 8009ef4:	40020470 	.word	0x40020470
 8009ef8:	40020488 	.word	0x40020488
 8009efc:	400204a0 	.word	0x400204a0
 8009f00:	400204b8 	.word	0x400204b8
 8009f04:	aaaaaaab 	.word	0xaaaaaaab
 8009f08:	08015a74 	.word	0x08015a74
 8009f0c:	fffffc00 	.word	0xfffffc00

08009f10 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d120      	bne.n	8009f66 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d858      	bhi.n	8009fde <DMA_CheckFifoParam+0xce>
 8009f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f34 <DMA_CheckFifoParam+0x24>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f45 	.word	0x08009f45
 8009f38:	08009f57 	.word	0x08009f57
 8009f3c:	08009f45 	.word	0x08009f45
 8009f40:	08009fdf 	.word	0x08009fdf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d048      	beq.n	8009fe2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f54:	e045      	b.n	8009fe2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009f5e:	d142      	bne.n	8009fe6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009f64:	e03f      	b.n	8009fe6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f6e:	d123      	bne.n	8009fb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d838      	bhi.n	8009fea <DMA_CheckFifoParam+0xda>
 8009f78:	a201      	add	r2, pc, #4	@ (adr r2, 8009f80 <DMA_CheckFifoParam+0x70>)
 8009f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7e:	bf00      	nop
 8009f80:	08009f91 	.word	0x08009f91
 8009f84:	08009f97 	.word	0x08009f97
 8009f88:	08009f91 	.word	0x08009f91
 8009f8c:	08009fa9 	.word	0x08009fa9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	73fb      	strb	r3, [r7, #15]
        break;
 8009f94:	e030      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d025      	beq.n	8009fee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009fa6:	e022      	b.n	8009fee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009fb0:	d11f      	bne.n	8009ff2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009fb6:	e01c      	b.n	8009ff2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d902      	bls.n	8009fc6 <DMA_CheckFifoParam+0xb6>
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d003      	beq.n	8009fcc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009fc4:	e018      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8009fca:	e015      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d00e      	beq.n	8009ff6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	73fb      	strb	r3, [r7, #15]
    break;
 8009fdc:	e00b      	b.n	8009ff6 <DMA_CheckFifoParam+0xe6>
        break;
 8009fde:	bf00      	nop
 8009fe0:	e00a      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8009fe2:	bf00      	nop
 8009fe4:	e008      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8009fe6:	bf00      	nop
 8009fe8:	e006      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8009fea:	bf00      	nop
 8009fec:	e004      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8009fee:	bf00      	nop
 8009ff0:	e002      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>
        break;
 8009ff2:	bf00      	nop
 8009ff4:	e000      	b.n	8009ff8 <DMA_CheckFifoParam+0xe8>
    break;
 8009ff6:	bf00      	nop
    }
  }

  return status;
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop

0800a008 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a38      	ldr	r2, [pc, #224]	@ (800a0fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d022      	beq.n	800a066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4a36      	ldr	r2, [pc, #216]	@ (800a100 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d01d      	beq.n	800a066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a35      	ldr	r2, [pc, #212]	@ (800a104 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d018      	beq.n	800a066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a33      	ldr	r2, [pc, #204]	@ (800a108 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d013      	beq.n	800a066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a32      	ldr	r2, [pc, #200]	@ (800a10c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d00e      	beq.n	800a066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a30      	ldr	r2, [pc, #192]	@ (800a110 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d009      	beq.n	800a066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a2f      	ldr	r2, [pc, #188]	@ (800a114 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d004      	beq.n	800a066 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a2d      	ldr	r2, [pc, #180]	@ (800a118 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d101      	bne.n	800a06a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d01a      	beq.n	800a0a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	b2db      	uxtb	r3, r3
 800a076:	3b08      	subs	r3, #8
 800a078:	4a28      	ldr	r2, [pc, #160]	@ (800a11c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a07a:	fba2 2303 	umull	r2, r3, r2, r3
 800a07e:	091b      	lsrs	r3, r3, #4
 800a080:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4b26      	ldr	r3, [pc, #152]	@ (800a120 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	461a      	mov	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a24      	ldr	r2, [pc, #144]	@ (800a124 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a094:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f003 031f 	and.w	r3, r3, #31
 800a09c:	2201      	movs	r2, #1
 800a09e:	409a      	lsls	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a0a4:	e024      	b.n	800a0f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	3b10      	subs	r3, #16
 800a0ae:	4a1e      	ldr	r2, [pc, #120]	@ (800a128 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b4:	091b      	lsrs	r3, r3, #4
 800a0b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	4a1c      	ldr	r2, [pc, #112]	@ (800a12c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d806      	bhi.n	800a0ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	4a1b      	ldr	r2, [pc, #108]	@ (800a130 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d902      	bls.n	800a0ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3308      	adds	r3, #8
 800a0cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	4b18      	ldr	r3, [pc, #96]	@ (800a134 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a0d2:	4413      	add	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a16      	ldr	r2, [pc, #88]	@ (800a138 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a0e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f003 031f 	and.w	r3, r3, #31
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	409a      	lsls	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a0f0:	bf00      	nop
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	58025408 	.word	0x58025408
 800a100:	5802541c 	.word	0x5802541c
 800a104:	58025430 	.word	0x58025430
 800a108:	58025444 	.word	0x58025444
 800a10c:	58025458 	.word	0x58025458
 800a110:	5802546c 	.word	0x5802546c
 800a114:	58025480 	.word	0x58025480
 800a118:	58025494 	.word	0x58025494
 800a11c:	cccccccd 	.word	0xcccccccd
 800a120:	16009600 	.word	0x16009600
 800a124:	58025880 	.word	0x58025880
 800a128:	aaaaaaab 	.word	0xaaaaaaab
 800a12c:	400204b8 	.word	0x400204b8
 800a130:	4002040f 	.word	0x4002040f
 800a134:	10008200 	.word	0x10008200
 800a138:	40020880 	.word	0x40020880

0800a13c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d04a      	beq.n	800a1e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b08      	cmp	r3, #8
 800a156:	d847      	bhi.n	800a1e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a25      	ldr	r2, [pc, #148]	@ (800a1f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d022      	beq.n	800a1a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a24      	ldr	r2, [pc, #144]	@ (800a1f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d01d      	beq.n	800a1a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a22      	ldr	r2, [pc, #136]	@ (800a1fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d018      	beq.n	800a1a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a21      	ldr	r2, [pc, #132]	@ (800a200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d013      	beq.n	800a1a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a1f      	ldr	r2, [pc, #124]	@ (800a204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d00e      	beq.n	800a1a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a1e      	ldr	r2, [pc, #120]	@ (800a208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d009      	beq.n	800a1a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a1c      	ldr	r2, [pc, #112]	@ (800a20c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d004      	beq.n	800a1a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a1b      	ldr	r2, [pc, #108]	@ (800a210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d101      	bne.n	800a1ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e000      	b.n	800a1ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	4b17      	ldr	r3, [pc, #92]	@ (800a214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a15      	ldr	r2, [pc, #84]	@ (800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a1c4:	671a      	str	r2, [r3, #112]	@ 0x70
 800a1c6:	e009      	b.n	800a1dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	4b14      	ldr	r3, [pc, #80]	@ (800a21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a1cc:	4413      	add	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a11      	ldr	r2, [pc, #68]	@ (800a220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a1da:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	409a      	lsls	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800a1e8:	bf00      	nop
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	58025408 	.word	0x58025408
 800a1f8:	5802541c 	.word	0x5802541c
 800a1fc:	58025430 	.word	0x58025430
 800a200:	58025444 	.word	0x58025444
 800a204:	58025458 	.word	0x58025458
 800a208:	5802546c 	.word	0x5802546c
 800a20c:	58025480 	.word	0x58025480
 800a210:	58025494 	.word	0x58025494
 800a214:	1600963f 	.word	0x1600963f
 800a218:	58025940 	.word	0x58025940
 800a21c:	1000823f 	.word	0x1000823f
 800a220:	40020940 	.word	0x40020940

0800a224 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e04f      	b.n	800a2d6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f84e 	bl	800a2ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	4b20      	ldr	r3, [pc, #128]	@ (800a2e0 <HAL_DMA2D_Init+0xbc>)
 800a260:	4013      	ands	r3, r2
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	6851      	ldr	r1, [r2, #4]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	69d2      	ldr	r2, [r2, #28]
 800a26a:	4311      	orrs	r1, r2
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	6812      	ldr	r2, [r2, #0]
 800a270:	430b      	orrs	r3, r1
 800a272:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a27a:	4b1a      	ldr	r3, [pc, #104]	@ (800a2e4 <HAL_DMA2D_Init+0xc0>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	6891      	ldr	r1, [r2, #8]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6992      	ldr	r2, [r2, #24]
 800a286:	4311      	orrs	r1, r2
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	6812      	ldr	r2, [r2, #0]
 800a28c:	430b      	orrs	r3, r1
 800a28e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a296:	4b14      	ldr	r3, [pc, #80]	@ (800a2e8 <HAL_DMA2D_Init+0xc4>)
 800a298:	4013      	ands	r3, r2
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	68d1      	ldr	r1, [r2, #12]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	6812      	ldr	r2, [r2, #0]
 800a2a2:	430b      	orrs	r3, r1
 800a2a4:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2ac:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	051a      	lsls	r2, r3, #20
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	055b      	lsls	r3, r3, #21
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	fff8ffbf 	.word	0xfff8ffbf
 800a2e4:	fffffef8 	.word	0xfffffef8
 800a2e8:	ffff0000 	.word	0xffff0000

0800a2ec <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af02      	add	r7, sp, #8
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
 800a30c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a314:	2b01      	cmp	r3, #1
 800a316:	d101      	bne.n	800a31c <HAL_DMA2D_Start+0x1c>
 800a318:	2302      	movs	r3, #2
 800a31a:	e018      	b.n	800a34e <HAL_DMA2D_Start+0x4e>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	68b9      	ldr	r1, [r7, #8]
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f000 f9a4 	bl	800a684 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f042 0201 	orr.w	r2, r2, #1
 800a34a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800a360:	2300      	movs	r3, #0
 800a362:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d056      	beq.n	800a420 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a372:	f7fc ff99 	bl	80072a8 <HAL_GetTick>
 800a376:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a378:	e04b      	b.n	800a412 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d023      	beq.n	800a3d4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f003 0320 	and.w	r3, r3, #32
 800a392:	2b00      	cmp	r3, #0
 800a394:	d005      	beq.n	800a3a2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a39a:	f043 0202 	orr.w	r2, r3, #2
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f003 0301 	and.w	r3, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d005      	beq.n	800a3b8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3b0:	f043 0201 	orr.w	r2, r3, #1
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2221      	movs	r2, #33	@ 0x21
 800a3be:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2204      	movs	r2, #4
 800a3c4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e0a5      	b.n	800a520 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3da:	d01a      	beq.n	800a412 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a3dc:	f7fc ff64 	bl	80072a8 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d302      	bcc.n	800a3f2 <HAL_DMA2D_PollForTransfer+0x9c>
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10f      	bne.n	800a412 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3f6:	f043 0220 	orr.w	r2, r3, #32
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2203      	movs	r2, #3
 800a402:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e086      	b.n	800a520 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f003 0302 	and.w	r3, r3, #2
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0ac      	beq.n	800a37a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a432:	f003 0320 	and.w	r3, r3, #32
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	4313      	orrs	r3, r2
 800a43a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d061      	beq.n	800a506 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800a442:	f7fc ff31 	bl	80072a8 <HAL_GetTick>
 800a446:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800a448:	e056      	b.n	800a4f8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d02e      	beq.n	800a4ba <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f003 0308 	and.w	r3, r3, #8
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a46a:	f043 0204 	orr.w	r2, r3, #4
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f003 0320 	and.w	r3, r3, #32
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a480:	f043 0202 	orr.w	r2, r3, #2
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d005      	beq.n	800a49e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a496:	f043 0201 	orr.w	r2, r3, #1
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2229      	movs	r2, #41	@ 0x29
 800a4a4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2204      	movs	r2, #4
 800a4aa:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e032      	b.n	800a520 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c0:	d01a      	beq.n	800a4f8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a4c2:	f7fc fef1 	bl	80072a8 <HAL_GetTick>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	1ad3      	subs	r3, r2, r3
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d302      	bcc.n	800a4d8 <HAL_DMA2D_PollForTransfer+0x182>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10f      	bne.n	800a4f8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4dc:	f043 0220 	orr.w	r2, r3, #32
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e013      	b.n	800a520 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b00      	cmp	r3, #0
 800a504:	d0a1      	beq.n	800a44a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2212      	movs	r2, #18
 800a50c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a544:	2b01      	cmp	r3, #1
 800a546:	d101      	bne.n	800a54c <HAL_DMA2D_ConfigLayer+0x24>
 800a548:	2302      	movs	r3, #2
 800a54a:	e092      	b.n	800a672 <HAL_DMA2D_ConfigLayer+0x14a>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	4613      	mov	r3, r2
 800a560:	00db      	lsls	r3, r3, #3
 800a562:	1a9b      	subs	r3, r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	3328      	adds	r3, #40	@ 0x28
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	4413      	add	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	041b      	lsls	r3, r3, #16
 800a578:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a580:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	695b      	ldr	r3, [r3, #20]
 800a586:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800a588:	4313      	orrs	r3, r2
 800a58a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800a58c:	4b3c      	ldr	r3, [pc, #240]	@ (800a680 <HAL_DMA2D_ConfigLayer+0x158>)
 800a58e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	2b0a      	cmp	r3, #10
 800a596:	d003      	beq.n	800a5a0 <HAL_DMA2D_ConfigLayer+0x78>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	2b09      	cmp	r3, #9
 800a59e:	d107      	bne.n	800a5b0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	613b      	str	r3, [r7, #16]
 800a5ae:	e005      	b.n	800a5bc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	061b      	lsls	r3, r3, #24
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d120      	bne.n	800a604 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	43db      	mvns	r3, r3
 800a5cc:	ea02 0103 	and.w	r1, r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	430a      	orrs	r2, r1
 800a5d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	6812      	ldr	r2, [r2, #0]
 800a5e2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	2b0a      	cmp	r3, #10
 800a5ea:	d003      	beq.n	800a5f4 <HAL_DMA2D_ConfigLayer+0xcc>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	2b09      	cmp	r3, #9
 800a5f2:	d135      	bne.n	800a660 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800a600:	629a      	str	r2, [r3, #40]	@ 0x28
 800a602:	e02d      	b.n	800a660 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	2b0b      	cmp	r3, #11
 800a60a:	d109      	bne.n	800a620 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	049b      	lsls	r3, r3, #18
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	4313      	orrs	r3, r2
 800a616:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800a61e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	69da      	ldr	r2, [r3, #28]
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	43db      	mvns	r3, r3
 800a62a:	ea02 0103 	and.w	r1, r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	430a      	orrs	r2, r1
 800a636:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	6812      	ldr	r2, [r2, #0]
 800a640:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b0a      	cmp	r3, #10
 800a648:	d003      	beq.n	800a652 <HAL_DMA2D_ConfigLayer+0x12a>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2b09      	cmp	r3, #9
 800a650:	d106      	bne.n	800a660 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800a65e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	ff33000f 	.word	0xff33000f

0800a684 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800a684:	b480      	push	{r7}
 800a686:	b08b      	sub	sp, #44	@ 0x2c
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
 800a690:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a698:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	041a      	lsls	r2, r3, #16
 800a6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6bc:	d174      	bne.n	800a7a8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a6c4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a6cc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a6d4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d108      	bne.n	800a6f6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800a6e4:	69ba      	ldr	r2, [r7, #24]
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6f4:	e053      	b.n	800a79e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d106      	bne.n	800a70c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	4313      	orrs	r3, r2
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	4313      	orrs	r3, r2
 800a708:	627b      	str	r3, [r7, #36]	@ 0x24
 800a70a:	e048      	b.n	800a79e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d111      	bne.n	800a738 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	0cdb      	lsrs	r3, r3, #19
 800a718:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	0a9b      	lsrs	r3, r3, #10
 800a71e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	08db      	lsrs	r3, r3, #3
 800a724:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	015a      	lsls	r2, r3, #5
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	02db      	lsls	r3, r3, #11
 800a72e:	4313      	orrs	r3, r2
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	4313      	orrs	r3, r2
 800a734:	627b      	str	r3, [r7, #36]	@ 0x24
 800a736:	e032      	b.n	800a79e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d117      	bne.n	800a770 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	0fdb      	lsrs	r3, r3, #31
 800a744:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	0cdb      	lsrs	r3, r3, #19
 800a74a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	0adb      	lsrs	r3, r3, #11
 800a750:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	08db      	lsrs	r3, r3, #3
 800a756:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	029b      	lsls	r3, r3, #10
 800a760:	431a      	orrs	r2, r3
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	03db      	lsls	r3, r3, #15
 800a766:	4313      	orrs	r3, r2
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a76e:	e016      	b.n	800a79e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	0f1b      	lsrs	r3, r3, #28
 800a774:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	0d1b      	lsrs	r3, r3, #20
 800a77a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	0b1b      	lsrs	r3, r3, #12
 800a780:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	091b      	lsrs	r3, r3, #4
 800a786:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	011a      	lsls	r2, r3, #4
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	021b      	lsls	r3, r3, #8
 800a790:	431a      	orrs	r2, r3
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	031b      	lsls	r3, r3, #12
 800a796:	4313      	orrs	r3, r2
 800a798:	697a      	ldr	r2, [r7, #20]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800a7a6:	e00d      	b.n	800a7c4 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7b0:	d104      	bne.n	800a7bc <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	615a      	str	r2, [r3, #20]
}
 800a7ba:	e003      	b.n	800a7c4 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	60da      	str	r2, [r3, #12]
}
 800a7c4:	bf00      	nop
 800a7c6:	372c      	adds	r7, #44	@ 0x2c
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	607a      	str	r2, [r7, #4]
 800a7dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e00a      	b.n	800a802 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800a7ec:	7afb      	ldrb	r3, [r7, #11]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d103      	bne.n	800a7fa <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	605a      	str	r2, [r3, #4]
      break;
 800a7f8:	e002      	b.n	800a800 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	75fb      	strb	r3, [r7, #23]
      break;
 800a7fe:	bf00      	nop
  }

  return status;
 800a800:	7dfb      	ldrb	r3, [r7, #23]
}
 800a802:	4618      	mov	r0, r3
 800a804:	371c      	adds	r7, #28
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr

0800a80e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a80e:	b480      	push	{r7}
 800a810:	b083      	sub	sp, #12
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
 800a816:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e003      	b.n	800a82a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a828:	2300      	movs	r3, #0
  }
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
	...

0800a838 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	0c1b      	lsrs	r3, r3, #16
 800a846:	f003 0303 	and.w	r3, r3, #3
 800a84a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 031f 	and.w	r3, r3, #31
 800a854:	2201      	movs	r2, #1
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	011a      	lsls	r2, r3, #4
 800a860:	4b0c      	ldr	r3, [pc, #48]	@ (800a894 <HAL_EXTI_IRQHandler+0x5c>)
 800a862:	4413      	add	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	4013      	ands	r3, r2
 800a86e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d009      	beq.n	800a88a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	4798      	blx	r3
    }
  }
}
 800a88a:	bf00      	nop
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	58000088 	.word	0x58000088

0800a898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a898:	b480      	push	{r7}
 800a89a:	b089      	sub	sp, #36	@ 0x24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a8a6:	4b86      	ldr	r3, [pc, #536]	@ (800aac0 <HAL_GPIO_Init+0x228>)
 800a8a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a8aa:	e18c      	b.n	800abc6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 817e 	beq.w	800abc0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d00b      	beq.n	800a8e4 <HAL_GPIO_Init+0x4c>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d007      	beq.n	800a8e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8d8:	2b11      	cmp	r3, #17
 800a8da:	d003      	beq.n	800a8e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b12      	cmp	r3, #18
 800a8e2:	d130      	bne.n	800a946 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	2203      	movs	r2, #3
 800a8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f4:	43db      	mvns	r3, r3
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	68da      	ldr	r2, [r3, #12]
 800a900:	69fb      	ldr	r3, [r7, #28]
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	fa02 f303 	lsl.w	r3, r2, r3
 800a908:	69ba      	ldr	r2, [r7, #24]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a91a:	2201      	movs	r2, #1
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	fa02 f303 	lsl.w	r3, r2, r3
 800a922:	43db      	mvns	r3, r3
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	4013      	ands	r3, r2
 800a928:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	091b      	lsrs	r3, r3, #4
 800a930:	f003 0201 	and.w	r2, r3, #1
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	fa02 f303 	lsl.w	r3, r2, r3
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	68db      	ldr	r3, [r3, #12]
 800a94a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	005b      	lsls	r3, r3, #1
 800a950:	2203      	movs	r2, #3
 800a952:	fa02 f303 	lsl.w	r3, r2, r3
 800a956:	43db      	mvns	r3, r3
 800a958:	69ba      	ldr	r2, [r7, #24]
 800a95a:	4013      	ands	r3, r2
 800a95c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	689a      	ldr	r2, [r3, #8]
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	fa02 f303 	lsl.w	r3, r2, r3
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d003      	beq.n	800a986 <HAL_GPIO_Init+0xee>
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	2b12      	cmp	r3, #18
 800a984:	d123      	bne.n	800a9ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	08da      	lsrs	r2, r3, #3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3208      	adds	r2, #8
 800a98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	f003 0307 	and.w	r3, r3, #7
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	220f      	movs	r2, #15
 800a99e:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a2:	43db      	mvns	r3, r3
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	691a      	ldr	r2, [r3, #16]
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	f003 0307 	and.w	r3, r3, #7
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	08da      	lsrs	r2, r3, #3
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3208      	adds	r2, #8
 800a9c8:	69b9      	ldr	r1, [r7, #24]
 800a9ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	2203      	movs	r2, #3
 800a9da:	fa02 f303 	lsl.w	r3, r2, r3
 800a9de:	43db      	mvns	r3, r3
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	f003 0203 	and.w	r2, r3, #3
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	005b      	lsls	r3, r3, #1
 800a9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f6:	69ba      	ldr	r2, [r7, #24]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 80d8 	beq.w	800abc0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa10:	4b2c      	ldr	r3, [pc, #176]	@ (800aac4 <HAL_GPIO_Init+0x22c>)
 800aa12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa16:	4a2b      	ldr	r2, [pc, #172]	@ (800aac4 <HAL_GPIO_Init+0x22c>)
 800aa18:	f043 0302 	orr.w	r3, r3, #2
 800aa1c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800aa20:	4b28      	ldr	r3, [pc, #160]	@ (800aac4 <HAL_GPIO_Init+0x22c>)
 800aa22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa26:	f003 0302 	and.w	r3, r3, #2
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa2e:	4a26      	ldr	r2, [pc, #152]	@ (800aac8 <HAL_GPIO_Init+0x230>)
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	089b      	lsrs	r3, r3, #2
 800aa34:	3302      	adds	r3, #2
 800aa36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	f003 0303 	and.w	r3, r3, #3
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	220f      	movs	r2, #15
 800aa46:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4a:	43db      	mvns	r3, r3
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	4013      	ands	r3, r2
 800aa50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a1d      	ldr	r2, [pc, #116]	@ (800aacc <HAL_GPIO_Init+0x234>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d04a      	beq.n	800aaf0 <HAL_GPIO_Init+0x258>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a1c      	ldr	r2, [pc, #112]	@ (800aad0 <HAL_GPIO_Init+0x238>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d02b      	beq.n	800aaba <HAL_GPIO_Init+0x222>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a1b      	ldr	r2, [pc, #108]	@ (800aad4 <HAL_GPIO_Init+0x23c>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d025      	beq.n	800aab6 <HAL_GPIO_Init+0x21e>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a1a      	ldr	r2, [pc, #104]	@ (800aad8 <HAL_GPIO_Init+0x240>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d01f      	beq.n	800aab2 <HAL_GPIO_Init+0x21a>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a19      	ldr	r2, [pc, #100]	@ (800aadc <HAL_GPIO_Init+0x244>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d019      	beq.n	800aaae <HAL_GPIO_Init+0x216>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a18      	ldr	r2, [pc, #96]	@ (800aae0 <HAL_GPIO_Init+0x248>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d013      	beq.n	800aaaa <HAL_GPIO_Init+0x212>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a17      	ldr	r2, [pc, #92]	@ (800aae4 <HAL_GPIO_Init+0x24c>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d00d      	beq.n	800aaa6 <HAL_GPIO_Init+0x20e>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a16      	ldr	r2, [pc, #88]	@ (800aae8 <HAL_GPIO_Init+0x250>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d007      	beq.n	800aaa2 <HAL_GPIO_Init+0x20a>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a15      	ldr	r2, [pc, #84]	@ (800aaec <HAL_GPIO_Init+0x254>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d101      	bne.n	800aa9e <HAL_GPIO_Init+0x206>
 800aa9a:	2309      	movs	r3, #9
 800aa9c:	e029      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	e027      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aaa2:	2307      	movs	r3, #7
 800aaa4:	e025      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aaa6:	2306      	movs	r3, #6
 800aaa8:	e023      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aaaa:	2305      	movs	r3, #5
 800aaac:	e021      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aaae:	2304      	movs	r3, #4
 800aab0:	e01f      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aab2:	2303      	movs	r3, #3
 800aab4:	e01d      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aab6:	2302      	movs	r3, #2
 800aab8:	e01b      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aaba:	2301      	movs	r3, #1
 800aabc:	e019      	b.n	800aaf2 <HAL_GPIO_Init+0x25a>
 800aabe:	bf00      	nop
 800aac0:	58000080 	.word	0x58000080
 800aac4:	58024400 	.word	0x58024400
 800aac8:	58000400 	.word	0x58000400
 800aacc:	58020000 	.word	0x58020000
 800aad0:	58020400 	.word	0x58020400
 800aad4:	58020800 	.word	0x58020800
 800aad8:	58020c00 	.word	0x58020c00
 800aadc:	58021000 	.word	0x58021000
 800aae0:	58021400 	.word	0x58021400
 800aae4:	58021800 	.word	0x58021800
 800aae8:	58021c00 	.word	0x58021c00
 800aaec:	58022400 	.word	0x58022400
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	f002 0203 	and.w	r2, r2, #3
 800aaf8:	0092      	lsls	r2, r2, #2
 800aafa:	4093      	lsls	r3, r2
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab02:	4938      	ldr	r1, [pc, #224]	@ (800abe4 <HAL_GPIO_Init+0x34c>)
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	089b      	lsrs	r3, r3, #2
 800ab08:	3302      	adds	r3, #2
 800ab0a:	69ba      	ldr	r2, [r7, #24]
 800ab0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	43db      	mvns	r3, r3
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800ab2c:	69ba      	ldr	r2, [r7, #24]
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	69ba      	ldr	r2, [r7, #24]
 800ab38:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	43db      	mvns	r3, r3
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	4013      	ands	r3, r2
 800ab48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ab64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	43db      	mvns	r3, r3
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	4013      	ands	r3, r2
 800ab74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d003      	beq.n	800ab8a <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 800ab82:	69ba      	ldr	r2, [r7, #24]
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ab8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ab92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	4013      	ands	r3, r2
 800aba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800abb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	3301      	adds	r3, #1
 800abc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f47f ae6b 	bne.w	800a8ac <HAL_GPIO_Init+0x14>
  }
}
 800abd6:	bf00      	nop
 800abd8:	bf00      	nop
 800abda:	3724      	adds	r7, #36	@ 0x24
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	58000400 	.word	0x58000400

0800abe8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800abf6:	4b72      	ldr	r3, [pc, #456]	@ (800adc0 <HAL_GPIO_DeInit+0x1d8>)
 800abf8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800abfa:	e0d3      	b.n	800ada4 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800abfc:	2201      	movs	r2, #1
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	fa02 f303 	lsl.w	r3, r2, r3
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	4013      	ands	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 80c6 	beq.w	800ad9e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ac12:	4a6c      	ldr	r2, [pc, #432]	@ (800adc4 <HAL_GPIO_DeInit+0x1dc>)
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	089b      	lsrs	r3, r3, #2
 800ac18:	3302      	adds	r3, #2
 800ac1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac1e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	f003 0303 	and.w	r3, r3, #3
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	220f      	movs	r2, #15
 800ac2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	4013      	ands	r3, r2
 800ac32:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a64      	ldr	r2, [pc, #400]	@ (800adc8 <HAL_GPIO_DeInit+0x1e0>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d031      	beq.n	800aca0 <HAL_GPIO_DeInit+0xb8>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a63      	ldr	r2, [pc, #396]	@ (800adcc <HAL_GPIO_DeInit+0x1e4>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d02b      	beq.n	800ac9c <HAL_GPIO_DeInit+0xb4>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a62      	ldr	r2, [pc, #392]	@ (800add0 <HAL_GPIO_DeInit+0x1e8>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d025      	beq.n	800ac98 <HAL_GPIO_DeInit+0xb0>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a61      	ldr	r2, [pc, #388]	@ (800add4 <HAL_GPIO_DeInit+0x1ec>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d01f      	beq.n	800ac94 <HAL_GPIO_DeInit+0xac>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a60      	ldr	r2, [pc, #384]	@ (800add8 <HAL_GPIO_DeInit+0x1f0>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d019      	beq.n	800ac90 <HAL_GPIO_DeInit+0xa8>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a5f      	ldr	r2, [pc, #380]	@ (800addc <HAL_GPIO_DeInit+0x1f4>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d013      	beq.n	800ac8c <HAL_GPIO_DeInit+0xa4>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a5e      	ldr	r2, [pc, #376]	@ (800ade0 <HAL_GPIO_DeInit+0x1f8>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00d      	beq.n	800ac88 <HAL_GPIO_DeInit+0xa0>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a5d      	ldr	r2, [pc, #372]	@ (800ade4 <HAL_GPIO_DeInit+0x1fc>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d007      	beq.n	800ac84 <HAL_GPIO_DeInit+0x9c>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a5c      	ldr	r2, [pc, #368]	@ (800ade8 <HAL_GPIO_DeInit+0x200>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d101      	bne.n	800ac80 <HAL_GPIO_DeInit+0x98>
 800ac7c:	2309      	movs	r3, #9
 800ac7e:	e010      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800ac80:	230a      	movs	r3, #10
 800ac82:	e00e      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800ac84:	2307      	movs	r3, #7
 800ac86:	e00c      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800ac88:	2306      	movs	r3, #6
 800ac8a:	e00a      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800ac8c:	2305      	movs	r3, #5
 800ac8e:	e008      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800ac90:	2304      	movs	r3, #4
 800ac92:	e006      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800ac94:	2303      	movs	r3, #3
 800ac96:	e004      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800ac98:	2302      	movs	r3, #2
 800ac9a:	e002      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e000      	b.n	800aca2 <HAL_GPIO_DeInit+0xba>
 800aca0:	2300      	movs	r3, #0
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	f002 0203 	and.w	r2, r2, #3
 800aca8:	0092      	lsls	r2, r2, #2
 800acaa:	4093      	lsls	r3, r2
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d136      	bne.n	800ad20 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	43db      	mvns	r3, r3
 800acba:	401a      	ands	r2, r3
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	43db      	mvns	r3, r3
 800acc8:	401a      	ands	r2, r3
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800acce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	43db      	mvns	r3, r3
 800acd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acdc:	4013      	ands	r3, r2
 800acde:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800ace0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	43db      	mvns	r3, r3
 800acea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acee:	4013      	ands	r3, r2
 800acf0:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f003 0303 	and.w	r3, r3, #3
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	220f      	movs	r2, #15
 800acfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ad00:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ad02:	4a30      	ldr	r2, [pc, #192]	@ (800adc4 <HAL_GPIO_DeInit+0x1dc>)
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	089b      	lsrs	r3, r3, #2
 800ad08:	3302      	adds	r3, #2
 800ad0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	43da      	mvns	r2, r3
 800ad12:	482c      	ldr	r0, [pc, #176]	@ (800adc4 <HAL_GPIO_DeInit+0x1dc>)
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	089b      	lsrs	r3, r3, #2
 800ad18:	400a      	ands	r2, r1
 800ad1a:	3302      	adds	r3, #2
 800ad1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	2103      	movs	r1, #3
 800ad2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	08da      	lsrs	r2, r3, #3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3208      	adds	r2, #8
 800ad3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	f003 0307 	and.w	r3, r3, #7
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	220f      	movs	r2, #15
 800ad4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4e:	43db      	mvns	r3, r3
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	08d2      	lsrs	r2, r2, #3
 800ad54:	4019      	ands	r1, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	3208      	adds	r2, #8
 800ad5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68da      	ldr	r2, [r3, #12]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	2103      	movs	r1, #3
 800ad68:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6c:	43db      	mvns	r3, r3
 800ad6e:	401a      	ands	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685a      	ldr	r2, [r3, #4]
 800ad78:	2101      	movs	r1, #1
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad80:	43db      	mvns	r3, r3
 800ad82:	401a      	ands	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	2103      	movs	r1, #3
 800ad92:	fa01 f303 	lsl.w	r3, r1, r3
 800ad96:	43db      	mvns	r3, r3
 800ad98:	401a      	ands	r2, r3
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	3301      	adds	r3, #1
 800ada2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	fa22 f303 	lsr.w	r3, r2, r3
 800adac:	2b00      	cmp	r3, #0
 800adae:	f47f af25 	bne.w	800abfc <HAL_GPIO_DeInit+0x14>
  }
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	371c      	adds	r7, #28
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr
 800adc0:	58000080 	.word	0x58000080
 800adc4:	58000400 	.word	0x58000400
 800adc8:	58020000 	.word	0x58020000
 800adcc:	58020400 	.word	0x58020400
 800add0:	58020800 	.word	0x58020800
 800add4:	58020c00 	.word	0x58020c00
 800add8:	58021000 	.word	0x58021000
 800addc:	58021400 	.word	0x58021400
 800ade0:	58021800 	.word	0x58021800
 800ade4:	58021c00 	.word	0x58021c00
 800ade8:	58022400 	.word	0x58022400

0800adec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	807b      	strh	r3, [r7, #2]
 800adf8:	4613      	mov	r3, r2
 800adfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800adfc:	787b      	ldrb	r3, [r7, #1]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae02:	887a      	ldrh	r2, [r7, #2]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ae08:	e003      	b.n	800ae12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ae0a:	887b      	ldrh	r3, [r7, #2]
 800ae0c:	041a      	lsls	r2, r3, #16
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	619a      	str	r2, [r3, #24]
}
 800ae12:	bf00      	nop
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
	...

0800ae20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e07f      	b.n	800af32 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f8a9 	bl	800af9e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2224      	movs	r2, #36	@ 0x24
 800ae50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0201 	bic.w	r2, r2, #1
 800ae62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800ae70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	689a      	ldr	r2, [r3, #8]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ae80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d107      	bne.n	800ae9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	689a      	ldr	r2, [r3, #8]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae96:	609a      	str	r2, [r3, #8]
 800ae98:	e006      	b.n	800aea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	689a      	ldr	r2, [r3, #8]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800aea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d104      	bne.n	800aeba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aeb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6859      	ldr	r1, [r3, #4]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	4b1d      	ldr	r3, [pc, #116]	@ (800af3c <HAL_I2C_Init+0x11c>)
 800aec6:	430b      	orrs	r3, r1
 800aec8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68da      	ldr	r2, [r3, #12]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aed8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	691a      	ldr	r2, [r3, #16]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	695b      	ldr	r3, [r3, #20]
 800aee2:	ea42 0103 	orr.w	r1, r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	021a      	lsls	r2, r3, #8
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	430a      	orrs	r2, r1
 800aef2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	69d9      	ldr	r1, [r3, #28]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1a      	ldr	r2, [r3, #32]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	430a      	orrs	r2, r1
 800af02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f042 0201 	orr.w	r2, r2, #1
 800af12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	02008000 	.word	0x02008000

0800af40 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e021      	b.n	800af96 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2224      	movs	r2, #36	@ 0x24
 800af56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f022 0201 	bic.w	r2, r2, #1
 800af68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f821 	bl	800afb2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b083      	sub	sp, #12
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800afa6:	bf00      	nop
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b083      	sub	sp, #12
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800afba:	bf00      	nop
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
	...

0800afc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af02      	add	r7, sp, #8
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	4608      	mov	r0, r1
 800afd2:	4611      	mov	r1, r2
 800afd4:	461a      	mov	r2, r3
 800afd6:	4603      	mov	r3, r0
 800afd8:	817b      	strh	r3, [r7, #10]
 800afda:	460b      	mov	r3, r1
 800afdc:	813b      	strh	r3, [r7, #8]
 800afde:	4613      	mov	r3, r2
 800afe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	2b20      	cmp	r3, #32
 800afec:	f040 80f9 	bne.w	800b1e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <HAL_I2C_Mem_Write+0x34>
 800aff6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d105      	bne.n	800b008 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b002:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e0ed      	b.n	800b1e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d101      	bne.n	800b016 <HAL_I2C_Mem_Write+0x4e>
 800b012:	2302      	movs	r3, #2
 800b014:	e0e6      	b.n	800b1e4 <HAL_I2C_Mem_Write+0x21c>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b01e:	f7fc f943 	bl	80072a8 <HAL_GetTick>
 800b022:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	2319      	movs	r3, #25
 800b02a:	2201      	movs	r2, #1
 800b02c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 fadd 	bl	800b5f0 <I2C_WaitOnFlagUntilTimeout>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e0d1      	b.n	800b1e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2221      	movs	r2, #33	@ 0x21
 800b044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2240      	movs	r2, #64	@ 0x40
 800b04c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2200      	movs	r2, #0
 800b054:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6a3a      	ldr	r2, [r7, #32]
 800b05a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b060:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b068:	88f8      	ldrh	r0, [r7, #6]
 800b06a:	893a      	ldrh	r2, [r7, #8]
 800b06c:	8979      	ldrh	r1, [r7, #10]
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	9301      	str	r3, [sp, #4]
 800b072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	4603      	mov	r3, r0
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 f9ed 	bl	800b458 <I2C_RequestMemoryWrite>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e0a9      	b.n	800b1e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b094:	b29b      	uxth	r3, r3
 800b096:	2bff      	cmp	r3, #255	@ 0xff
 800b098:	d90e      	bls.n	800b0b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	22ff      	movs	r2, #255	@ 0xff
 800b09e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0a4:	b2da      	uxtb	r2, r3
 800b0a6:	8979      	ldrh	r1, [r7, #10]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 fbbf 	bl	800b834 <I2C_TransferConfig>
 800b0b6:	e00f      	b.n	800b0d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	8979      	ldrh	r1, [r7, #10]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 fbae 	bl	800b834 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f000 fac7 	bl	800b670 <I2C_WaitOnTXISFlagUntilTimeout>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e07b      	b.n	800b1e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f0:	781a      	ldrb	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fc:	1c5a      	adds	r2, r3, #1
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b106:	b29b      	uxth	r3, r3
 800b108:	3b01      	subs	r3, #1
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b114:	3b01      	subs	r3, #1
 800b116:	b29a      	uxth	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b120:	b29b      	uxth	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d034      	beq.n	800b190 <HAL_I2C_Mem_Write+0x1c8>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d130      	bne.n	800b190 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b134:	2200      	movs	r2, #0
 800b136:	2180      	movs	r1, #128	@ 0x80
 800b138:	68f8      	ldr	r0, [r7, #12]
 800b13a:	f000 fa59 	bl	800b5f0 <I2C_WaitOnFlagUntilTimeout>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e04d      	b.n	800b1e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	2bff      	cmp	r3, #255	@ 0xff
 800b150:	d90e      	bls.n	800b170 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	22ff      	movs	r2, #255	@ 0xff
 800b156:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b15c:	b2da      	uxtb	r2, r3
 800b15e:	8979      	ldrh	r1, [r7, #10]
 800b160:	2300      	movs	r3, #0
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 fb63 	bl	800b834 <I2C_TransferConfig>
 800b16e:	e00f      	b.n	800b190 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b174:	b29a      	uxth	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	8979      	ldrh	r1, [r7, #10]
 800b182:	2300      	movs	r3, #0
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f000 fb52 	bl	800b834 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b194:	b29b      	uxth	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d19e      	bne.n	800b0d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b19a:	697a      	ldr	r2, [r7, #20]
 800b19c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 faa6 	bl	800b6f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e01a      	b.n	800b1e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2220      	movs	r2, #32
 800b1b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	6859      	ldr	r1, [r3, #4]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b1ec <HAL_I2C_Mem_Write+0x224>)
 800b1c2:	400b      	ands	r3, r1
 800b1c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2220      	movs	r2, #32
 800b1ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e000      	b.n	800b1e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b1e2:	2302      	movs	r3, #2
  }
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	fe00e800 	.word	0xfe00e800

0800b1f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b088      	sub	sp, #32
 800b1f4:	af02      	add	r7, sp, #8
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	4608      	mov	r0, r1
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	4603      	mov	r3, r0
 800b200:	817b      	strh	r3, [r7, #10]
 800b202:	460b      	mov	r3, r1
 800b204:	813b      	strh	r3, [r7, #8]
 800b206:	4613      	mov	r3, r2
 800b208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b20      	cmp	r3, #32
 800b214:	f040 80fd 	bne.w	800b412 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d002      	beq.n	800b224 <HAL_I2C_Mem_Read+0x34>
 800b21e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b220:	2b00      	cmp	r3, #0
 800b222:	d105      	bne.n	800b230 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b22a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e0f1      	b.n	800b414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b236:	2b01      	cmp	r3, #1
 800b238:	d101      	bne.n	800b23e <HAL_I2C_Mem_Read+0x4e>
 800b23a:	2302      	movs	r3, #2
 800b23c:	e0ea      	b.n	800b414 <HAL_I2C_Mem_Read+0x224>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b246:	f7fc f82f 	bl	80072a8 <HAL_GetTick>
 800b24a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	2319      	movs	r3, #25
 800b252:	2201      	movs	r2, #1
 800b254:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f000 f9c9 	bl	800b5f0 <I2C_WaitOnFlagUntilTimeout>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	e0d5      	b.n	800b414 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2222      	movs	r2, #34	@ 0x22
 800b26c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2240      	movs	r2, #64	@ 0x40
 800b274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a3a      	ldr	r2, [r7, #32]
 800b282:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b288:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b290:	88f8      	ldrh	r0, [r7, #6]
 800b292:	893a      	ldrh	r2, [r7, #8]
 800b294:	8979      	ldrh	r1, [r7, #10]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	4603      	mov	r3, r0
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f92d 	bl	800b500 <I2C_RequestMemoryRead>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d005      	beq.n	800b2b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e0ad      	b.n	800b414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	2bff      	cmp	r3, #255	@ 0xff
 800b2c0:	d90e      	bls.n	800b2e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	22ff      	movs	r2, #255	@ 0xff
 800b2c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	8979      	ldrh	r1, [r7, #10]
 800b2d0:	4b52      	ldr	r3, [pc, #328]	@ (800b41c <HAL_I2C_Mem_Read+0x22c>)
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f000 faab 	bl	800b834 <I2C_TransferConfig>
 800b2de:	e00f      	b.n	800b300 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	8979      	ldrh	r1, [r7, #10]
 800b2f2:	4b4a      	ldr	r3, [pc, #296]	@ (800b41c <HAL_I2C_Mem_Read+0x22c>)
 800b2f4:	9300      	str	r3, [sp, #0]
 800b2f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f000 fa9a 	bl	800b834 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b306:	2200      	movs	r2, #0
 800b308:	2104      	movs	r1, #4
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f000 f970 	bl	800b5f0 <I2C_WaitOnFlagUntilTimeout>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e07c      	b.n	800b414 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b324:	b2d2      	uxtb	r2, r2
 800b326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b342:	b29b      	uxth	r3, r3
 800b344:	3b01      	subs	r3, #1
 800b346:	b29a      	uxth	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b350:	b29b      	uxth	r3, r3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d034      	beq.n	800b3c0 <HAL_I2C_Mem_Read+0x1d0>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d130      	bne.n	800b3c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b364:	2200      	movs	r2, #0
 800b366:	2180      	movs	r1, #128	@ 0x80
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f000 f941 	bl	800b5f0 <I2C_WaitOnFlagUntilTimeout>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e04d      	b.n	800b414 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	2bff      	cmp	r3, #255	@ 0xff
 800b380:	d90e      	bls.n	800b3a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	22ff      	movs	r2, #255	@ 0xff
 800b386:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	8979      	ldrh	r1, [r7, #10]
 800b390:	2300      	movs	r3, #0
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 fa4b 	bl	800b834 <I2C_TransferConfig>
 800b39e:	e00f      	b.n	800b3c0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	8979      	ldrh	r1, [r7, #10]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f000 fa3a 	bl	800b834 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d19a      	bne.n	800b300 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f000 f98e 	bl	800b6f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e01a      	b.n	800b414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2220      	movs	r2, #32
 800b3e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6859      	ldr	r1, [r3, #4]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b420 <HAL_I2C_Mem_Read+0x230>)
 800b3f2:	400b      	ands	r3, r1
 800b3f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2220      	movs	r2, #32
 800b3fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b40e:	2300      	movs	r3, #0
 800b410:	e000      	b.n	800b414 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b412:	2302      	movs	r3, #2
  }
}
 800b414:	4618      	mov	r0, r3
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	80002400 	.word	0x80002400
 800b420:	fe00e800 	.word	0xfe00e800

0800b424 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b432:	b2db      	uxtb	r3, r3
}
 800b434:	4618      	mov	r0, r3
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af02      	add	r7, sp, #8
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	4608      	mov	r0, r1
 800b462:	4611      	mov	r1, r2
 800b464:	461a      	mov	r2, r3
 800b466:	4603      	mov	r3, r0
 800b468:	817b      	strh	r3, [r7, #10]
 800b46a:	460b      	mov	r3, r1
 800b46c:	813b      	strh	r3, [r7, #8]
 800b46e:	4613      	mov	r3, r2
 800b470:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b472:	88fb      	ldrh	r3, [r7, #6]
 800b474:	b2da      	uxtb	r2, r3
 800b476:	8979      	ldrh	r1, [r7, #10]
 800b478:	4b20      	ldr	r3, [pc, #128]	@ (800b4fc <I2C_RequestMemoryWrite+0xa4>)
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f000 f9d7 	bl	800b834 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b486:	69fa      	ldr	r2, [r7, #28]
 800b488:	69b9      	ldr	r1, [r7, #24]
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 f8f0 	bl	800b670 <I2C_WaitOnTXISFlagUntilTimeout>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e02c      	b.n	800b4f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b49a:	88fb      	ldrh	r3, [r7, #6]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d105      	bne.n	800b4ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b4a0:	893b      	ldrh	r3, [r7, #8]
 800b4a2:	b2da      	uxtb	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	629a      	str	r2, [r3, #40]	@ 0x28
 800b4aa:	e015      	b.n	800b4d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b4ac:	893b      	ldrh	r3, [r7, #8]
 800b4ae:	0a1b      	lsrs	r3, r3, #8
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	69b9      	ldr	r1, [r7, #24]
 800b4be:	68f8      	ldr	r0, [r7, #12]
 800b4c0:	f000 f8d6 	bl	800b670 <I2C_WaitOnTXISFlagUntilTimeout>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d001      	beq.n	800b4ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e012      	b.n	800b4f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b4ce:	893b      	ldrh	r3, [r7, #8]
 800b4d0:	b2da      	uxtb	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2180      	movs	r1, #128	@ 0x80
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f000 f884 	bl	800b5f0 <I2C_WaitOnFlagUntilTimeout>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e000      	b.n	800b4f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	80002000 	.word	0x80002000

0800b500 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af02      	add	r7, sp, #8
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	4608      	mov	r0, r1
 800b50a:	4611      	mov	r1, r2
 800b50c:	461a      	mov	r2, r3
 800b50e:	4603      	mov	r3, r0
 800b510:	817b      	strh	r3, [r7, #10]
 800b512:	460b      	mov	r3, r1
 800b514:	813b      	strh	r3, [r7, #8]
 800b516:	4613      	mov	r3, r2
 800b518:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b51a:	88fb      	ldrh	r3, [r7, #6]
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	8979      	ldrh	r1, [r7, #10]
 800b520:	4b20      	ldr	r3, [pc, #128]	@ (800b5a4 <I2C_RequestMemoryRead+0xa4>)
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	2300      	movs	r3, #0
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f000 f984 	bl	800b834 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b52c:	69fa      	ldr	r2, [r7, #28]
 800b52e:	69b9      	ldr	r1, [r7, #24]
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 f89d 	bl	800b670 <I2C_WaitOnTXISFlagUntilTimeout>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e02c      	b.n	800b59a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b540:	88fb      	ldrh	r3, [r7, #6]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d105      	bne.n	800b552 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b546:	893b      	ldrh	r3, [r7, #8]
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	629a      	str	r2, [r3, #40]	@ 0x28
 800b550:	e015      	b.n	800b57e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b552:	893b      	ldrh	r3, [r7, #8]
 800b554:	0a1b      	lsrs	r3, r3, #8
 800b556:	b29b      	uxth	r3, r3
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b560:	69fa      	ldr	r2, [r7, #28]
 800b562:	69b9      	ldr	r1, [r7, #24]
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f000 f883 	bl	800b670 <I2C_WaitOnTXISFlagUntilTimeout>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	e012      	b.n	800b59a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b574:	893b      	ldrh	r3, [r7, #8]
 800b576:	b2da      	uxtb	r2, r3
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	2200      	movs	r2, #0
 800b586:	2140      	movs	r1, #64	@ 0x40
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f831 	bl	800b5f0 <I2C_WaitOnFlagUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e000      	b.n	800b59a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	80002000 	.word	0x80002000

0800b5a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d103      	bne.n	800b5c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d007      	beq.n	800b5e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	699a      	ldr	r2, [r3, #24]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f042 0201 	orr.w	r2, r2, #1
 800b5e2:	619a      	str	r2, [r3, #24]
  }
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	603b      	str	r3, [r7, #0]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b600:	e022      	b.n	800b648 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b608:	d01e      	beq.n	800b648 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b60a:	f7fb fe4d 	bl	80072a8 <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	69bb      	ldr	r3, [r7, #24]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	429a      	cmp	r2, r3
 800b618:	d302      	bcc.n	800b620 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d113      	bne.n	800b648 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b624:	f043 0220 	orr.w	r2, r3, #32
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2220      	movs	r2, #32
 800b630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	2200      	movs	r2, #0
 800b640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e00f      	b.n	800b668 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	699a      	ldr	r2, [r3, #24]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	4013      	ands	r3, r2
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	429a      	cmp	r2, r3
 800b656:	bf0c      	ite	eq
 800b658:	2301      	moveq	r3, #1
 800b65a:	2300      	movne	r3, #0
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	461a      	mov	r2, r3
 800b660:	79fb      	ldrb	r3, [r7, #7]
 800b662:	429a      	cmp	r2, r3
 800b664:	d0cd      	beq.n	800b602 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b67c:	e02c      	b.n	800b6d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	68b9      	ldr	r1, [r7, #8]
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f000 f870 	bl	800b768 <I2C_IsAcknowledgeFailed>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e02a      	b.n	800b6e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b698:	d01e      	beq.n	800b6d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b69a:	f7fb fe05 	bl	80072a8 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d302      	bcc.n	800b6b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d113      	bne.n	800b6d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6b4:	f043 0220 	orr.w	r2, r3, #32
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2220      	movs	r2, #32
 800b6c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e007      	b.n	800b6e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	f003 0302 	and.w	r3, r3, #2
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d1cb      	bne.n	800b67e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b6fc:	e028      	b.n	800b750 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	68b9      	ldr	r1, [r7, #8]
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f000 f830 	bl	800b768 <I2C_IsAcknowledgeFailed>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b70e:	2301      	movs	r3, #1
 800b710:	e026      	b.n	800b760 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b712:	f7fb fdc9 	bl	80072a8 <HAL_GetTick>
 800b716:	4602      	mov	r2, r0
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d302      	bcc.n	800b728 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d113      	bne.n	800b750 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b72c:	f043 0220 	orr.w	r2, r3, #32
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2220      	movs	r2, #32
 800b738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2200      	movs	r2, #0
 800b740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e007      	b.n	800b760 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	f003 0320 	and.w	r3, r3, #32
 800b75a:	2b20      	cmp	r3, #32
 800b75c:	d1cf      	bne.n	800b6fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	f003 0310 	and.w	r3, r3, #16
 800b77e:	2b10      	cmp	r3, #16
 800b780:	d151      	bne.n	800b826 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b782:	e022      	b.n	800b7ca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78a:	d01e      	beq.n	800b7ca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b78c:	f7fb fd8c 	bl	80072a8 <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d302      	bcc.n	800b7a2 <I2C_IsAcknowledgeFailed+0x3a>
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d113      	bne.n	800b7ca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7a6:	f043 0220 	orr.w	r2, r3, #32
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2220      	movs	r2, #32
 800b7b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e02e      	b.n	800b828 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	f003 0320 	and.w	r3, r3, #32
 800b7d4:	2b20      	cmp	r3, #32
 800b7d6:	d1d5      	bne.n	800b784 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2210      	movs	r2, #16
 800b7de:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f7ff fedd 	bl	800b5a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6859      	ldr	r1, [r3, #4]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b830 <I2C_IsAcknowledgeFailed+0xc8>)
 800b7fa:	400b      	ands	r3, r1
 800b7fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b802:	f043 0204 	orr.w	r2, r3, #4
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e000      	b.n	800b828 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	fe00e800 	.word	0xfe00e800

0800b834 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	607b      	str	r3, [r7, #4]
 800b83e:	460b      	mov	r3, r1
 800b840:	817b      	strh	r3, [r7, #10]
 800b842:	4613      	mov	r3, r2
 800b844:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	0d5b      	lsrs	r3, r3, #21
 800b850:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b854:	4b0d      	ldr	r3, [pc, #52]	@ (800b88c <I2C_TransferConfig+0x58>)
 800b856:	430b      	orrs	r3, r1
 800b858:	43db      	mvns	r3, r3
 800b85a:	ea02 0103 	and.w	r1, r2, r3
 800b85e:	897b      	ldrh	r3, [r7, #10]
 800b860:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b864:	7a7b      	ldrb	r3, [r7, #9]
 800b866:	041b      	lsls	r3, r3, #16
 800b868:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	431a      	orrs	r2, r3
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	431a      	orrs	r2, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	430a      	orrs	r2, r1
 800b87c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b87e:	bf00      	nop
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	03ff63ff 	.word	0x03ff63ff

0800b890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b20      	cmp	r3, #32
 800b8a4:	d138      	bne.n	800b918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d101      	bne.n	800b8b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	e032      	b.n	800b91a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2224      	movs	r2, #36	@ 0x24
 800b8c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f022 0201 	bic.w	r2, r2, #1
 800b8d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b8e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	6819      	ldr	r1, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f042 0201 	orr.w	r2, r2, #1
 800b902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2220      	movs	r2, #32
 800b908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	e000      	b.n	800b91a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b918:	2302      	movs	r3, #2
  }
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b926:	b480      	push	{r7}
 800b928:	b085      	sub	sp, #20
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b20      	cmp	r3, #32
 800b93a:	d139      	bne.n	800b9b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b942:	2b01      	cmp	r3, #1
 800b944:	d101      	bne.n	800b94a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b946:	2302      	movs	r3, #2
 800b948:	e033      	b.n	800b9b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2224      	movs	r2, #36	@ 0x24
 800b956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f022 0201 	bic.w	r2, r2, #1
 800b968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b978:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	021b      	lsls	r3, r3, #8
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	4313      	orrs	r3, r2
 800b982:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f042 0201 	orr.w	r2, r2, #1
 800b99a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2220      	movs	r2, #32
 800b9a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	e000      	b.n	800b9b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b9b0:	2302      	movs	r3, #2
  }
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
	...

0800b9c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e0bf      	b.n	800bb52 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d106      	bne.n	800b9ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f8ba 	bl	800bb60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	699a      	ldr	r2, [r3, #24]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800ba02:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	6999      	ldr	r1, [r3, #24]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685a      	ldr	r2, [r3, #4]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ba18:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	430a      	orrs	r2, r1
 800ba26:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6899      	ldr	r1, [r3, #8]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	4b4a      	ldr	r3, [pc, #296]	@ (800bb5c <HAL_LTDC_Init+0x19c>)
 800ba34:	400b      	ands	r3, r1
 800ba36:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	041b      	lsls	r3, r3, #16
 800ba3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6899      	ldr	r1, [r3, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	699a      	ldr	r2, [r3, #24]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	431a      	orrs	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	68d9      	ldr	r1, [r3, #12]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	4b3e      	ldr	r3, [pc, #248]	@ (800bb5c <HAL_LTDC_Init+0x19c>)
 800ba62:	400b      	ands	r3, r1
 800ba64:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	69db      	ldr	r3, [r3, #28]
 800ba6a:	041b      	lsls	r3, r3, #16
 800ba6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68d9      	ldr	r1, [r3, #12]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a1a      	ldr	r2, [r3, #32]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	431a      	orrs	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	430a      	orrs	r2, r1
 800ba82:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6919      	ldr	r1, [r3, #16]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681a      	ldr	r2, [r3, #0]
 800ba8e:	4b33      	ldr	r3, [pc, #204]	@ (800bb5c <HAL_LTDC_Init+0x19c>)
 800ba90:	400b      	ands	r3, r1
 800ba92:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba98:	041b      	lsls	r3, r3, #16
 800ba9a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	6919      	ldr	r1, [r3, #16]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	431a      	orrs	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6959      	ldr	r1, [r3, #20]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	4b27      	ldr	r3, [pc, #156]	@ (800bb5c <HAL_LTDC_Init+0x19c>)
 800babe:	400b      	ands	r3, r1
 800bac0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac6:	041b      	lsls	r3, r3, #16
 800bac8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6959      	ldr	r1, [r3, #20]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	431a      	orrs	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	430a      	orrs	r2, r1
 800bade:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800bae6:	021b      	lsls	r3, r3, #8
 800bae8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800baf0:	041b      	lsls	r3, r3, #16
 800baf2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800bb02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800bb16:	431a      	orrs	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f042 0206 	orr.w	r2, r2, #6
 800bb2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	699a      	ldr	r2, [r3, #24]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f042 0201 	orr.w	r2, r2, #1
 800bb3e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	f000f800 	.word	0xf000f800

0800bb60 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800bb68:	bf00      	nop
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bb74:	b5b0      	push	{r4, r5, r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_LTDC_ConfigLayer+0x1a>
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e02c      	b.n	800bbe8 <HAL_LTDC_ConfigLayer+0x74>
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2202      	movs	r2, #2
 800bb9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2134      	movs	r1, #52	@ 0x34
 800bba4:	fb01 f303 	mul.w	r3, r1, r3
 800bba8:	4413      	add	r3, r2
 800bbaa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	4614      	mov	r4, r2
 800bbb2:	461d      	mov	r5, r3
 800bbb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bbbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f811 	bl	800bbf0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bdb0      	pop	{r4, r5, r7, pc}

0800bbf0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b089      	sub	sp, #36	@ 0x24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	685a      	ldr	r2, [r3, #4]
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	68db      	ldr	r3, [r3, #12]
 800bc06:	0c1b      	lsrs	r3, r3, #16
 800bc08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc0c:	4413      	add	r3, r2
 800bc0e:	041b      	lsls	r3, r3, #16
 800bc10:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	01db      	lsls	r3, r3, #7
 800bc1c:	4413      	add	r3, r2
 800bc1e:	3384      	adds	r3, #132	@ 0x84
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	6812      	ldr	r2, [r2, #0]
 800bc26:	4611      	mov	r1, r2
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	01d2      	lsls	r2, r2, #7
 800bc2c:	440a      	add	r2, r1
 800bc2e:	3284      	adds	r2, #132	@ 0x84
 800bc30:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800bc34:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	0c1b      	lsrs	r3, r3, #16
 800bc42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc46:	4413      	add	r3, r2
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4619      	mov	r1, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	01db      	lsls	r3, r3, #7
 800bc54:	440b      	add	r3, r1
 800bc56:	3384      	adds	r3, #132	@ 0x84
 800bc58:	4619      	mov	r1, r3
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	68da      	ldr	r2, [r3, #12]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc6e:	4413      	add	r3, r2
 800bc70:	041b      	lsls	r3, r3, #16
 800bc72:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	01db      	lsls	r3, r3, #7
 800bc7e:	4413      	add	r3, r2
 800bc80:	3384      	adds	r3, #132	@ 0x84
 800bc82:	689b      	ldr	r3, [r3, #8]
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	6812      	ldr	r2, [r2, #0]
 800bc88:	4611      	mov	r1, r2
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	01d2      	lsls	r2, r2, #7
 800bc8e:	440a      	add	r2, r1
 800bc90:	3284      	adds	r2, #132	@ 0x84
 800bc92:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800bc96:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bca6:	4413      	add	r3, r2
 800bca8:	1c5a      	adds	r2, r3, #1
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	01db      	lsls	r3, r3, #7
 800bcb4:	440b      	add	r3, r1
 800bcb6:	3384      	adds	r3, #132	@ 0x84
 800bcb8:	4619      	mov	r1, r3
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	01db      	lsls	r3, r3, #7
 800bcca:	4413      	add	r3, r2
 800bccc:	3384      	adds	r3, #132	@ 0x84
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	6812      	ldr	r2, [r2, #0]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	01d2      	lsls	r2, r2, #7
 800bcda:	440a      	add	r2, r1
 800bcdc:	3284      	adds	r2, #132	@ 0x84
 800bcde:	f023 0307 	bic.w	r3, r3, #7
 800bce2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	461a      	mov	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	01db      	lsls	r3, r3, #7
 800bcee:	4413      	add	r3, r2
 800bcf0:	3384      	adds	r3, #132	@ 0x84
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bd00:	021b      	lsls	r3, r3, #8
 800bd02:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bd0a:	041b      	lsls	r3, r3, #16
 800bd0c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	061b      	lsls	r3, r3, #24
 800bd14:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	01db      	lsls	r3, r3, #7
 800bd20:	4413      	add	r3, r2
 800bd22:	3384      	adds	r3, #132	@ 0x84
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	01db      	lsls	r3, r3, #7
 800bd30:	4413      	add	r3, r2
 800bd32:	3384      	adds	r3, #132	@ 0x84
 800bd34:	461a      	mov	r2, r3
 800bd36:	2300      	movs	r3, #0
 800bd38:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd40:	461a      	mov	r2, r3
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	431a      	orrs	r2, r3
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	431a      	orrs	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4619      	mov	r1, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	01db      	lsls	r3, r3, #7
 800bd54:	440b      	add	r3, r1
 800bd56:	3384      	adds	r3, #132	@ 0x84
 800bd58:	4619      	mov	r1, r3
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	01db      	lsls	r3, r3, #7
 800bd6a:	4413      	add	r3, r2
 800bd6c:	3384      	adds	r3, #132	@ 0x84
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	6812      	ldr	r2, [r2, #0]
 800bd74:	4611      	mov	r1, r2
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	01d2      	lsls	r2, r2, #7
 800bd7a:	440a      	add	r2, r1
 800bd7c:	3284      	adds	r2, #132	@ 0x84
 800bd7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bd82:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	01db      	lsls	r3, r3, #7
 800bd8e:	4413      	add	r3, r2
 800bd90:	3384      	adds	r3, #132	@ 0x84
 800bd92:	461a      	mov	r2, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	695b      	ldr	r3, [r3, #20]
 800bd98:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	01db      	lsls	r3, r3, #7
 800bda4:	4413      	add	r3, r2
 800bda6:	3384      	adds	r3, #132	@ 0x84
 800bda8:	69da      	ldr	r2, [r3, #28]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	01db      	lsls	r3, r3, #7
 800bdb4:	440b      	add	r3, r1
 800bdb6:	3384      	adds	r3, #132	@ 0x84
 800bdb8:	4619      	mov	r1, r3
 800bdba:	4b58      	ldr	r3, [pc, #352]	@ (800bf1c <LTDC_SetConfig+0x32c>)
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	69da      	ldr	r2, [r3, #28]
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	6a1b      	ldr	r3, [r3, #32]
 800bdc8:	68f9      	ldr	r1, [r7, #12]
 800bdca:	6809      	ldr	r1, [r1, #0]
 800bdcc:	4608      	mov	r0, r1
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	01c9      	lsls	r1, r1, #7
 800bdd2:	4401      	add	r1, r0
 800bdd4:	3184      	adds	r1, #132	@ 0x84
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	461a      	mov	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	01db      	lsls	r3, r3, #7
 800bde4:	4413      	add	r3, r2
 800bde6:	3384      	adds	r3, #132	@ 0x84
 800bde8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	01db      	lsls	r3, r3, #7
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3384      	adds	r3, #132	@ 0x84
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	01db      	lsls	r3, r3, #7
 800be08:	4413      	add	r3, r2
 800be0a:	3384      	adds	r3, #132	@ 0x84
 800be0c:	461a      	mov	r2, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be12:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	691b      	ldr	r3, [r3, #16]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800be1c:	2304      	movs	r3, #4
 800be1e:	61fb      	str	r3, [r7, #28]
 800be20:	e01b      	b.n	800be5a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	2b01      	cmp	r3, #1
 800be28:	d102      	bne.n	800be30 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800be2a:	2303      	movs	r3, #3
 800be2c:	61fb      	str	r3, [r7, #28]
 800be2e:	e014      	b.n	800be5a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	2b04      	cmp	r3, #4
 800be36:	d00b      	beq.n	800be50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d007      	beq.n	800be50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800be44:	2b03      	cmp	r3, #3
 800be46:	d003      	beq.n	800be50 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800be4c:	2b07      	cmp	r3, #7
 800be4e:	d102      	bne.n	800be56 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800be50:	2302      	movs	r3, #2
 800be52:	61fb      	str	r3, [r7, #28]
 800be54:	e001      	b.n	800be5a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800be56:	2301      	movs	r3, #1
 800be58:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	01db      	lsls	r3, r3, #7
 800be64:	4413      	add	r3, r2
 800be66:	3384      	adds	r3, #132	@ 0x84
 800be68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	6812      	ldr	r2, [r2, #0]
 800be6e:	4611      	mov	r1, r2
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	01d2      	lsls	r2, r2, #7
 800be74:	440a      	add	r2, r1
 800be76:	3284      	adds	r2, #132	@ 0x84
 800be78:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800be7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be82:	69fa      	ldr	r2, [r7, #28]
 800be84:	fb02 f303 	mul.w	r3, r2, r3
 800be88:	041a      	lsls	r2, r3, #16
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	6859      	ldr	r1, [r3, #4]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	1acb      	subs	r3, r1, r3
 800be94:	69f9      	ldr	r1, [r7, #28]
 800be96:	fb01 f303 	mul.w	r3, r1, r3
 800be9a:	3307      	adds	r3, #7
 800be9c:	68f9      	ldr	r1, [r7, #12]
 800be9e:	6809      	ldr	r1, [r1, #0]
 800bea0:	4608      	mov	r0, r1
 800bea2:	6879      	ldr	r1, [r7, #4]
 800bea4:	01c9      	lsls	r1, r1, #7
 800bea6:	4401      	add	r1, r0
 800bea8:	3184      	adds	r1, #132	@ 0x84
 800beaa:	4313      	orrs	r3, r2
 800beac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	01db      	lsls	r3, r3, #7
 800beb8:	4413      	add	r3, r2
 800beba:	3384      	adds	r3, #132	@ 0x84
 800bebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4619      	mov	r1, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	01db      	lsls	r3, r3, #7
 800bec8:	440b      	add	r3, r1
 800beca:	3384      	adds	r3, #132	@ 0x84
 800becc:	4619      	mov	r1, r3
 800bece:	4b14      	ldr	r3, [pc, #80]	@ (800bf20 <LTDC_SetConfig+0x330>)
 800bed0:	4013      	ands	r3, r2
 800bed2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	461a      	mov	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	01db      	lsls	r3, r3, #7
 800bede:	4413      	add	r3, r2
 800bee0:	3384      	adds	r3, #132	@ 0x84
 800bee2:	461a      	mov	r2, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	01db      	lsls	r3, r3, #7
 800bef4:	4413      	add	r3, r2
 800bef6:	3384      	adds	r3, #132	@ 0x84
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	6812      	ldr	r2, [r2, #0]
 800befe:	4611      	mov	r1, r2
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	01d2      	lsls	r2, r2, #7
 800bf04:	440a      	add	r2, r1
 800bf06:	3284      	adds	r2, #132	@ 0x84
 800bf08:	f043 0301 	orr.w	r3, r3, #1
 800bf0c:	6013      	str	r3, [r2, #0]
}
 800bf0e:	bf00      	nop
 800bf10:	3724      	adds	r7, #36	@ 0x24
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	fffff8f8 	.word	0xfffff8f8
 800bf20:	fffff800 	.word	0xfffff800

0800bf24 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bf2c:	f7fb f9bc 	bl	80072a8 <HAL_GetTick>
 800bf30:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e03b      	b.n	800bfb4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f022 0201 	bic.w	r2, r2, #1
 800bf5a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bf5c:	e00f      	b.n	800bf7e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800bf5e:	f7fb f9a3 	bl	80072a8 <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	2b05      	cmp	r3, #5
 800bf6a:	d908      	bls.n	800bf7e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2240      	movs	r2, #64	@ 0x40
 800bf70:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2203      	movs	r2, #3
 800bf76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e01a      	b.n	800bfb4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	f003 0301 	and.w	r3, r3, #1
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e8      	bne.n	800bf5e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 f815 	bl	800bfbc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68d9      	ldr	r1, [r3, #12]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	691a      	ldr	r2, [r3, #16]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	695a      	ldr	r2, [r3, #20]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	699b      	ldr	r3, [r3, #24]
 800bfdc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800bfe2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a1b      	ldr	r3, [r3, #32]
 800bfe8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800bfee:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800bffa:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c000:	3b01      	subs	r3, #1
 800c002:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800c004:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c010:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c012:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c01c:	d107      	bne.n	800c02e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	691a      	ldr	r2, [r3, #16]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800c02c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2200      	movs	r2, #0
 800c034:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	da11      	bge.n	800c062 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	695a      	ldr	r2, [r3, #20]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c04c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c052:	425b      	negs	r3, r3
 800c054:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	68fa      	ldr	r2, [r7, #12]
 800c05c:	b292      	uxth	r2, r2
 800c05e:	621a      	str	r2, [r3, #32]
 800c060:	e006      	b.n	800c070 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c066:	461a      	mov	r2, r3
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	b292      	uxth	r2, r2
 800c06e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c074:	2b00      	cmp	r3, #0
 800c076:	da15      	bge.n	800c0a4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	695a      	ldr	r2, [r3, #20]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800c086:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c08c:	425b      	negs	r3, r3
 800c08e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	6a19      	ldr	r1, [r3, #32]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	041a      	lsls	r2, r3, #16
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	621a      	str	r2, [r3, #32]
 800c0a2:	e009      	b.n	800c0b8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6a19      	ldr	r1, [r3, #32]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ae:	041a      	lsls	r2, r3, #16
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	430a      	orrs	r2, r1
 800c0b6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0c0:	d006      	beq.n	800c0d0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	b2d2      	uxtb	r2, r2
 800c0cc:	629a      	str	r2, [r3, #40]	@ 0x28
 800c0ce:	e003      	b.n	800c0d8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c0e0:	bf00      	nop
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0

}
 800c0f0:	bf00      	nop
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
	...

0800c0fc <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af02      	add	r7, sp, #8
 800c102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800c108:	f7fb f8ce 	bl	80072a8 <HAL_GetTick>
 800c10c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d102      	bne.n	800c11a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	73fb      	strb	r3, [r7, #15]
 800c118:	e0a9      	b.n	800c26e <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c124:	2b00      	cmp	r3, #0
 800c126:	f040 80a2 	bne.w	800c26e <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f8a6 	bl	800c27c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800c130:	f241 3188 	movw	r1, #5000	@ 0x1388
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 fae1 	bl	800c6fc <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	689a      	ldr	r2, [r3, #8]
 800c140:	4b4d      	ldr	r3, [pc, #308]	@ (800c278 <HAL_OSPI_Init+0x17c>)
 800c142:	4013      	ands	r3, r2
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	68d1      	ldr	r1, [r2, #12]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	6912      	ldr	r2, [r2, #16]
 800c14c:	3a01      	subs	r2, #1
 800c14e:	0412      	lsls	r2, r2, #16
 800c150:	4311      	orrs	r1, r2
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	6952      	ldr	r2, [r2, #20]
 800c156:	3a01      	subs	r2, #1
 800c158:	0212      	lsls	r2, r2, #8
 800c15a:	4311      	orrs	r1, r2
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c160:	0112      	lsls	r2, r2, #4
 800c162:	4311      	orrs	r1, r2
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c168:	4311      	orrs	r1, r2
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	69d2      	ldr	r2, [r2, #28]
 800c16e:	4311      	orrs	r1, r2
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	6812      	ldr	r2, [r2, #0]
 800c174:	430b      	orrs	r3, r1
 800c176:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a1a      	ldr	r2, [r3, #32]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	430a      	orrs	r2, r1
 800c18c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c192:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	430a      	orrs	r2, r1
 800c19e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c1a8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	021a      	lsls	r2, r3, #8
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	430a      	orrs	r2, r1
 800c1c2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2120      	movs	r1, #32
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 faa2 	bl	800c71a <OSPI_WaitFlagStateUntilTimeout>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800c1da:	7bfb      	ldrb	r3, [r7, #15]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d146      	bne.n	800c26e <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ee:	1e5a      	subs	r2, r3, #1
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	430a      	orrs	r2, r1
 800c1f6:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	689a      	ldr	r2, [r3, #8]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	430a      	orrs	r2, r1
 800c20c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c216:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c222:	431a      	orrs	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f042 0201 	orr.w	r2, r2, #1
 800c23c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	2b02      	cmp	r3, #2
 800c244:	d107      	bne.n	800c256 <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	689a      	ldr	r2, [r3, #8]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f042 0202 	orr.w	r2, r2, #2
 800c254:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c25e:	d103      	bne.n	800c268 <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2201      	movs	r2, #1
 800c264:	655a      	str	r2, [r3, #84]	@ 0x54
 800c266:	e002      	b.n	800c26e <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2202      	movs	r2, #2
 800c26c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Return function status */
  return status;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	f8e0f884 	.word	0xf8e0f884

0800c27c <HAL_OSPI_MspInit>:
  * @brief  Initialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspInit(OSPI_HandleTypeDef *hospi)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspInit can be implemented in the user file
   */
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d102      	bne.n	800c2a8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	73fb      	strb	r3, [r7, #15]
 800c2a6:	e015      	b.n	800c2d4 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f022 0201 	bic.w	r2, r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689a      	ldr	r2, [r3, #8]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f022 0202 	bic.w	r2, r2, #2
 800c2c6:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f808 	bl	800c2de <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  return status;
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <HAL_OSPI_MspDeInit>:
  * @brief  DeInitialize the OSPI MSP.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef *hospi)
{
 800c2de:	b480      	push	{r7}
 800c2e0:	b083      	sub	sp, #12
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_MspDeInit can be implemented in the user file
   */
}
 800c2e6:	bf00      	nop
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b08a      	sub	sp, #40	@ 0x28
 800c2f6:	af02      	add	r7, sp, #8
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	60b9      	str	r1, [r7, #8]
 800c2fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800c2fe:	f7fa ffd3 	bl	80072a8 <HAL_GetTick>
 800c302:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME       (cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE      (cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c308:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d002      	beq.n	800c316 <HAL_OSPI_HyperbusCfg+0x24>
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	2b02      	cmp	r3, #2
 800c314:	d122      	bne.n	800c35c <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	2200      	movs	r2, #0
 800c31e:	2120      	movs	r1, #32
 800c320:	68f8      	ldr	r0, [r7, #12]
 800c322:	f000 f9fa 	bl	800c71a <OSPI_WaitFlagStateUntilTimeout>
 800c326:	4603      	mov	r3, r0
 800c328:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800c32a:	7ffb      	ldrb	r3, [r7, #31]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d11a      	bne.n	800c366 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	041a      	lsls	r2, r3, #16
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	021b      	lsls	r3, r3, #8
 800c33c:	431a      	orrs	r2, r3
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	ea42 0103 	orr.w	r1, r2, r3
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	68da      	ldr	r2, [r3, #12]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	430a      	orrs	r2, r1
 800c350:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2202      	movs	r2, #2
 800c358:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 800c35a:	e004      	b.n	800c366 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2210      	movs	r2, #16
 800c364:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Return function status */
  return status;
 800c366:	7ffb      	ldrb	r3, [r7, #31]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <HAL_OSPI_HyperbusCmd>:
  * @param  cmd     : Structure containing the Hyperbus command
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCmd(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCmdTypeDef *cmd, uint32_t Timeout)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af02      	add	r7, sp, #8
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c37c:	f7fa ff94 	bl	80072a8 <HAL_GetTick>
 800c380:	6138      	str	r0, [r7, #16]
  assert_param(IS_OSPI_ADDRESS_SIZE (cmd->AddressSize));
  assert_param(IS_OSPI_NUMBER_DATA  (cmd->NbData));
  assert_param(IS_OSPI_DQS_MODE     (cmd->DQSMode));

  /* Check the state of the driver */
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c386:	2b02      	cmp	r3, #2
 800c388:	d149      	bne.n	800c41e <HAL_OSPI_HyperbusCmd+0xae>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c392:	d144      	bne.n	800c41e <HAL_OSPI_HyperbusCmd+0xae>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	2200      	movs	r2, #0
 800c39c:	2120      	movs	r1, #32
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f000 f9bb 	bl	800c71a <OSPI_WaitFlagStateUntilTimeout>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d13c      	bne.n	800c428 <HAL_OSPI_HyperbusCmd+0xb8>
    {
      /* Re-initialize the value of the functional mode */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c3bc:	601a      	str	r2, [r3, #0]

      /* Configure the address space in the DCR1 register */
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	609a      	str	r2, [r3, #8]

      /* Configure the CCR and WCCR registers with the address size and the following configuration :
         - DQS signal enabled (used as RWDS)
         - DTR mode enabled on address and data
         - address and data on 8 lines */
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	691a      	ldr	r2, [r3, #16]
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800c3e6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
                                       cmd->AddressSize | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADMODE_2));
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	691a      	ldr	r2, [r3, #16]
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	431a      	orrs	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f042 220c 	orr.w	r2, r2, #201329664	@ 0xc000c00
 800c3fc:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
                                        cmd->AddressSize | OCTOSPI_WCCR_ADDTR | OCTOSPI_WCCR_ADMODE_2));

      /* Configure the DLR register with the number of data */
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	68da      	ldr	r2, [r3, #12]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	3a01      	subs	r2, #1
 800c40a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure the AR register with the address value */
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	6852      	ldr	r2, [r2, #4]
 800c414:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2204      	movs	r2, #4
 800c41a:	655a      	str	r2, [r3, #84]	@ 0x54
    if (status == HAL_OK)
 800c41c:	e004      	b.n	800c428 <HAL_OSPI_HyperbusCmd+0xb8>
    }
  }
  else
  {
    status = HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2210      	movs	r2, #16
 800c426:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Return function status */
  return status;
 800c428:	7dfb      	ldrb	r3, [r7, #23]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3718      	adds	r7, #24
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b08a      	sub	sp, #40	@ 0x28
 800c436:	af02      	add	r7, sp, #8
 800c438:	60f8      	str	r0, [r7, #12]
 800c43a:	60b9      	str	r1, [r7, #8]
 800c43c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c43e:	f7fa ff33 	bl	80072a8 <HAL_GetTick>
 800c442:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	3350      	adds	r3, #80	@ 0x50
 800c44a:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d105      	bne.n	800c45e <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2208      	movs	r2, #8
 800c45a:	659a      	str	r2, [r3, #88]	@ 0x58
 800c45c:	e057      	b.n	800c50e <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c462:	2b04      	cmp	r3, #4
 800c464:	d14e      	bne.n	800c504 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c46c:	1c5a      	adds	r2, r3, #1
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	64da      	str	r2, [r3, #76]	@ 0x4c
      hospi->XferSize  = hospi->XferCount;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->pBuffPtr  = pData;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c48e:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	9300      	str	r3, [sp, #0]
 800c494:	69bb      	ldr	r3, [r7, #24]
 800c496:	2201      	movs	r2, #1
 800c498:	2104      	movs	r1, #4
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 f93d 	bl	800c71a <OSPI_WaitFlagStateUntilTimeout>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c4a4:	7ffb      	ldrb	r3, [r7, #31]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d113      	bne.n	800c4d2 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ae:	781a      	ldrb	r2, [r3, #0]
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4b8:	1c5a      	adds	r2, r3, #1
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->XferCount--;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4c2:	1e5a      	subs	r2, r3, #1
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hospi->XferCount > 0U);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1df      	bne.n	800c490 <HAL_OSPI_Transmit+0x5e>
 800c4d0:	e000      	b.n	800c4d4 <HAL_OSPI_Transmit+0xa2>
          break;
 800c4d2:	bf00      	nop

      if (status == HAL_OK)
 800c4d4:	7ffb      	ldrb	r3, [r7, #31]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d119      	bne.n	800c50e <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	2102      	movs	r1, #2
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 f918 	bl	800c71a <OSPI_WaitFlagStateUntilTimeout>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c4ee:	7ffb      	ldrb	r3, [r7, #31]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d10c      	bne.n	800c50e <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2202      	movs	r2, #2
 800c500:	655a      	str	r2, [r3, #84]	@ 0x54
 800c502:	e004      	b.n	800c50e <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800c504:	2301      	movs	r3, #1
 800c506:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2210      	movs	r2, #16
 800c50c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Return function status */
  return status;
 800c50e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3720      	adds	r7, #32
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08c      	sub	sp, #48	@ 0x30
 800c51c:	af02      	add	r7, sp, #8
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c524:	f7fa fec0 	bl	80072a8 <HAL_GetTick>
 800c528:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	3350      	adds	r3, #80	@ 0x50
 800c530:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c538:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800c542:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d106      	bne.n	800c558 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2208      	movs	r2, #8
 800c554:	659a      	str	r2, [r3, #88]	@ 0x58
 800c556:	e07c      	b.n	800c652 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c55c:	2b04      	cmp	r3, #4
 800c55e:	d172      	bne.n	800c646 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hospi->XferSize  = hospi->XferCount;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->pBuffPtr  = pData;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c58c:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c596:	d104      	bne.n	800c5a2 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	69ba      	ldr	r2, [r7, #24]
 800c59e:	649a      	str	r2, [r3, #72]	@ 0x48
 800c5a0:	e011      	b.n	800c5c6 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800c5aa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d004      	beq.n	800c5bc <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	69ba      	ldr	r2, [r7, #24]
 800c5b8:	649a      	str	r2, [r3, #72]	@ 0x48
 800c5ba:	e004      	b.n	800c5c6 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	2106      	movs	r1, #6
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 f8a2 	bl	800c71a <OSPI_WaitFlagStateUntilTimeout>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800c5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d114      	bne.n	800c60e <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5e8:	69fa      	ldr	r2, [r7, #28]
 800c5ea:	7812      	ldrb	r2, [r2, #0]
 800c5ec:	b2d2      	uxtb	r2, r2
 800c5ee:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5f4:	1c5a      	adds	r2, r3, #1
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hospi->XferCount--;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5fe:	1e5a      	subs	r2, r3, #1
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while(hospi->XferCount > 0U);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1dc      	bne.n	800c5c6 <HAL_OSPI_Receive+0xae>
 800c60c:	e000      	b.n	800c610 <HAL_OSPI_Receive+0xf8>
          break;
 800c60e:	bf00      	nop

      if (status == HAL_OK)
 800c610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c614:	2b00      	cmp	r3, #0
 800c616:	d11c      	bne.n	800c652 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	6a3b      	ldr	r3, [r7, #32]
 800c61e:	2201      	movs	r2, #1
 800c620:	2102      	movs	r1, #2
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 f879 	bl	800c71a <OSPI_WaitFlagStateUntilTimeout>
 800c628:	4603      	mov	r3, r0
 800c62a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800c62e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10d      	bne.n	800c652 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	2202      	movs	r2, #2
 800c63c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2202      	movs	r2, #2
 800c642:	655a      	str	r2, [r3, #84]	@ 0x54
 800c644:	e005      	b.n	800c652 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2210      	movs	r2, #16
 800c650:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Return function status */
  return status;
 800c652:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c656:	4618      	mov	r0, r3
 800c658:	3728      	adds	r7, #40	@ 0x28
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
	...

0800c660 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b086      	sub	sp, #24
 800c664:	af02      	add	r7, sp, #8
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c66a:	f7fa fe1d 	bl	80072a8 <HAL_GetTick>
 800c66e:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c674:	2b04      	cmp	r3, #4
 800c676:	d134      	bne.n	800c6e2 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2200      	movs	r2, #0
 800c682:	2120      	movs	r1, #32
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f848 	bl	800c71a <OSPI_WaitFlagStateUntilTimeout>
 800c68a:	4603      	mov	r3, r0
 800c68c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d12b      	bne.n	800c6ec <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2288      	movs	r2, #136	@ 0x88
 800c698:	655a      	str	r2, [r3, #84]	@ 0x54

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b08      	cmp	r3, #8
 800c6a0:	d111      	bne.n	800c6c6 <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	6852      	ldr	r2, [r2, #4]
 800c6aa:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2210      	movs	r2, #16
 800c6b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800c6c4:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f8 <HAL_OSPI_MemoryMapped+0x98>)
 800c6ce:	4013      	ands	r3, r2
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	6812      	ldr	r2, [r2, #0]
 800c6d4:	431a      	orrs	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800c6de:	601a      	str	r2, [r3, #0]
 800c6e0:	e004      	b.n	800c6ec <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2210      	movs	r2, #16
 800c6ea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Return function status */
  return status;
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	cffffff7 	.word	0xcffffff7

0800c6fc <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	65da      	str	r2, [r3, #92]	@ 0x5c
  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b084      	sub	sp, #16
 800c71e:	af00      	add	r7, sp, #0
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	60b9      	str	r1, [r7, #8]
 800c724:	603b      	str	r3, [r7, #0]
 800c726:	4613      	mov	r3, r2
 800c728:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c72a:	e01a      	b.n	800c762 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c732:	d016      	beq.n	800c762 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c734:	f7fa fdb8 	bl	80072a8 <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	69ba      	ldr	r2, [r7, #24]
 800c740:	429a      	cmp	r2, r3
 800c742:	d302      	bcc.n	800c74a <OSPI_WaitFlagStateUntilTimeout+0x30>
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10b      	bne.n	800c762 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c750:	655a      	str	r2, [r3, #84]	@ 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c756:	f043 0201 	orr.w	r2, r3, #1
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	659a      	str	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	e00e      	b.n	800c780 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	6a1a      	ldr	r2, [r3, #32]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	4013      	ands	r3, r2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	bf14      	ite	ne
 800c770:	2301      	movne	r3, #1
 800c772:	2300      	moveq	r3, #0
 800c774:	b2db      	uxtb	r3, r3
 800c776:	461a      	mov	r2, r3
 800c778:	79fb      	ldrb	r3, [r7, #7]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d1d6      	bne.n	800c72c <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800c790:	4b29      	ldr	r3, [pc, #164]	@ (800c838 <HAL_PWREx_ConfigSupply+0xb0>)
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	f003 0307 	and.w	r3, r3, #7
 800c798:	2b06      	cmp	r3, #6
 800c79a:	d00a      	beq.n	800c7b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c79c:	4b26      	ldr	r3, [pc, #152]	@ (800c838 <HAL_PWREx_ConfigSupply+0xb0>)
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d001      	beq.n	800c7ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e03f      	b.n	800c82e <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	e03d      	b.n	800c82e <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c7b2:	4b21      	ldr	r3, [pc, #132]	@ (800c838 <HAL_PWREx_ConfigSupply+0xb0>)
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800c7ba:	491f      	ldr	r1, [pc, #124]	@ (800c838 <HAL_PWREx_ConfigSupply+0xb0>)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c7c2:	f7fa fd71 	bl	80072a8 <HAL_GetTick>
 800c7c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c7c8:	e009      	b.n	800c7de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c7ca:	f7fa fd6d 	bl	80072a8 <HAL_GetTick>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c7d8:	d901      	bls.n	800c7de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e027      	b.n	800c82e <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c7de:	4b16      	ldr	r3, [pc, #88]	@ (800c838 <HAL_PWREx_ConfigSupply+0xb0>)
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7ea:	d1ee      	bne.n	800c7ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2b1e      	cmp	r3, #30
 800c7f0:	d008      	beq.n	800c804 <HAL_PWREx_ConfigSupply+0x7c>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7f6:	d005      	beq.n	800c804 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b1d      	cmp	r3, #29
 800c7fc:	d002      	beq.n	800c804 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b2d      	cmp	r3, #45	@ 0x2d
 800c802:	d113      	bne.n	800c82c <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800c804:	f7fa fd50 	bl	80072a8 <HAL_GetTick>
 800c808:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c80a:	e009      	b.n	800c820 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c80c:	f7fa fd4c 	bl	80072a8 <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c81a:	d901      	bls.n	800c820 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e006      	b.n	800c82e <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800c820:	4b05      	ldr	r3, [pc, #20]	@ (800c838 <HAL_PWREx_ConfigSupply+0xb0>)
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f003 0311 	and.w	r3, r3, #17
 800c828:	2b11      	cmp	r3, #17
 800c82a:	d1ef      	bne.n	800c80c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3710      	adds	r7, #16
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	58024800 	.word	0x58024800

0800c83c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08c      	sub	sp, #48	@ 0x30
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d101      	bne.n	800c84e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c84a:	2301      	movs	r3, #1
 800c84c:	e37b      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 0301 	and.w	r3, r3, #1
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 8087 	beq.w	800c96a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c85c:	4b95      	ldr	r3, [pc, #596]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c866:	4b93      	ldr	r3, [pc, #588]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c86a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86e:	2b10      	cmp	r3, #16
 800c870:	d007      	beq.n	800c882 <HAL_RCC_OscConfig+0x46>
 800c872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c874:	2b18      	cmp	r3, #24
 800c876:	d110      	bne.n	800c89a <HAL_RCC_OscConfig+0x5e>
 800c878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c87a:	f003 0303 	and.w	r3, r3, #3
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d10b      	bne.n	800c89a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c882:	4b8c      	ldr	r3, [pc, #560]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d06c      	beq.n	800c968 <HAL_RCC_OscConfig+0x12c>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d168      	bne.n	800c968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e355      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8a2:	d106      	bne.n	800c8b2 <HAL_RCC_OscConfig+0x76>
 800c8a4:	4b83      	ldr	r3, [pc, #524]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4a82      	ldr	r2, [pc, #520]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8ae:	6013      	str	r3, [r2, #0]
 800c8b0:	e02e      	b.n	800c910 <HAL_RCC_OscConfig+0xd4>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	685b      	ldr	r3, [r3, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10c      	bne.n	800c8d4 <HAL_RCC_OscConfig+0x98>
 800c8ba:	4b7e      	ldr	r3, [pc, #504]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a7d      	ldr	r2, [pc, #500]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c8c4:	6013      	str	r3, [r2, #0]
 800c8c6:	4b7b      	ldr	r3, [pc, #492]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a7a      	ldr	r2, [pc, #488]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	e01d      	b.n	800c910 <HAL_RCC_OscConfig+0xd4>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c8dc:	d10c      	bne.n	800c8f8 <HAL_RCC_OscConfig+0xbc>
 800c8de:	4b75      	ldr	r3, [pc, #468]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a74      	ldr	r2, [pc, #464]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c8e8:	6013      	str	r3, [r2, #0]
 800c8ea:	4b72      	ldr	r3, [pc, #456]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a71      	ldr	r2, [pc, #452]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c8f4:	6013      	str	r3, [r2, #0]
 800c8f6:	e00b      	b.n	800c910 <HAL_RCC_OscConfig+0xd4>
 800c8f8:	4b6e      	ldr	r3, [pc, #440]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a6d      	ldr	r2, [pc, #436]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c8fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c902:	6013      	str	r3, [r2, #0]
 800c904:	4b6b      	ldr	r3, [pc, #428]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a6a      	ldr	r2, [pc, #424]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c90a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c90e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d013      	beq.n	800c940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c918:	f7fa fcc6 	bl	80072a8 <HAL_GetTick>
 800c91c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c91e:	e008      	b.n	800c932 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c920:	f7fa fcc2 	bl	80072a8 <HAL_GetTick>
 800c924:	4602      	mov	r2, r0
 800c926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	2b64      	cmp	r3, #100	@ 0x64
 800c92c:	d901      	bls.n	800c932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c92e:	2303      	movs	r3, #3
 800c930:	e309      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c932:	4b60      	ldr	r3, [pc, #384]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d0f0      	beq.n	800c920 <HAL_RCC_OscConfig+0xe4>
 800c93e:	e014      	b.n	800c96a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c940:	f7fa fcb2 	bl	80072a8 <HAL_GetTick>
 800c944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c946:	e008      	b.n	800c95a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c948:	f7fa fcae 	bl	80072a8 <HAL_GetTick>
 800c94c:	4602      	mov	r2, r0
 800c94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	2b64      	cmp	r3, #100	@ 0x64
 800c954:	d901      	bls.n	800c95a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c956:	2303      	movs	r3, #3
 800c958:	e2f5      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c95a:	4b56      	ldr	r3, [pc, #344]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1f0      	bne.n	800c948 <HAL_RCC_OscConfig+0x10c>
 800c966:	e000      	b.n	800c96a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 0302 	and.w	r3, r3, #2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d06d      	beq.n	800ca52 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c976:	4b4f      	ldr	r3, [pc, #316]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c97e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c980:	4b4c      	ldr	r3, [pc, #304]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c984:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c986:	6a3b      	ldr	r3, [r7, #32]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d007      	beq.n	800c99c <HAL_RCC_OscConfig+0x160>
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	2b18      	cmp	r3, #24
 800c990:	d11b      	bne.n	800c9ca <HAL_RCC_OscConfig+0x18e>
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d116      	bne.n	800c9ca <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c99c:	4b45      	ldr	r3, [pc, #276]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 0304 	and.w	r3, r3, #4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d005      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x178>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	e2c8      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9b4:	4b3f      	ldr	r3, [pc, #252]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	061b      	lsls	r3, r3, #24
 800c9c2:	493c      	ldr	r1, [pc, #240]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c9c8:	e043      	b.n	800ca52 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d026      	beq.n	800ca20 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c9d2:	4b38      	ldr	r3, [pc, #224]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f023 0219 	bic.w	r2, r3, #25
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	4935      	ldr	r1, [pc, #212]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9e4:	f7fa fc60 	bl	80072a8 <HAL_GetTick>
 800c9e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c9ea:	e008      	b.n	800c9fe <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c9ec:	f7fa fc5c 	bl	80072a8 <HAL_GetTick>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d901      	bls.n	800c9fe <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e2a3      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c9fe:	4b2d      	ldr	r3, [pc, #180]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f003 0304 	and.w	r3, r3, #4
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0f0      	beq.n	800c9ec <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca0a:	4b2a      	ldr	r3, [pc, #168]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca0c:	685b      	ldr	r3, [r3, #4]
 800ca0e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	061b      	lsls	r3, r3, #24
 800ca18:	4926      	ldr	r1, [pc, #152]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	604b      	str	r3, [r1, #4]
 800ca1e:	e018      	b.n	800ca52 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ca20:	4b24      	ldr	r3, [pc, #144]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a23      	ldr	r2, [pc, #140]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca26:	f023 0301 	bic.w	r3, r3, #1
 800ca2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca2c:	f7fa fc3c 	bl	80072a8 <HAL_GetTick>
 800ca30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ca32:	e008      	b.n	800ca46 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ca34:	f7fa fc38 	bl	80072a8 <HAL_GetTick>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d901      	bls.n	800ca46 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800ca42:	2303      	movs	r3, #3
 800ca44:	e27f      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ca46:	4b1b      	ldr	r3, [pc, #108]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f003 0304 	and.w	r3, r3, #4
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1f0      	bne.n	800ca34 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 0310 	and.w	r3, r3, #16
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d06d      	beq.n	800cb3a <HAL_RCC_OscConfig+0x2fe>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca5e:	4b15      	ldr	r3, [pc, #84]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ca66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca68:	4b12      	ldr	r3, [pc, #72]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	2b08      	cmp	r3, #8
 800ca72:	d007      	beq.n	800ca84 <HAL_RCC_OscConfig+0x248>
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	2b18      	cmp	r3, #24
 800ca78:	d11e      	bne.n	800cab8 <HAL_RCC_OscConfig+0x27c>
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f003 0303 	and.w	r3, r3, #3
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d119      	bne.n	800cab8 <HAL_RCC_OscConfig+0x27c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ca84:	4b0b      	ldr	r3, [pc, #44]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d005      	beq.n	800ca9c <HAL_RCC_OscConfig+0x260>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	2b80      	cmp	r3, #128	@ 0x80
 800ca96:	d001      	beq.n	800ca9c <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	e254      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ca9c:	4b05      	ldr	r3, [pc, #20]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a1b      	ldr	r3, [r3, #32]
 800caa8:	061b      	lsls	r3, r3, #24
 800caaa:	4902      	ldr	r1, [pc, #8]	@ (800cab4 <HAL_RCC_OscConfig+0x278>)
 800caac:	4313      	orrs	r3, r2
 800caae:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cab0:	e043      	b.n	800cb3a <HAL_RCC_OscConfig+0x2fe>
 800cab2:	bf00      	nop
 800cab4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	69db      	ldr	r3, [r3, #28]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d023      	beq.n	800cb08 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cac0:	4b9c      	ldr	r3, [pc, #624]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a9b      	ldr	r2, [pc, #620]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cacc:	f7fa fbec 	bl	80072a8 <HAL_GetTick>
 800cad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cad2:	e008      	b.n	800cae6 <HAL_RCC_OscConfig+0x2aa>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cad4:	f7fa fbe8 	bl	80072a8 <HAL_GetTick>
 800cad8:	4602      	mov	r2, r0
 800cada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	2b02      	cmp	r3, #2
 800cae0:	d901      	bls.n	800cae6 <HAL_RCC_OscConfig+0x2aa>
          {
            return HAL_TIMEOUT;
 800cae2:	2303      	movs	r3, #3
 800cae4:	e22f      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cae6:	4b93      	ldr	r3, [pc, #588]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0f0      	beq.n	800cad4 <HAL_RCC_OscConfig+0x298>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800caf2:	4b90      	ldr	r3, [pc, #576]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	061b      	lsls	r3, r3, #24
 800cb00:	498c      	ldr	r1, [pc, #560]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb02:	4313      	orrs	r3, r2
 800cb04:	60cb      	str	r3, [r1, #12]
 800cb06:	e018      	b.n	800cb3a <HAL_RCC_OscConfig+0x2fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cb08:	4b8a      	ldr	r3, [pc, #552]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a89      	ldr	r2, [pc, #548]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb14:	f7fa fbc8 	bl	80072a8 <HAL_GetTick>
 800cb18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb1a:	e008      	b.n	800cb2e <HAL_RCC_OscConfig+0x2f2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800cb1c:	f7fa fbc4 	bl	80072a8 <HAL_GetTick>
 800cb20:	4602      	mov	r2, r0
 800cb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb24:	1ad3      	subs	r3, r2, r3
 800cb26:	2b02      	cmp	r3, #2
 800cb28:	d901      	bls.n	800cb2e <HAL_RCC_OscConfig+0x2f2>
          {
            return HAL_TIMEOUT;
 800cb2a:	2303      	movs	r3, #3
 800cb2c:	e20b      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb2e:	4b81      	ldr	r3, [pc, #516]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1f0      	bne.n	800cb1c <HAL_RCC_OscConfig+0x2e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f003 0308 	and.w	r3, r3, #8
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d036      	beq.n	800cbb4 <HAL_RCC_OscConfig+0x378>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d019      	beq.n	800cb82 <HAL_RCC_OscConfig+0x346>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb4e:	4b79      	ldr	r3, [pc, #484]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb52:	4a78      	ldr	r2, [pc, #480]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb54:	f043 0301 	orr.w	r3, r3, #1
 800cb58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb5a:	f7fa fba5 	bl	80072a8 <HAL_GetTick>
 800cb5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb60:	e008      	b.n	800cb74 <HAL_RCC_OscConfig+0x338>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb62:	f7fa fba1 	bl	80072a8 <HAL_GetTick>
 800cb66:	4602      	mov	r2, r0
 800cb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb6a:	1ad3      	subs	r3, r2, r3
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d901      	bls.n	800cb74 <HAL_RCC_OscConfig+0x338>
        {
          return HAL_TIMEOUT;
 800cb70:	2303      	movs	r3, #3
 800cb72:	e1e8      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb74:	4b6f      	ldr	r3, [pc, #444]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb78:	f003 0302 	and.w	r3, r3, #2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d0f0      	beq.n	800cb62 <HAL_RCC_OscConfig+0x326>
 800cb80:	e018      	b.n	800cbb4 <HAL_RCC_OscConfig+0x378>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb82:	4b6c      	ldr	r3, [pc, #432]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb86:	4a6b      	ldr	r2, [pc, #428]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cb88:	f023 0301 	bic.w	r3, r3, #1
 800cb8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb8e:	f7fa fb8b 	bl	80072a8 <HAL_GetTick>
 800cb92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cb94:	e008      	b.n	800cba8 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cb96:	f7fa fb87 	bl	80072a8 <HAL_GetTick>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d901      	bls.n	800cba8 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e1ce      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cba8:	4b62      	ldr	r3, [pc, #392]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cbaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbac:	f003 0302 	and.w	r3, r3, #2
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1f0      	bne.n	800cb96 <HAL_RCC_OscConfig+0x35a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 0320 	and.w	r3, r3, #32
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d036      	beq.n	800cc2e <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d019      	beq.n	800cbfc <HAL_RCC_OscConfig+0x3c0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cbc8:	4b5a      	ldr	r3, [pc, #360]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a59      	ldr	r2, [pc, #356]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cbce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cbd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cbd4:	f7fa fb68 	bl	80072a8 <HAL_GetTick>
 800cbd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cbda:	e008      	b.n	800cbee <HAL_RCC_OscConfig+0x3b2>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cbdc:	f7fa fb64 	bl	80072a8 <HAL_GetTick>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	1ad3      	subs	r3, r2, r3
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d901      	bls.n	800cbee <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
 800cbea:	2303      	movs	r3, #3
 800cbec:	e1ab      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cbee:	4b51      	ldr	r3, [pc, #324]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d0f0      	beq.n	800cbdc <HAL_RCC_OscConfig+0x3a0>
 800cbfa:	e018      	b.n	800cc2e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cbfc:	4b4d      	ldr	r3, [pc, #308]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a4c      	ldr	r2, [pc, #304]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cc02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc08:	f7fa fb4e 	bl	80072a8 <HAL_GetTick>
 800cc0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc0e:	e008      	b.n	800cc22 <HAL_RCC_OscConfig+0x3e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cc10:	f7fa fb4a 	bl	80072a8 <HAL_GetTick>
 800cc14:	4602      	mov	r2, r0
 800cc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	2b02      	cmp	r3, #2
 800cc1c:	d901      	bls.n	800cc22 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800cc1e:	2303      	movs	r3, #3
 800cc20:	e191      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc22:	4b44      	ldr	r3, [pc, #272]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1f0      	bne.n	800cc10 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 0304 	and.w	r3, r3, #4
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f000 8086 	beq.w	800cd48 <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cc3c:	4b3e      	ldr	r3, [pc, #248]	@ (800cd38 <HAL_RCC_OscConfig+0x4fc>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a3d      	ldr	r2, [pc, #244]	@ (800cd38 <HAL_RCC_OscConfig+0x4fc>)
 800cc42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cc48:	f7fa fb2e 	bl	80072a8 <HAL_GetTick>
 800cc4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc4e:	e008      	b.n	800cc62 <HAL_RCC_OscConfig+0x426>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cc50:	f7fa fb2a 	bl	80072a8 <HAL_GetTick>
 800cc54:	4602      	mov	r2, r0
 800cc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	2b64      	cmp	r3, #100	@ 0x64
 800cc5c:	d901      	bls.n	800cc62 <HAL_RCC_OscConfig+0x426>
      {
        return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e171      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc62:	4b35      	ldr	r3, [pc, #212]	@ (800cd38 <HAL_RCC_OscConfig+0x4fc>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0f0      	beq.n	800cc50 <HAL_RCC_OscConfig+0x414>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d106      	bne.n	800cc84 <HAL_RCC_OscConfig+0x448>
 800cc76:	4b2f      	ldr	r3, [pc, #188]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cc78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc7a:	4a2e      	ldr	r2, [pc, #184]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cc7c:	f043 0301 	orr.w	r3, r3, #1
 800cc80:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc82:	e02d      	b.n	800cce0 <HAL_RCC_OscConfig+0x4a4>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10c      	bne.n	800cca6 <HAL_RCC_OscConfig+0x46a>
 800cc8c:	4b29      	ldr	r3, [pc, #164]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cc8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc90:	4a28      	ldr	r2, [pc, #160]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cc92:	f023 0301 	bic.w	r3, r3, #1
 800cc96:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc98:	4b26      	ldr	r3, [pc, #152]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cc9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc9c:	4a25      	ldr	r2, [pc, #148]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cc9e:	f023 0304 	bic.w	r3, r3, #4
 800cca2:	6713      	str	r3, [r2, #112]	@ 0x70
 800cca4:	e01c      	b.n	800cce0 <HAL_RCC_OscConfig+0x4a4>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	2b05      	cmp	r3, #5
 800ccac:	d10c      	bne.n	800ccc8 <HAL_RCC_OscConfig+0x48c>
 800ccae:	4b21      	ldr	r3, [pc, #132]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800ccb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccb2:	4a20      	ldr	r2, [pc, #128]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800ccb4:	f043 0304 	orr.w	r3, r3, #4
 800ccb8:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccba:	4b1e      	ldr	r3, [pc, #120]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800ccbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccbe:	4a1d      	ldr	r2, [pc, #116]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800ccc0:	f043 0301 	orr.w	r3, r3, #1
 800ccc4:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccc6:	e00b      	b.n	800cce0 <HAL_RCC_OscConfig+0x4a4>
 800ccc8:	4b1a      	ldr	r3, [pc, #104]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800ccca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cccc:	4a19      	ldr	r2, [pc, #100]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800ccce:	f023 0301 	bic.w	r3, r3, #1
 800ccd2:	6713      	str	r3, [r2, #112]	@ 0x70
 800ccd4:	4b17      	ldr	r3, [pc, #92]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800ccd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccd8:	4a16      	ldr	r2, [pc, #88]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800ccda:	f023 0304 	bic.w	r3, r3, #4
 800ccde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d015      	beq.n	800cd14 <HAL_RCC_OscConfig+0x4d8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cce8:	f7fa fade 	bl	80072a8 <HAL_GetTick>
 800ccec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ccee:	e00a      	b.n	800cd06 <HAL_RCC_OscConfig+0x4ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccf0:	f7fa fada 	bl	80072a8 <HAL_GetTick>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d901      	bls.n	800cd06 <HAL_RCC_OscConfig+0x4ca>
        {
          return HAL_TIMEOUT;
 800cd02:	2303      	movs	r3, #3
 800cd04:	e11f      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd06:	4b0b      	ldr	r3, [pc, #44]	@ (800cd34 <HAL_RCC_OscConfig+0x4f8>)
 800cd08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd0a:	f003 0302 	and.w	r3, r3, #2
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d0ee      	beq.n	800ccf0 <HAL_RCC_OscConfig+0x4b4>
 800cd12:	e019      	b.n	800cd48 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd14:	f7fa fac8 	bl	80072a8 <HAL_GetTick>
 800cd18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd1a:	e00f      	b.n	800cd3c <HAL_RCC_OscConfig+0x500>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd1c:	f7fa fac4 	bl	80072a8 <HAL_GetTick>
 800cd20:	4602      	mov	r2, r0
 800cd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d906      	bls.n	800cd3c <HAL_RCC_OscConfig+0x500>
        {
          return HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e109      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
 800cd32:	bf00      	nop
 800cd34:	58024400 	.word	0x58024400
 800cd38:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd3c:	4b84      	ldr	r3, [pc, #528]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cd3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd40:	f003 0302 	and.w	r3, r3, #2
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d1e9      	bne.n	800cd1c <HAL_RCC_OscConfig+0x4e0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 80f9 	beq.w	800cf44 <HAL_RCC_OscConfig+0x708>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cd52:	4b7f      	ldr	r3, [pc, #508]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd5a:	2b18      	cmp	r3, #24
 800cd5c:	f000 80b4 	beq.w	800cec8 <HAL_RCC_OscConfig+0x68c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	f040 8095 	bne.w	800ce94 <HAL_RCC_OscConfig+0x658>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd6a:	4b79      	ldr	r3, [pc, #484]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a78      	ldr	r2, [pc, #480]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cd70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cd74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd76:	f7fa fa97 	bl	80072a8 <HAL_GetTick>
 800cd7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cd7c:	e008      	b.n	800cd90 <HAL_RCC_OscConfig+0x554>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cd7e:	f7fa fa93 	bl	80072a8 <HAL_GetTick>
 800cd82:	4602      	mov	r2, r0
 800cd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d901      	bls.n	800cd90 <HAL_RCC_OscConfig+0x554>
          {
            return HAL_TIMEOUT;
 800cd8c:	2303      	movs	r3, #3
 800cd8e:	e0da      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cd90:	4b6f      	ldr	r3, [pc, #444]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1f0      	bne.n	800cd7e <HAL_RCC_OscConfig+0x542>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cd9c:	4b6c      	ldr	r3, [pc, #432]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cd9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cda0:	4b6c      	ldr	r3, [pc, #432]	@ (800cf54 <HAL_RCC_OscConfig+0x718>)
 800cda2:	4013      	ands	r3, r2
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cdac:	0112      	lsls	r2, r2, #4
 800cdae:	430a      	orrs	r2, r1
 800cdb0:	4967      	ldr	r1, [pc, #412]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	628b      	str	r3, [r1, #40]	@ 0x28
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdba:	3b01      	subs	r3, #1
 800cdbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	025b      	lsls	r3, r3, #9
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	431a      	orrs	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	041b      	lsls	r3, r3, #16
 800cdd4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdde:	3b01      	subs	r3, #1
 800cde0:	061b      	lsls	r3, r3, #24
 800cde2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cde6:	495a      	ldr	r1, [pc, #360]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cde8:	4313      	orrs	r3, r2
 800cdea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800cdec:	4b58      	ldr	r3, [pc, #352]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf0:	4a57      	ldr	r2, [pc, #348]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cdf2:	f023 0301 	bic.w	r3, r3, #1
 800cdf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cdf8:	4b55      	ldr	r3, [pc, #340]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cdfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cdfc:	4b56      	ldr	r3, [pc, #344]	@ (800cf58 <HAL_RCC_OscConfig+0x71c>)
 800cdfe:	4013      	ands	r3, r2
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ce04:	00d2      	lsls	r2, r2, #3
 800ce06:	4952      	ldr	r1, [pc, #328]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ce0c:	4b50      	ldr	r3, [pc, #320]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce10:	f023 020c 	bic.w	r2, r3, #12
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce18:	494d      	ldr	r1, [pc, #308]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ce1e:	4b4c      	ldr	r3, [pc, #304]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce22:	f023 0202 	bic.w	r2, r3, #2
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce2a:	4949      	ldr	r1, [pc, #292]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ce30:	4b47      	ldr	r3, [pc, #284]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce34:	4a46      	ldr	r2, [pc, #280]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce3c:	4b44      	ldr	r3, [pc, #272]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce40:	4a43      	ldr	r2, [pc, #268]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ce48:	4b41      	ldr	r3, [pc, #260]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce4c:	4a40      	ldr	r2, [pc, #256]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ce52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ce54:	4b3e      	ldr	r3, [pc, #248]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce58:	4a3d      	ldr	r2, [pc, #244]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce5a:	f043 0301 	orr.w	r3, r3, #1
 800ce5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce60:	4b3b      	ldr	r3, [pc, #236]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a3a      	ldr	r2, [pc, #232]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ce6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce6c:	f7fa fa1c 	bl	80072a8 <HAL_GetTick>
 800ce70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ce72:	e008      	b.n	800ce86 <HAL_RCC_OscConfig+0x64a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce74:	f7fa fa18 	bl	80072a8 <HAL_GetTick>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7c:	1ad3      	subs	r3, r2, r3
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	d901      	bls.n	800ce86 <HAL_RCC_OscConfig+0x64a>
          {
            return HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e05f      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ce86:	4b32      	ldr	r3, [pc, #200]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0f0      	beq.n	800ce74 <HAL_RCC_OscConfig+0x638>
 800ce92:	e057      	b.n	800cf44 <HAL_RCC_OscConfig+0x708>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce94:	4b2e      	ldr	r3, [pc, #184]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a2d      	ldr	r2, [pc, #180]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ce9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ce9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cea0:	f7fa fa02 	bl	80072a8 <HAL_GetTick>
 800cea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cea6:	e008      	b.n	800ceba <HAL_RCC_OscConfig+0x67e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cea8:	f7fa f9fe 	bl	80072a8 <HAL_GetTick>
 800ceac:	4602      	mov	r2, r0
 800ceae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	d901      	bls.n	800ceba <HAL_RCC_OscConfig+0x67e>
          {
            return HAL_TIMEOUT;
 800ceb6:	2303      	movs	r3, #3
 800ceb8:	e045      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ceba:	4b25      	ldr	r3, [pc, #148]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1f0      	bne.n	800cea8 <HAL_RCC_OscConfig+0x66c>
 800cec6:	e03d      	b.n	800cf44 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cec8:	4b21      	ldr	r3, [pc, #132]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ceca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cecc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cece:	4b20      	ldr	r3, [pc, #128]	@ (800cf50 <HAL_RCC_OscConfig+0x714>)
 800ced0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ced2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d031      	beq.n	800cf40 <HAL_RCC_OscConfig+0x704>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	f003 0203 	and.w	r2, r3, #3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d12a      	bne.n	800cf40 <HAL_RCC_OscConfig+0x704>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	091b      	lsrs	r3, r3, #4
 800ceee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d122      	bne.n	800cf40 <HAL_RCC_OscConfig+0x704>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d11a      	bne.n	800cf40 <HAL_RCC_OscConfig+0x704>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	0a5b      	lsrs	r3, r3, #9
 800cf0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d111      	bne.n	800cf40 <HAL_RCC_OscConfig+0x704>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	0c1b      	lsrs	r3, r3, #16
 800cf20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d108      	bne.n	800cf40 <HAL_RCC_OscConfig+0x704>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	0e1b      	lsrs	r3, r3, #24
 800cf32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d001      	beq.n	800cf44 <HAL_RCC_OscConfig+0x708>
      {
        return HAL_ERROR;
 800cf40:	2301      	movs	r3, #1
 800cf42:	e000      	b.n	800cf46 <HAL_RCC_OscConfig+0x70a>
      }
    }
  }
  return HAL_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3730      	adds	r7, #48	@ 0x30
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	58024400 	.word	0x58024400
 800cf54:	fffffc0c 	.word	0xfffffc0c
 800cf58:	ffff0007 	.word	0xffff0007

0800cf5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e19c      	b.n	800d2aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cf70:	4b8a      	ldr	r3, [pc, #552]	@ (800d19c <HAL_RCC_ClockConfig+0x240>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f003 030f 	and.w	r3, r3, #15
 800cf78:	683a      	ldr	r2, [r7, #0]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d910      	bls.n	800cfa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf7e:	4b87      	ldr	r3, [pc, #540]	@ (800d19c <HAL_RCC_ClockConfig+0x240>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f023 020f 	bic.w	r2, r3, #15
 800cf86:	4985      	ldr	r1, [pc, #532]	@ (800d19c <HAL_RCC_ClockConfig+0x240>)
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf8e:	4b83      	ldr	r3, [pc, #524]	@ (800d19c <HAL_RCC_ClockConfig+0x240>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 030f 	and.w	r3, r3, #15
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d001      	beq.n	800cfa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e184      	b.n	800d2aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d010      	beq.n	800cfce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	691a      	ldr	r2, [r3, #16]
 800cfb0:	4b7b      	ldr	r3, [pc, #492]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d908      	bls.n	800cfce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cfbc:	4b78      	ldr	r3, [pc, #480]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800cfbe:	699b      	ldr	r3, [r3, #24]
 800cfc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	691b      	ldr	r3, [r3, #16]
 800cfc8:	4975      	ldr	r1, [pc, #468]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f003 0308 	and.w	r3, r3, #8
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d010      	beq.n	800cffc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	695a      	ldr	r2, [r3, #20]
 800cfde:	4b70      	ldr	r3, [pc, #448]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800cfe0:	69db      	ldr	r3, [r3, #28]
 800cfe2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d908      	bls.n	800cffc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cfea:	4b6d      	ldr	r3, [pc, #436]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800cfec:	69db      	ldr	r3, [r3, #28]
 800cfee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	496a      	ldr	r1, [pc, #424]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800cff8:	4313      	orrs	r3, r2
 800cffa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f003 0310 	and.w	r3, r3, #16
 800d004:	2b00      	cmp	r3, #0
 800d006:	d010      	beq.n	800d02a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	699a      	ldr	r2, [r3, #24]
 800d00c:	4b64      	ldr	r3, [pc, #400]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d00e:	69db      	ldr	r3, [r3, #28]
 800d010:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d014:	429a      	cmp	r2, r3
 800d016:	d908      	bls.n	800d02a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d018:	4b61      	ldr	r3, [pc, #388]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	699b      	ldr	r3, [r3, #24]
 800d024:	495e      	ldr	r1, [pc, #376]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d026:	4313      	orrs	r3, r2
 800d028:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f003 0320 	and.w	r3, r3, #32
 800d032:	2b00      	cmp	r3, #0
 800d034:	d010      	beq.n	800d058 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	69da      	ldr	r2, [r3, #28]
 800d03a:	4b59      	ldr	r3, [pc, #356]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d03c:	6a1b      	ldr	r3, [r3, #32]
 800d03e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d042:	429a      	cmp	r2, r3
 800d044:	d908      	bls.n	800d058 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d046:	4b56      	ldr	r3, [pc, #344]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	69db      	ldr	r3, [r3, #28]
 800d052:	4953      	ldr	r1, [pc, #332]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d054:	4313      	orrs	r3, r2
 800d056:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d010      	beq.n	800d086 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	68da      	ldr	r2, [r3, #12]
 800d068:	4b4d      	ldr	r3, [pc, #308]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d06a:	699b      	ldr	r3, [r3, #24]
 800d06c:	f003 030f 	and.w	r3, r3, #15
 800d070:	429a      	cmp	r2, r3
 800d072:	d908      	bls.n	800d086 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d074:	4b4a      	ldr	r3, [pc, #296]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	f023 020f 	bic.w	r2, r3, #15
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	4947      	ldr	r1, [pc, #284]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d082:	4313      	orrs	r3, r2
 800d084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d055      	beq.n	800d13e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d092:	4b43      	ldr	r3, [pc, #268]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	4940      	ldr	r1, [pc, #256]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d107      	bne.n	800d0bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d0ac:	4b3c      	ldr	r3, [pc, #240]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d121      	bne.n	800d0fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e0f6      	b.n	800d2aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	d107      	bne.n	800d0d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d0c4:	4b36      	ldr	r3, [pc, #216]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d115      	bne.n	800d0fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e0ea      	b.n	800d2aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d107      	bne.n	800d0ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d0dc:	4b30      	ldr	r3, [pc, #192]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d109      	bne.n	800d0fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e0de      	b.n	800d2aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d0ec:	4b2c      	ldr	r3, [pc, #176]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 0304 	and.w	r3, r3, #4
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d101      	bne.n	800d0fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e0d6      	b.n	800d2aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d0fc:	4b28      	ldr	r3, [pc, #160]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	f023 0207 	bic.w	r2, r3, #7
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	4925      	ldr	r1, [pc, #148]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d10a:	4313      	orrs	r3, r2
 800d10c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d10e:	f7fa f8cb 	bl	80072a8 <HAL_GetTick>
 800d112:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d114:	e00a      	b.n	800d12c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d116:	f7fa f8c7 	bl	80072a8 <HAL_GetTick>
 800d11a:	4602      	mov	r2, r0
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d124:	4293      	cmp	r3, r2
 800d126:	d901      	bls.n	800d12c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800d128:	2303      	movs	r3, #3
 800d12a:	e0be      	b.n	800d2aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d12c:	4b1c      	ldr	r3, [pc, #112]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	00db      	lsls	r3, r3, #3
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d1eb      	bne.n	800d116 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f003 0302 	and.w	r3, r3, #2
 800d146:	2b00      	cmp	r3, #0
 800d148:	d010      	beq.n	800d16c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	68da      	ldr	r2, [r3, #12]
 800d14e:	4b14      	ldr	r3, [pc, #80]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d150:	699b      	ldr	r3, [r3, #24]
 800d152:	f003 030f 	and.w	r3, r3, #15
 800d156:	429a      	cmp	r2, r3
 800d158:	d208      	bcs.n	800d16c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d15a:	4b11      	ldr	r3, [pc, #68]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d15c:	699b      	ldr	r3, [r3, #24]
 800d15e:	f023 020f 	bic.w	r2, r3, #15
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	490e      	ldr	r1, [pc, #56]	@ (800d1a0 <HAL_RCC_ClockConfig+0x244>)
 800d168:	4313      	orrs	r3, r2
 800d16a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d16c:	4b0b      	ldr	r3, [pc, #44]	@ (800d19c <HAL_RCC_ClockConfig+0x240>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f003 030f 	and.w	r3, r3, #15
 800d174:	683a      	ldr	r2, [r7, #0]
 800d176:	429a      	cmp	r2, r3
 800d178:	d214      	bcs.n	800d1a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d17a:	4b08      	ldr	r3, [pc, #32]	@ (800d19c <HAL_RCC_ClockConfig+0x240>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f023 020f 	bic.w	r2, r3, #15
 800d182:	4906      	ldr	r1, [pc, #24]	@ (800d19c <HAL_RCC_ClockConfig+0x240>)
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	4313      	orrs	r3, r2
 800d188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d18a:	4b04      	ldr	r3, [pc, #16]	@ (800d19c <HAL_RCC_ClockConfig+0x240>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f003 030f 	and.w	r3, r3, #15
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	429a      	cmp	r2, r3
 800d196:	d005      	beq.n	800d1a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	e086      	b.n	800d2aa <HAL_RCC_ClockConfig+0x34e>
 800d19c:	52002000 	.word	0x52002000
 800d1a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 0304 	and.w	r3, r3, #4
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d010      	beq.n	800d1d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	691a      	ldr	r2, [r3, #16]
 800d1b4:	4b3f      	ldr	r3, [pc, #252]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d208      	bcs.n	800d1d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d1c0:	4b3c      	ldr	r3, [pc, #240]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	4939      	ldr	r1, [pc, #228]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f003 0308 	and.w	r3, r3, #8
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d010      	beq.n	800d200 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	695a      	ldr	r2, [r3, #20]
 800d1e2:	4b34      	ldr	r3, [pc, #208]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d1e4:	69db      	ldr	r3, [r3, #28]
 800d1e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d208      	bcs.n	800d200 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d1ee:	4b31      	ldr	r3, [pc, #196]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d1f0:	69db      	ldr	r3, [r3, #28]
 800d1f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	695b      	ldr	r3, [r3, #20]
 800d1fa:	492e      	ldr	r1, [pc, #184]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 0310 	and.w	r3, r3, #16
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d010      	beq.n	800d22e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	699a      	ldr	r2, [r3, #24]
 800d210:	4b28      	ldr	r3, [pc, #160]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d212:	69db      	ldr	r3, [r3, #28]
 800d214:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d218:	429a      	cmp	r2, r3
 800d21a:	d208      	bcs.n	800d22e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d21c:	4b25      	ldr	r3, [pc, #148]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d21e:	69db      	ldr	r3, [r3, #28]
 800d220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	699b      	ldr	r3, [r3, #24]
 800d228:	4922      	ldr	r1, [pc, #136]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d22a:	4313      	orrs	r3, r2
 800d22c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 0320 	and.w	r3, r3, #32
 800d236:	2b00      	cmp	r3, #0
 800d238:	d010      	beq.n	800d25c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	69da      	ldr	r2, [r3, #28]
 800d23e:	4b1d      	ldr	r3, [pc, #116]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d246:	429a      	cmp	r2, r3
 800d248:	d208      	bcs.n	800d25c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d24a:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	69db      	ldr	r3, [r3, #28]
 800d256:	4917      	ldr	r1, [pc, #92]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d258:	4313      	orrs	r3, r2
 800d25a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d25c:	f000 f89e 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 800d260:	4602      	mov	r2, r0
 800d262:	4b14      	ldr	r3, [pc, #80]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	0a1b      	lsrs	r3, r3, #8
 800d268:	f003 030f 	and.w	r3, r3, #15
 800d26c:	4912      	ldr	r1, [pc, #72]	@ (800d2b8 <HAL_RCC_ClockConfig+0x35c>)
 800d26e:	5ccb      	ldrb	r3, [r1, r3]
 800d270:	f003 031f 	and.w	r3, r3, #31
 800d274:	fa22 f303 	lsr.w	r3, r2, r3
 800d278:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d27a:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b4 <HAL_RCC_ClockConfig+0x358>)
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	f003 030f 	and.w	r3, r3, #15
 800d282:	4a0d      	ldr	r2, [pc, #52]	@ (800d2b8 <HAL_RCC_ClockConfig+0x35c>)
 800d284:	5cd3      	ldrb	r3, [r2, r3]
 800d286:	f003 031f 	and.w	r3, r3, #31
 800d28a:	693a      	ldr	r2, [r7, #16]
 800d28c:	fa22 f303 	lsr.w	r3, r2, r3
 800d290:	4a0a      	ldr	r2, [pc, #40]	@ (800d2bc <HAL_RCC_ClockConfig+0x360>)
 800d292:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d294:	4a0a      	ldr	r2, [pc, #40]	@ (800d2c0 <HAL_RCC_ClockConfig+0x364>)
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800d29a:	4b0a      	ldr	r3, [pc, #40]	@ (800d2c4 <HAL_RCC_ClockConfig+0x368>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7f9 ffb8 	bl	8007214 <HAL_InitTick>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	58024400 	.word	0x58024400
 800d2b8:	08015a7c 	.word	0x08015a7c
 800d2bc:	24000528 	.word	0x24000528
 800d2c0:	24000524 	.word	0x24000524
 800d2c4:	24000468 	.word	0x24000468

0800d2c8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b08c      	sub	sp, #48	@ 0x30
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d12a      	bne.n	800d330 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800d2da:	4b2d      	ldr	r3, [pc, #180]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d2dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2e0:	4a2b      	ldr	r2, [pc, #172]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d2e2:	f043 0301 	orr.w	r3, r3, #1
 800d2e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d2ea:	4b29      	ldr	r3, [pc, #164]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d2ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2f0:	f003 0301 	and.w	r3, r3, #1
 800d2f4:	61bb      	str	r3, [r7, #24]
 800d2f6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800d2f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2fe:	2302      	movs	r3, #2
 800d300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d302:	2303      	movs	r3, #3
 800d304:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d306:	2300      	movs	r3, #0
 800d308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d30a:	2300      	movs	r3, #0
 800d30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800d30e:	f107 031c 	add.w	r3, r7, #28
 800d312:	4619      	mov	r1, r3
 800d314:	481f      	ldr	r0, [pc, #124]	@ (800d394 <HAL_RCC_MCOConfig+0xcc>)
 800d316:	f7fd fabf 	bl	800a898 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800d31a:	4b1d      	ldr	r3, [pc, #116]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d31c:	691b      	ldr	r3, [r3, #16]
 800d31e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	430b      	orrs	r3, r1
 800d328:	4919      	ldr	r1, [pc, #100]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d32a:	4313      	orrs	r3, r2
 800d32c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800d32e:	e02a      	b.n	800d386 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800d330:	4b17      	ldr	r3, [pc, #92]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d336:	4a16      	ldr	r2, [pc, #88]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d338:	f043 0304 	orr.w	r3, r3, #4
 800d33c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d340:	4b13      	ldr	r3, [pc, #76]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d346:	f003 0304 	and.w	r3, r3, #4
 800d34a:	617b      	str	r3, [r7, #20]
 800d34c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800d34e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d354:	2302      	movs	r3, #2
 800d356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d358:	2303      	movs	r3, #3
 800d35a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d35c:	2300      	movs	r3, #0
 800d35e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800d360:	2300      	movs	r3, #0
 800d362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800d364:	f107 031c 	add.w	r3, r7, #28
 800d368:	4619      	mov	r1, r3
 800d36a:	480b      	ldr	r0, [pc, #44]	@ (800d398 <HAL_RCC_MCOConfig+0xd0>)
 800d36c:	f7fd fa94 	bl	800a898 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800d370:	4b07      	ldr	r3, [pc, #28]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d372:	691b      	ldr	r3, [r3, #16]
 800d374:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	01d9      	lsls	r1, r3, #7
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	430b      	orrs	r3, r1
 800d380:	4903      	ldr	r1, [pc, #12]	@ (800d390 <HAL_RCC_MCOConfig+0xc8>)
 800d382:	4313      	orrs	r3, r2
 800d384:	610b      	str	r3, [r1, #16]
}
 800d386:	bf00      	nop
 800d388:	3730      	adds	r7, #48	@ 0x30
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	58024400 	.word	0x58024400
 800d394:	58020000 	.word	0x58020000
 800d398:	58020800 	.word	0x58020800

0800d39c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b089      	sub	sp, #36	@ 0x24
 800d3a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d3a2:	4bb3      	ldr	r3, [pc, #716]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3a4:	691b      	ldr	r3, [r3, #16]
 800d3a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3aa:	2b18      	cmp	r3, #24
 800d3ac:	f200 8155 	bhi.w	800d65a <HAL_RCC_GetSysClockFreq+0x2be>
 800d3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b6:	bf00      	nop
 800d3b8:	0800d41d 	.word	0x0800d41d
 800d3bc:	0800d65b 	.word	0x0800d65b
 800d3c0:	0800d65b 	.word	0x0800d65b
 800d3c4:	0800d65b 	.word	0x0800d65b
 800d3c8:	0800d65b 	.word	0x0800d65b
 800d3cc:	0800d65b 	.word	0x0800d65b
 800d3d0:	0800d65b 	.word	0x0800d65b
 800d3d4:	0800d65b 	.word	0x0800d65b
 800d3d8:	0800d443 	.word	0x0800d443
 800d3dc:	0800d65b 	.word	0x0800d65b
 800d3e0:	0800d65b 	.word	0x0800d65b
 800d3e4:	0800d65b 	.word	0x0800d65b
 800d3e8:	0800d65b 	.word	0x0800d65b
 800d3ec:	0800d65b 	.word	0x0800d65b
 800d3f0:	0800d65b 	.word	0x0800d65b
 800d3f4:	0800d65b 	.word	0x0800d65b
 800d3f8:	0800d449 	.word	0x0800d449
 800d3fc:	0800d65b 	.word	0x0800d65b
 800d400:	0800d65b 	.word	0x0800d65b
 800d404:	0800d65b 	.word	0x0800d65b
 800d408:	0800d65b 	.word	0x0800d65b
 800d40c:	0800d65b 	.word	0x0800d65b
 800d410:	0800d65b 	.word	0x0800d65b
 800d414:	0800d65b 	.word	0x0800d65b
 800d418:	0800d44f 	.word	0x0800d44f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d41c:	4b94      	ldr	r3, [pc, #592]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0320 	and.w	r3, r3, #32
 800d424:	2b00      	cmp	r3, #0
 800d426:	d009      	beq.n	800d43c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d428:	4b91      	ldr	r3, [pc, #580]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	08db      	lsrs	r3, r3, #3
 800d42e:	f003 0303 	and.w	r3, r3, #3
 800d432:	4a90      	ldr	r2, [pc, #576]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d434:	fa22 f303 	lsr.w	r3, r2, r3
 800d438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800d43a:	e111      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d43c:	4b8d      	ldr	r3, [pc, #564]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d43e:	61bb      	str	r3, [r7, #24]
    break;
 800d440:	e10e      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800d442:	4b8d      	ldr	r3, [pc, #564]	@ (800d678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d444:	61bb      	str	r3, [r7, #24]
    break;
 800d446:	e10b      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800d448:	4b8c      	ldr	r3, [pc, #560]	@ (800d67c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d44a:	61bb      	str	r3, [r7, #24]
    break;
 800d44c:	e108      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d44e:	4b88      	ldr	r3, [pc, #544]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d452:	f003 0303 	and.w	r3, r3, #3
 800d456:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800d458:	4b85      	ldr	r3, [pc, #532]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d45c:	091b      	lsrs	r3, r3, #4
 800d45e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d462:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d464:	4b82      	ldr	r3, [pc, #520]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d468:	f003 0301 	and.w	r3, r3, #1
 800d46c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d46e:	4b80      	ldr	r3, [pc, #512]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d472:	08db      	lsrs	r3, r3, #3
 800d474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	fb02 f303 	mul.w	r3, r2, r3
 800d47e:	ee07 3a90 	vmov	s15, r3
 800d482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d486:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	f000 80e1 	beq.w	800d654 <HAL_RCC_GetSysClockFreq+0x2b8>
    {
      switch (pllsource)
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b02      	cmp	r3, #2
 800d496:	f000 8083 	beq.w	800d5a0 <HAL_RCC_GetSysClockFreq+0x204>
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	f200 80a1 	bhi.w	800d5e4 <HAL_RCC_GetSysClockFreq+0x248>
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <HAL_RCC_GetSysClockFreq+0x114>
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d056      	beq.n	800d55c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d4ae:	e099      	b.n	800d5e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4b0:	4b6f      	ldr	r3, [pc, #444]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 0320 	and.w	r3, r3, #32
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d02d      	beq.n	800d518 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d4bc:	4b6c      	ldr	r3, [pc, #432]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	08db      	lsrs	r3, r3, #3
 800d4c2:	f003 0303 	and.w	r3, r3, #3
 800d4c6:	4a6b      	ldr	r2, [pc, #428]	@ (800d674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	ee07 3a90 	vmov	s15, r3
 800d4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	ee07 3a90 	vmov	s15, r3
 800d4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e6:	4b62      	ldr	r3, [pc, #392]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d4fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d512:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800d516:	e087      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	ee07 3a90 	vmov	s15, r3
 800d51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d522:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d684 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d52a:	4b51      	ldr	r3, [pc, #324]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d532:	ee07 3a90 	vmov	s15, r3
 800d536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d53e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d54a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d55a:	e065      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d566:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d56e:	4b40      	ldr	r3, [pc, #256]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d576:	ee07 3a90 	vmov	s15, r3
 800d57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d57e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d582:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d58e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d59a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d59e:	e043      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	ee07 3a90 	vmov	s15, r3
 800d5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d68c <HAL_RCC_GetSysClockFreq+0x2f0>
 800d5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5b2:	4b2f      	ldr	r3, [pc, #188]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ba:	ee07 3a90 	vmov	s15, r3
 800d5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d5c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5e2:	e021      	b.n	800d628 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	ee07 3a90 	vmov	s15, r3
 800d5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5f6:	4b1e      	ldr	r3, [pc, #120]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d606:	ed97 6a02 	vldr	s12, [r7, #8]
 800d60a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d626:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800d628:	4b11      	ldr	r3, [pc, #68]	@ (800d670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d62a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d62c:	0a5b      	lsrs	r3, r3, #9
 800d62e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d632:	3301      	adds	r3, #1
 800d634:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	ee07 3a90 	vmov	s15, r3
 800d63c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d640:	edd7 6a07 	vldr	s13, [r7, #28]
 800d644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d64c:	ee17 3a90 	vmov	r3, s15
 800d650:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800d652:	e005      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800d654:	2300      	movs	r3, #0
 800d656:	61bb      	str	r3, [r7, #24]
    break;
 800d658:	e002      	b.n	800d660 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800d65a:	4b07      	ldr	r3, [pc, #28]	@ (800d678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d65c:	61bb      	str	r3, [r7, #24]
    break;
 800d65e:	bf00      	nop
  }

  return sysclockfreq;
 800d660:	69bb      	ldr	r3, [r7, #24]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3724      	adds	r7, #36	@ 0x24
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	58024400 	.word	0x58024400
 800d674:	03d09000 	.word	0x03d09000
 800d678:	003d0900 	.word	0x003d0900
 800d67c:	017d7840 	.word	0x017d7840
 800d680:	46000000 	.word	0x46000000
 800d684:	4c742400 	.word	0x4c742400
 800d688:	4a742400 	.word	0x4a742400
 800d68c:	4bbebc20 	.word	0x4bbebc20

0800d690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d696:	f7ff fe81 	bl	800d39c <HAL_RCC_GetSysClockFreq>
 800d69a:	4602      	mov	r2, r0
 800d69c:	4b10      	ldr	r3, [pc, #64]	@ (800d6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	0a1b      	lsrs	r3, r3, #8
 800d6a2:	f003 030f 	and.w	r3, r3, #15
 800d6a6:	490f      	ldr	r1, [pc, #60]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6a8:	5ccb      	ldrb	r3, [r1, r3]
 800d6aa:	f003 031f 	and.w	r3, r3, #31
 800d6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d6b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	f003 030f 	and.w	r3, r3, #15
 800d6bc:	4a09      	ldr	r2, [pc, #36]	@ (800d6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6be:	5cd3      	ldrb	r3, [r2, r3]
 800d6c0:	f003 031f 	and.w	r3, r3, #31
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ca:	4a07      	ldr	r2, [pc, #28]	@ (800d6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d6ce:	4a07      	ldr	r2, [pc, #28]	@ (800d6ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d6d4:	4b04      	ldr	r3, [pc, #16]	@ (800d6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	58024400 	.word	0x58024400
 800d6e4:	08015a7c 	.word	0x08015a7c
 800d6e8:	24000528 	.word	0x24000528
 800d6ec:	24000524 	.word	0x24000524

0800d6f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d6f4:	f7ff ffcc 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	4b06      	ldr	r3, [pc, #24]	@ (800d714 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	0a1b      	lsrs	r3, r3, #8
 800d700:	f003 0307 	and.w	r3, r3, #7
 800d704:	4904      	ldr	r1, [pc, #16]	@ (800d718 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d706:	5ccb      	ldrb	r3, [r1, r3]
 800d708:	f003 031f 	and.w	r3, r3, #31
 800d70c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d710:	4618      	mov	r0, r3
 800d712:	bd80      	pop	{r7, pc}
 800d714:	58024400 	.word	0x58024400
 800d718:	08015a7c 	.word	0x08015a7c

0800d71c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d724:	2300      	movs	r3, #0
 800d726:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d728:	2300      	movs	r3, #0
 800d72a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d734:	2b00      	cmp	r3, #0
 800d736:	d03f      	beq.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d73c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d740:	d02a      	beq.n	800d798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800d742:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d746:	d824      	bhi.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d748:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d74c:	d018      	beq.n	800d780 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d74e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d752:	d81e      	bhi.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d754:	2b00      	cmp	r3, #0
 800d756:	d003      	beq.n	800d760 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d758:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d75c:	d007      	beq.n	800d76e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d75e:	e018      	b.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d760:	4ba4      	ldr	r3, [pc, #656]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d764:	4aa3      	ldr	r2, [pc, #652]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d76a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d76c:	e015      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	3304      	adds	r3, #4
 800d772:	2102      	movs	r1, #2
 800d774:	4618      	mov	r0, r3
 800d776:	f002 f84f 	bl	800f818 <RCCEx_PLL2_Config>
 800d77a:	4603      	mov	r3, r0
 800d77c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d77e:	e00c      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	3324      	adds	r3, #36	@ 0x24
 800d784:	2102      	movs	r1, #2
 800d786:	4618      	mov	r0, r3
 800d788:	f002 f8f8 	bl	800f97c <RCCEx_PLL3_Config>
 800d78c:	4603      	mov	r3, r0
 800d78e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d790:	e003      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	75fb      	strb	r3, [r7, #23]
      break;
 800d796:	e000      	b.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800d798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d79a:	7dfb      	ldrb	r3, [r7, #23]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d109      	bne.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d7a0:	4b94      	ldr	r3, [pc, #592]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d7ac:	4991      	ldr	r1, [pc, #580]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	650b      	str	r3, [r1, #80]	@ 0x50
 800d7b2:	e001      	b.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7b4:	7dfb      	ldrb	r3, [r7, #23]
 800d7b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d03d      	beq.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7c8:	2b04      	cmp	r3, #4
 800d7ca:	d826      	bhi.n	800d81a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d7cc:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800d7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d2:	bf00      	nop
 800d7d4:	0800d7e9 	.word	0x0800d7e9
 800d7d8:	0800d7f7 	.word	0x0800d7f7
 800d7dc:	0800d809 	.word	0x0800d809
 800d7e0:	0800d821 	.word	0x0800d821
 800d7e4:	0800d821 	.word	0x0800d821
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7e8:	4b82      	ldr	r3, [pc, #520]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ec:	4a81      	ldr	r2, [pc, #516]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d7ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d7f4:	e015      	b.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f002 f80b 	bl	800f818 <RCCEx_PLL2_Config>
 800d802:	4603      	mov	r3, r0
 800d804:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d806:	e00c      	b.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	3324      	adds	r3, #36	@ 0x24
 800d80c:	2100      	movs	r1, #0
 800d80e:	4618      	mov	r0, r3
 800d810:	f002 f8b4 	bl	800f97c <RCCEx_PLL3_Config>
 800d814:	4603      	mov	r3, r0
 800d816:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d818:	e003      	b.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	75fb      	strb	r3, [r7, #23]
      break;
 800d81e:	e000      	b.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800d820:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d822:	7dfb      	ldrb	r3, [r7, #23]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d109      	bne.n	800d83c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d828:	4b72      	ldr	r3, [pc, #456]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d82a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d82c:	f023 0207 	bic.w	r2, r3, #7
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d834:	496f      	ldr	r1, [pc, #444]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d836:	4313      	orrs	r3, r2
 800d838:	650b      	str	r3, [r1, #80]	@ 0x50
 800d83a:	e001      	b.n	800d840 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
 800d83e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d051      	beq.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d852:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d856:	d036      	beq.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d858:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d85c:	d830      	bhi.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d85e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d862:	d032      	beq.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800d864:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d868:	d82a      	bhi.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d86a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d86e:	d02e      	beq.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800d870:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d874:	d824      	bhi.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d876:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d87a:	d018      	beq.n	800d8ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 800d87c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d880:	d81e      	bhi.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800d886:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d88a:	d007      	beq.n	800d89c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800d88c:	e018      	b.n	800d8c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d88e:	4b59      	ldr	r3, [pc, #356]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d892:	4a58      	ldr	r2, [pc, #352]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d898:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d89a:	e019      	b.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	3304      	adds	r3, #4
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f001 ffb8 	bl	800f818 <RCCEx_PLL2_Config>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800d8ac:	e010      	b.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	3324      	adds	r3, #36	@ 0x24
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f002 f861 	bl	800f97c <RCCEx_PLL3_Config>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d8be:	e007      	b.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	75fb      	strb	r3, [r7, #23]
      break;
 800d8c4:	e004      	b.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d8c6:	bf00      	nop
 800d8c8:	e002      	b.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d8ca:	bf00      	nop
 800d8cc:	e000      	b.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d8ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d8d0:	7dfb      	ldrb	r3, [r7, #23]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10a      	bne.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d8d6:	4b47      	ldr	r3, [pc, #284]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d8d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8da:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d8e4:	4943      	ldr	r1, [pc, #268]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	658b      	str	r3, [r1, #88]	@ 0x58
 800d8ea:	e001      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d051      	beq.n	800d9a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d902:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d906:	d036      	beq.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800d908:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d90c:	d830      	bhi.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d90e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d912:	d032      	beq.n	800d97a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800d914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d918:	d82a      	bhi.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d91a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d91e:	d02e      	beq.n	800d97e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800d920:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d924:	d824      	bhi.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d92a:	d018      	beq.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800d92c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d930:	d81e      	bhi.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800d932:	2b00      	cmp	r3, #0
 800d934:	d003      	beq.n	800d93e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800d936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d93a:	d007      	beq.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800d93c:	e018      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d93e:	4b2d      	ldr	r3, [pc, #180]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	4a2c      	ldr	r2, [pc, #176]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d948:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d94a:	e019      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	3304      	adds	r3, #4
 800d950:	2100      	movs	r1, #0
 800d952:	4618      	mov	r0, r3
 800d954:	f001 ff60 	bl	800f818 <RCCEx_PLL2_Config>
 800d958:	4603      	mov	r3, r0
 800d95a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800d95c:	e010      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	3324      	adds	r3, #36	@ 0x24
 800d962:	2100      	movs	r1, #0
 800d964:	4618      	mov	r0, r3
 800d966:	f002 f809 	bl	800f97c <RCCEx_PLL3_Config>
 800d96a:	4603      	mov	r3, r0
 800d96c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d96e:	e007      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800d970:	2301      	movs	r3, #1
 800d972:	75fb      	strb	r3, [r7, #23]
      break;
 800d974:	e004      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d976:	bf00      	nop
 800d978:	e002      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d97a:	bf00      	nop
 800d97c:	e000      	b.n	800d980 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800d97e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d980:	7dfb      	ldrb	r3, [r7, #23]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d10a      	bne.n	800d99c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d986:	4b1b      	ldr	r3, [pc, #108]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d98a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d994:	4917      	ldr	r1, [pc, #92]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d996:	4313      	orrs	r3, r2
 800d998:	658b      	str	r3, [r1, #88]	@ 0x58
 800d99a:	e001      	b.n	800d9a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d99c:	7dfb      	ldrb	r3, [r7, #23]
 800d99e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d035      	beq.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9b0:	2b30      	cmp	r3, #48	@ 0x30
 800d9b2:	d01c      	beq.n	800d9ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d9b4:	2b30      	cmp	r3, #48	@ 0x30
 800d9b6:	d817      	bhi.n	800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800d9b8:	2b20      	cmp	r3, #32
 800d9ba:	d00c      	beq.n	800d9d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800d9bc:	2b20      	cmp	r3, #32
 800d9be:	d813      	bhi.n	800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d019      	beq.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800d9c4:	2b10      	cmp	r3, #16
 800d9c6:	d10f      	bne.n	800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9cc:	4a09      	ldr	r2, [pc, #36]	@ (800d9f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d9ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d9d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800d9d4:	e011      	b.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	3304      	adds	r3, #4
 800d9da:	2102      	movs	r1, #2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f001 ff1b 	bl	800f818 <RCCEx_PLL2_Config>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800d9e6:	e008      	b.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	75fb      	strb	r3, [r7, #23]
      break;
 800d9ec:	e005      	b.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800d9ee:	bf00      	nop
 800d9f0:	e003      	b.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800d9f2:	bf00      	nop
 800d9f4:	58024400 	.word	0x58024400
      break;
 800d9f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d9fa:	7dfb      	ldrb	r3, [r7, #23]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d109      	bne.n	800da14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800da00:	4ba3      	ldr	r3, [pc, #652]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da0c:	49a0      	ldr	r1, [pc, #640]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da0e:	4313      	orrs	r3, r2
 800da10:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800da12:	e001      	b.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da14:	7dfb      	ldrb	r3, [r7, #23]
 800da16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da20:	2b00      	cmp	r3, #0
 800da22:	d047      	beq.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da2c:	d030      	beq.n	800da90 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800da2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da32:	d82a      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800da34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da38:	d02c      	beq.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800da3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da3e:	d824      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800da40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da44:	d018      	beq.n	800da78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800da46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da4a:	d81e      	bhi.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d003      	beq.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800da50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da54:	d007      	beq.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800da56:	e018      	b.n	800da8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da58:	4b8d      	ldr	r3, [pc, #564]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da5c:	4a8c      	ldr	r2, [pc, #560]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da62:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800da64:	e017      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	3304      	adds	r3, #4
 800da6a:	2100      	movs	r1, #0
 800da6c:	4618      	mov	r0, r3
 800da6e:	f001 fed3 	bl	800f818 <RCCEx_PLL2_Config>
 800da72:	4603      	mov	r3, r0
 800da74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800da76:	e00e      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	3324      	adds	r3, #36	@ 0x24
 800da7c:	2100      	movs	r1, #0
 800da7e:	4618      	mov	r0, r3
 800da80:	f001 ff7c 	bl	800f97c <RCCEx_PLL3_Config>
 800da84:	4603      	mov	r3, r0
 800da86:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800da88:	e005      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	75fb      	strb	r3, [r7, #23]
      break;
 800da8e:	e002      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800da90:	bf00      	nop
 800da92:	e000      	b.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800da94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d109      	bne.n	800dab0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800da9c:	4b7c      	ldr	r3, [pc, #496]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800da9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daa0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daa8:	4979      	ldr	r1, [pc, #484]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800daaa:	4313      	orrs	r3, r2
 800daac:	650b      	str	r3, [r1, #80]	@ 0x50
 800daae:	e001      	b.n	800dab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dab0:	7dfb      	ldrb	r3, [r7, #23]
 800dab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d049      	beq.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dac8:	d02e      	beq.n	800db28 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800daca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dace:	d828      	bhi.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dad0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dad4:	d02a      	beq.n	800db2c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800dad6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dada:	d822      	bhi.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dadc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dae0:	d026      	beq.n	800db30 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800dae2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dae6:	d81c      	bhi.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800daec:	d010      	beq.n	800db10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800daee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800daf2:	d816      	bhi.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d01d      	beq.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800daf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dafc:	d111      	bne.n	800db22 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	3304      	adds	r3, #4
 800db02:	2101      	movs	r1, #1
 800db04:	4618      	mov	r0, r3
 800db06:	f001 fe87 	bl	800f818 <RCCEx_PLL2_Config>
 800db0a:	4603      	mov	r3, r0
 800db0c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800db0e:	e012      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	3324      	adds	r3, #36	@ 0x24
 800db14:	2101      	movs	r1, #1
 800db16:	4618      	mov	r0, r3
 800db18:	f001 ff30 	bl	800f97c <RCCEx_PLL3_Config>
 800db1c:	4603      	mov	r3, r0
 800db1e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800db20:	e009      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800db22:	2301      	movs	r3, #1
 800db24:	75fb      	strb	r3, [r7, #23]
      break;
 800db26:	e006      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800db28:	bf00      	nop
 800db2a:	e004      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800db2c:	bf00      	nop
 800db2e:	e002      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800db30:	bf00      	nop
 800db32:	e000      	b.n	800db36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800db34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800db36:	7dfb      	ldrb	r3, [r7, #23]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d109      	bne.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800db3c:	4b54      	ldr	r3, [pc, #336]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800db3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db40:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db48:	4951      	ldr	r1, [pc, #324]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800db4a:	4313      	orrs	r3, r2
 800db4c:	650b      	str	r3, [r1, #80]	@ 0x50
 800db4e:	e001      	b.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d04b      	beq.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800db6a:	d02e      	beq.n	800dbca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800db6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800db70:	d828      	bhi.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db76:	d02a      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800db78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db7c:	d822      	bhi.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800db82:	d026      	beq.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800db84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800db88:	d81c      	bhi.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db8e:	d010      	beq.n	800dbb2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800db90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db94:	d816      	bhi.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800db96:	2b00      	cmp	r3, #0
 800db98:	d01d      	beq.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800db9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db9e:	d111      	bne.n	800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3304      	adds	r3, #4
 800dba4:	2101      	movs	r1, #1
 800dba6:	4618      	mov	r0, r3
 800dba8:	f001 fe36 	bl	800f818 <RCCEx_PLL2_Config>
 800dbac:	4603      	mov	r3, r0
 800dbae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800dbb0:	e012      	b.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	3324      	adds	r3, #36	@ 0x24
 800dbb6:	2101      	movs	r1, #1
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f001 fedf 	bl	800f97c <RCCEx_PLL3_Config>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800dbc2:	e009      	b.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	75fb      	strb	r3, [r7, #23]
      break;
 800dbc8:	e006      	b.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dbca:	bf00      	nop
 800dbcc:	e004      	b.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dbce:	bf00      	nop
 800dbd0:	e002      	b.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dbd2:	bf00      	nop
 800dbd4:	e000      	b.n	800dbd8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dbd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10a      	bne.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dbde:	4b2c      	ldr	r3, [pc, #176]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dbe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbe2:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dbec:	4928      	ldr	r1, [pc, #160]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	658b      	str	r3, [r1, #88]	@ 0x58
 800dbf2:	e001      	b.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbf4:	7dfb      	ldrb	r3, [r7, #23]
 800dbf6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d02f      	beq.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc0c:	d00e      	beq.n	800dc2c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800dc0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc12:	d814      	bhi.n	800dc3e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d015      	beq.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800dc18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc1c:	d10f      	bne.n	800dc3e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc1e:	4b1c      	ldr	r3, [pc, #112]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc22:	4a1b      	ldr	r2, [pc, #108]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc28:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800dc2a:	e00c      	b.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	3304      	adds	r3, #4
 800dc30:	2101      	movs	r1, #1
 800dc32:	4618      	mov	r0, r3
 800dc34:	f001 fdf0 	bl	800f818 <RCCEx_PLL2_Config>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800dc3c:	e003      	b.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	75fb      	strb	r3, [r7, #23]
      break;
 800dc42:	e000      	b.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800dc44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dc46:	7dfb      	ldrb	r3, [r7, #23]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d109      	bne.n	800dc60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dc4c:	4b10      	ldr	r3, [pc, #64]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc50:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc58:	490d      	ldr	r1, [pc, #52]	@ (800dc90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	650b      	str	r3, [r1, #80]	@ 0x50
 800dc5e:	e001      	b.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc60:	7dfb      	ldrb	r3, [r7, #23]
 800dc62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d034      	beq.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc74:	2b03      	cmp	r3, #3
 800dc76:	d81d      	bhi.n	800dcb4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800dc78:	a201      	add	r2, pc, #4	@ (adr r2, 800dc80 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800dc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7e:	bf00      	nop
 800dc80:	0800dcbb 	.word	0x0800dcbb
 800dc84:	0800dc95 	.word	0x0800dc95
 800dc88:	0800dca3 	.word	0x0800dca3
 800dc8c:	0800dcbb 	.word	0x0800dcbb
 800dc90:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc94:	4bb1      	ldr	r3, [pc, #708]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc98:	4ab0      	ldr	r2, [pc, #704]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dc9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800dca0:	e00c      	b.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	3304      	adds	r3, #4
 800dca6:	2102      	movs	r1, #2
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f001 fdb5 	bl	800f818 <RCCEx_PLL2_Config>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800dcb2:	e003      	b.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	75fb      	strb	r3, [r7, #23]
      break;
 800dcb8:	e000      	b.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800dcba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dcbc:	7dfb      	ldrb	r3, [r7, #23]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d109      	bne.n	800dcd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800dcc2:	4ba6      	ldr	r3, [pc, #664]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dcc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcc6:	f023 0203 	bic.w	r2, r3, #3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcce:	49a3      	ldr	r1, [pc, #652]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800dcd4:	e001      	b.n	800dcda <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	f000 8086 	beq.w	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dce8:	4b9d      	ldr	r3, [pc, #628]	@ (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a9c      	ldr	r2, [pc, #624]	@ (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dcee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dcf4:	f7f9 fad8 	bl	80072a8 <HAL_GetTick>
 800dcf8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dcfa:	e009      	b.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dcfc:	f7f9 fad4 	bl	80072a8 <HAL_GetTick>
 800dd00:	4602      	mov	r2, r0
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	1ad3      	subs	r3, r2, r3
 800dd06:	2b64      	cmp	r3, #100	@ 0x64
 800dd08:	d902      	bls.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800dd0a:	2303      	movs	r3, #3
 800dd0c:	75fb      	strb	r3, [r7, #23]
        break;
 800dd0e:	e005      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dd10:	4b93      	ldr	r3, [pc, #588]	@ (800df60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0ef      	beq.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800dd1c:	7dfb      	ldrb	r3, [r7, #23]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d166      	bne.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800dd22:	4b8e      	ldr	r3, [pc, #568]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd24:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dd2c:	4053      	eors	r3, r2
 800dd2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d013      	beq.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800dd36:	4b89      	ldr	r3, [pc, #548]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dd40:	4b86      	ldr	r3, [pc, #536]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd44:	4a85      	ldr	r2, [pc, #532]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd4a:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dd4c:	4b83      	ldr	r3, [pc, #524]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd50:	4a82      	ldr	r2, [pc, #520]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dd56:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800dd58:	4a80      	ldr	r2, [pc, #512]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dd64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd68:	d115      	bne.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd6a:	f7f9 fa9d 	bl	80072a8 <HAL_GetTick>
 800dd6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dd70:	e00b      	b.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd72:	f7f9 fa99 	bl	80072a8 <HAL_GetTick>
 800dd76:	4602      	mov	r2, r0
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	1ad3      	subs	r3, r2, r3
 800dd7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d902      	bls.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800dd84:	2303      	movs	r3, #3
 800dd86:	75fb      	strb	r3, [r7, #23]
            break;
 800dd88:	e005      	b.n	800dd96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dd8a:	4b74      	ldr	r3, [pc, #464]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dd8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd8e:	f003 0302 	and.w	r3, r3, #2
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d0ed      	beq.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800dd96:	7dfb      	ldrb	r3, [r7, #23]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d126      	bne.n	800ddea <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dda2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dda6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ddaa:	d10d      	bne.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800ddac:	4b6b      	ldr	r3, [pc, #428]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ddba:	0919      	lsrs	r1, r3, #4
 800ddbc:	4b69      	ldr	r3, [pc, #420]	@ (800df64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800ddbe:	400b      	ands	r3, r1
 800ddc0:	4966      	ldr	r1, [pc, #408]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddc2:	4313      	orrs	r3, r2
 800ddc4:	610b      	str	r3, [r1, #16]
 800ddc6:	e005      	b.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800ddc8:	4b64      	ldr	r3, [pc, #400]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddca:	691b      	ldr	r3, [r3, #16]
 800ddcc:	4a63      	ldr	r2, [pc, #396]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ddd2:	6113      	str	r3, [r2, #16]
 800ddd4:	4b61      	ldr	r3, [pc, #388]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ddde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dde2:	495e      	ldr	r1, [pc, #376]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dde4:	4313      	orrs	r3, r2
 800dde6:	670b      	str	r3, [r1, #112]	@ 0x70
 800dde8:	e004      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ddea:	7dfb      	ldrb	r3, [r7, #23]
 800ddec:	75bb      	strb	r3, [r7, #22]
 800ddee:	e001      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddf0:	7dfb      	ldrb	r3, [r7, #23]
 800ddf2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f003 0301 	and.w	r3, r3, #1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d07e      	beq.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de04:	2b28      	cmp	r3, #40	@ 0x28
 800de06:	d867      	bhi.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800de08:	a201      	add	r2, pc, #4	@ (adr r2, 800de10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800de0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0e:	bf00      	nop
 800de10:	0800dedf 	.word	0x0800dedf
 800de14:	0800ded9 	.word	0x0800ded9
 800de18:	0800ded9 	.word	0x0800ded9
 800de1c:	0800ded9 	.word	0x0800ded9
 800de20:	0800ded9 	.word	0x0800ded9
 800de24:	0800ded9 	.word	0x0800ded9
 800de28:	0800ded9 	.word	0x0800ded9
 800de2c:	0800ded9 	.word	0x0800ded9
 800de30:	0800deb5 	.word	0x0800deb5
 800de34:	0800ded9 	.word	0x0800ded9
 800de38:	0800ded9 	.word	0x0800ded9
 800de3c:	0800ded9 	.word	0x0800ded9
 800de40:	0800ded9 	.word	0x0800ded9
 800de44:	0800ded9 	.word	0x0800ded9
 800de48:	0800ded9 	.word	0x0800ded9
 800de4c:	0800ded9 	.word	0x0800ded9
 800de50:	0800dec7 	.word	0x0800dec7
 800de54:	0800ded9 	.word	0x0800ded9
 800de58:	0800ded9 	.word	0x0800ded9
 800de5c:	0800ded9 	.word	0x0800ded9
 800de60:	0800ded9 	.word	0x0800ded9
 800de64:	0800ded9 	.word	0x0800ded9
 800de68:	0800ded9 	.word	0x0800ded9
 800de6c:	0800ded9 	.word	0x0800ded9
 800de70:	0800dedf 	.word	0x0800dedf
 800de74:	0800ded9 	.word	0x0800ded9
 800de78:	0800ded9 	.word	0x0800ded9
 800de7c:	0800ded9 	.word	0x0800ded9
 800de80:	0800ded9 	.word	0x0800ded9
 800de84:	0800ded9 	.word	0x0800ded9
 800de88:	0800ded9 	.word	0x0800ded9
 800de8c:	0800ded9 	.word	0x0800ded9
 800de90:	0800dedf 	.word	0x0800dedf
 800de94:	0800ded9 	.word	0x0800ded9
 800de98:	0800ded9 	.word	0x0800ded9
 800de9c:	0800ded9 	.word	0x0800ded9
 800dea0:	0800ded9 	.word	0x0800ded9
 800dea4:	0800ded9 	.word	0x0800ded9
 800dea8:	0800ded9 	.word	0x0800ded9
 800deac:	0800ded9 	.word	0x0800ded9
 800deb0:	0800dedf 	.word	0x0800dedf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	3304      	adds	r3, #4
 800deb8:	2101      	movs	r1, #1
 800deba:	4618      	mov	r0, r3
 800debc:	f001 fcac 	bl	800f818 <RCCEx_PLL2_Config>
 800dec0:	4603      	mov	r3, r0
 800dec2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800dec4:	e00c      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3324      	adds	r3, #36	@ 0x24
 800deca:	2101      	movs	r1, #1
 800decc:	4618      	mov	r0, r3
 800dece:	f001 fd55 	bl	800f97c <RCCEx_PLL3_Config>
 800ded2:	4603      	mov	r3, r0
 800ded4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ded6:	e003      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	75fb      	strb	r3, [r7, #23]
      break;
 800dedc:	e000      	b.n	800dee0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800dede:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d109      	bne.n	800defa <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800dee6:	4b1d      	ldr	r3, [pc, #116]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deea:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800def2:	491a      	ldr	r1, [pc, #104]	@ (800df5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800def4:	4313      	orrs	r3, r2
 800def6:	654b      	str	r3, [r1, #84]	@ 0x54
 800def8:	e001      	b.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800defa:	7dfb      	ldrb	r3, [r7, #23]
 800defc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f003 0302 	and.w	r3, r3, #2
 800df06:	2b00      	cmp	r3, #0
 800df08:	d03e      	beq.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df0e:	2b05      	cmp	r3, #5
 800df10:	d820      	bhi.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800df12:	a201      	add	r2, pc, #4	@ (adr r2, 800df18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800df14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df18:	0800df69 	.word	0x0800df69
 800df1c:	0800df31 	.word	0x0800df31
 800df20:	0800df43 	.word	0x0800df43
 800df24:	0800df69 	.word	0x0800df69
 800df28:	0800df69 	.word	0x0800df69
 800df2c:	0800df69 	.word	0x0800df69
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	3304      	adds	r3, #4
 800df34:	2101      	movs	r1, #1
 800df36:	4618      	mov	r0, r3
 800df38:	f001 fc6e 	bl	800f818 <RCCEx_PLL2_Config>
 800df3c:	4603      	mov	r3, r0
 800df3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800df40:	e013      	b.n	800df6a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	3324      	adds	r3, #36	@ 0x24
 800df46:	2101      	movs	r1, #1
 800df48:	4618      	mov	r0, r3
 800df4a:	f001 fd17 	bl	800f97c <RCCEx_PLL3_Config>
 800df4e:	4603      	mov	r3, r0
 800df50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800df52:	e00a      	b.n	800df6a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800df54:	2301      	movs	r3, #1
 800df56:	75fb      	strb	r3, [r7, #23]
      break;
 800df58:	e007      	b.n	800df6a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800df5a:	bf00      	nop
 800df5c:	58024400 	.word	0x58024400
 800df60:	58024800 	.word	0x58024800
 800df64:	00ffffcf 	.word	0x00ffffcf
      break;
 800df68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800df6a:	7dfb      	ldrb	r3, [r7, #23]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d109      	bne.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800df70:	4b9f      	ldr	r3, [pc, #636]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800df72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df74:	f023 0207 	bic.w	r2, r3, #7
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df7c:	499c      	ldr	r1, [pc, #624]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800df7e:	4313      	orrs	r3, r2
 800df80:	654b      	str	r3, [r1, #84]	@ 0x54
 800df82:	e001      	b.n	800df88 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df84:	7dfb      	ldrb	r3, [r7, #23]
 800df86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	f003 0304 	and.w	r3, r3, #4
 800df90:	2b00      	cmp	r3, #0
 800df92:	d039      	beq.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df9a:	2b05      	cmp	r3, #5
 800df9c:	d820      	bhi.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800df9e:	a201      	add	r2, pc, #4	@ (adr r2, 800dfa4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800dfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa4:	0800dfe7 	.word	0x0800dfe7
 800dfa8:	0800dfbd 	.word	0x0800dfbd
 800dfac:	0800dfcf 	.word	0x0800dfcf
 800dfb0:	0800dfe7 	.word	0x0800dfe7
 800dfb4:	0800dfe7 	.word	0x0800dfe7
 800dfb8:	0800dfe7 	.word	0x0800dfe7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	2101      	movs	r1, #1
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f001 fc28 	bl	800f818 <RCCEx_PLL2_Config>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800dfcc:	e00c      	b.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	3324      	adds	r3, #36	@ 0x24
 800dfd2:	2101      	movs	r1, #1
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f001 fcd1 	bl	800f97c <RCCEx_PLL3_Config>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800dfde:	e003      	b.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	75fb      	strb	r3, [r7, #23]
      break;
 800dfe4:	e000      	b.n	800dfe8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800dfe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dfe8:	7dfb      	ldrb	r3, [r7, #23]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dfee:	4b80      	ldr	r3, [pc, #512]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dff2:	f023 0207 	bic.w	r2, r3, #7
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dffc:	497c      	ldr	r1, [pc, #496]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800dffe:	4313      	orrs	r3, r2
 800e000:	658b      	str	r3, [r1, #88]	@ 0x58
 800e002:	e001      	b.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e004:	7dfb      	ldrb	r3, [r7, #23]
 800e006:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 0320 	and.w	r3, r3, #32
 800e010:	2b00      	cmp	r3, #0
 800e012:	d04b      	beq.n	800e0ac <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e01a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e01e:	d02e      	beq.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x962>
 800e020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e024:	d828      	bhi.n	800e078 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e02a:	d02a      	beq.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800e02c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e030:	d822      	bhi.n	800e078 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e036:	d026      	beq.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800e038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e03c:	d81c      	bhi.n	800e078 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e03e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e042:	d010      	beq.n	800e066 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800e044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e048:	d816      	bhi.n	800e078 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d01d      	beq.n	800e08a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800e04e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e052:	d111      	bne.n	800e078 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	3304      	adds	r3, #4
 800e058:	2100      	movs	r1, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f001 fbdc 	bl	800f818 <RCCEx_PLL2_Config>
 800e060:	4603      	mov	r3, r0
 800e062:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e064:	e012      	b.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	3324      	adds	r3, #36	@ 0x24
 800e06a:	2102      	movs	r1, #2
 800e06c:	4618      	mov	r0, r3
 800e06e:	f001 fc85 	bl	800f97c <RCCEx_PLL3_Config>
 800e072:	4603      	mov	r3, r0
 800e074:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e076:	e009      	b.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	75fb      	strb	r3, [r7, #23]
      break;
 800e07c:	e006      	b.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e07e:	bf00      	nop
 800e080:	e004      	b.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e082:	bf00      	nop
 800e084:	e002      	b.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e086:	bf00      	nop
 800e088:	e000      	b.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e08a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e08c:	7dfb      	ldrb	r3, [r7, #23]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d10a      	bne.n	800e0a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e092:	4b57      	ldr	r3, [pc, #348]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e096:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0a0:	4953      	ldr	r1, [pc, #332]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	654b      	str	r3, [r1, #84]	@ 0x54
 800e0a6:	e001      	b.n	800e0ac <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0a8:	7dfb      	ldrb	r3, [r7, #23]
 800e0aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d04b      	beq.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e0be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e0c2:	d02e      	beq.n	800e122 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800e0c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e0c8:	d828      	bhi.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e0ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0ce:	d02a      	beq.n	800e126 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800e0d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e0d4:	d822      	bhi.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e0d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e0da:	d026      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800e0dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e0e0:	d81c      	bhi.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e0e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0e6:	d010      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800e0e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0ec:	d816      	bhi.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d01d      	beq.n	800e12e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800e0f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0f6:	d111      	bne.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	2100      	movs	r1, #0
 800e0fe:	4618      	mov	r0, r3
 800e100:	f001 fb8a 	bl	800f818 <RCCEx_PLL2_Config>
 800e104:	4603      	mov	r3, r0
 800e106:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e108:	e012      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	3324      	adds	r3, #36	@ 0x24
 800e10e:	2102      	movs	r1, #2
 800e110:	4618      	mov	r0, r3
 800e112:	f001 fc33 	bl	800f97c <RCCEx_PLL3_Config>
 800e116:	4603      	mov	r3, r0
 800e118:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e11a:	e009      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	75fb      	strb	r3, [r7, #23]
      break;
 800e120:	e006      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e122:	bf00      	nop
 800e124:	e004      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e126:	bf00      	nop
 800e128:	e002      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e12a:	bf00      	nop
 800e12c:	e000      	b.n	800e130 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e12e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e130:	7dfb      	ldrb	r3, [r7, #23]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10a      	bne.n	800e14c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e136:	4b2e      	ldr	r3, [pc, #184]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e13a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e144:	492a      	ldr	r1, [pc, #168]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e146:	4313      	orrs	r3, r2
 800e148:	658b      	str	r3, [r1, #88]	@ 0x58
 800e14a:	e001      	b.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e14c:	7dfb      	ldrb	r3, [r7, #23]
 800e14e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d04d      	beq.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e162:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e166:	d02e      	beq.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800e168:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e16c:	d828      	bhi.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e16e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e172:	d02a      	beq.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800e174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e178:	d822      	bhi.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e17a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e17e:	d026      	beq.n	800e1ce <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800e180:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e184:	d81c      	bhi.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e18a:	d010      	beq.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800e18c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e190:	d816      	bhi.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e192:	2b00      	cmp	r3, #0
 800e194:	d01d      	beq.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800e196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e19a:	d111      	bne.n	800e1c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	3304      	adds	r3, #4
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f001 fb38 	bl	800f818 <RCCEx_PLL2_Config>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e1ac:	e012      	b.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	3324      	adds	r3, #36	@ 0x24
 800e1b2:	2102      	movs	r1, #2
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f001 fbe1 	bl	800f97c <RCCEx_PLL3_Config>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e1be:	e009      	b.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	75fb      	strb	r3, [r7, #23]
      break;
 800e1c4:	e006      	b.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e1c6:	bf00      	nop
 800e1c8:	e004      	b.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e1ca:	bf00      	nop
 800e1cc:	e002      	b.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e1ce:	bf00      	nop
 800e1d0:	e000      	b.n	800e1d4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e1d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e1d4:	7dfb      	ldrb	r3, [r7, #23]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d10c      	bne.n	800e1f4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e1da:	4b05      	ldr	r3, [pc, #20]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e1dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e1de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e1e8:	4901      	ldr	r1, [pc, #4]	@ (800e1f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	658b      	str	r3, [r1, #88]	@ 0x58
 800e1ee:	e003      	b.n	800e1f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800e1f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1f4:	7dfb      	ldrb	r3, [r7, #23]
 800e1f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	f003 0308 	and.w	r3, r3, #8
 800e200:	2b00      	cmp	r3, #0
 800e202:	d018      	beq.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e20c:	d10a      	bne.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3324      	adds	r3, #36	@ 0x24
 800e212:	2102      	movs	r1, #2
 800e214:	4618      	mov	r0, r3
 800e216:	f001 fbb1 	bl	800f97c <RCCEx_PLL3_Config>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e224:	4b8a      	ldr	r3, [pc, #552]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e228:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e230:	4987      	ldr	r1, [pc, #540]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e232:	4313      	orrs	r3, r2
 800e234:	654b      	str	r3, [r1, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f003 0310 	and.w	r3, r3, #16
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d01a      	beq.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e24c:	d10a      	bne.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	3324      	adds	r3, #36	@ 0x24
 800e252:	2102      	movs	r1, #2
 800e254:	4618      	mov	r0, r3
 800e256:	f001 fb91 	bl	800f97c <RCCEx_PLL3_Config>
 800e25a:	4603      	mov	r3, r0
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e264:	4b7a      	ldr	r3, [pc, #488]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e268:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e272:	4977      	ldr	r1, [pc, #476]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e274:	4313      	orrs	r3, r2
 800e276:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e280:	2b00      	cmp	r3, #0
 800e282:	d034      	beq.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e28a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e28e:	d01d      	beq.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800e290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e294:	d817      	bhi.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800e296:	2b00      	cmp	r3, #0
 800e298:	d003      	beq.n	800e2a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800e29a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e29e:	d009      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e2a0:	e011      	b.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	2100      	movs	r1, #0
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f001 fab5 	bl	800f818 <RCCEx_PLL2_Config>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800e2b2:	e00c      	b.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	3324      	adds	r3, #36	@ 0x24
 800e2b8:	2102      	movs	r1, #2
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f001 fb5e 	bl	800f97c <RCCEx_PLL3_Config>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800e2c4:	e003      	b.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	75fb      	strb	r3, [r7, #23]
      break;
 800e2ca:	e000      	b.n	800e2ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800e2cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e2ce:	7dfb      	ldrb	r3, [r7, #23]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d10a      	bne.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e2d4:	4b5e      	ldr	r3, [pc, #376]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e2d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e2e2:	495b      	ldr	r1, [pc, #364]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	658b      	str	r3, [r1, #88]	@ 0x58
 800e2e8:	e001      	b.n	800e2ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2ea:	7dfb      	ldrb	r3, [r7, #23]
 800e2ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d033      	beq.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e300:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e304:	d01c      	beq.n	800e340 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800e306:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e30a:	d816      	bhi.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e30c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e310:	d003      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800e312:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e316:	d007      	beq.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800e318:	e00f      	b.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e31a:	4b4d      	ldr	r3, [pc, #308]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e31e:	4a4c      	ldr	r2, [pc, #304]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e324:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800e326:	e00c      	b.n	800e342 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3324      	adds	r3, #36	@ 0x24
 800e32c:	2101      	movs	r1, #1
 800e32e:	4618      	mov	r0, r3
 800e330:	f001 fb24 	bl	800f97c <RCCEx_PLL3_Config>
 800e334:	4603      	mov	r3, r0
 800e336:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800e338:	e003      	b.n	800e342 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	75fb      	strb	r3, [r7, #23]
      break;
 800e33e:	e000      	b.n	800e342 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800e340:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e342:	7dfb      	ldrb	r3, [r7, #23]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10a      	bne.n	800e35e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e348:	4b41      	ldr	r3, [pc, #260]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e34a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e34c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e356:	493e      	ldr	r1, [pc, #248]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e358:	4313      	orrs	r3, r2
 800e35a:	654b      	str	r3, [r1, #84]	@ 0x54
 800e35c:	e001      	b.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
 800e360:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d029      	beq.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e372:	2b00      	cmp	r3, #0
 800e374:	d003      	beq.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800e376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e37a:	d007      	beq.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e37c:	e00f      	b.n	800e39e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e37e:	4b34      	ldr	r3, [pc, #208]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e382:	4a33      	ldr	r2, [pc, #204]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e388:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800e38a:	e00b      	b.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	3304      	adds	r3, #4
 800e390:	2102      	movs	r1, #2
 800e392:	4618      	mov	r0, r3
 800e394:	f001 fa40 	bl	800f818 <RCCEx_PLL2_Config>
 800e398:	4603      	mov	r3, r0
 800e39a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800e39c:	e002      	b.n	800e3a4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	75fb      	strb	r3, [r7, #23]
      break;
 800e3a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e3a4:	7dfb      	ldrb	r3, [r7, #23]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d109      	bne.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e3aa:	4b29      	ldr	r3, [pc, #164]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3b6:	4926      	ldr	r1, [pc, #152]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800e3bc:	e001      	b.n	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3be:	7dfb      	ldrb	r3, [r7, #23]
 800e3c0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00a      	beq.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	3324      	adds	r3, #36	@ 0x24
 800e3d2:	2102      	movs	r1, #2
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f001 fad1 	bl	800f97c <RCCEx_PLL3_Config>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d033      	beq.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e3f8:	d017      	beq.n	800e42a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800e3fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e3fe:	d811      	bhi.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e404:	d013      	beq.n	800e42e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800e406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e40a:	d80b      	bhi.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d010      	beq.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e414:	d106      	bne.n	800e424 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e416:	4b0e      	ldr	r3, [pc, #56]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e41a:	4a0d      	ldr	r2, [pc, #52]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e41c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e420:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800e422:	e007      	b.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e424:	2301      	movs	r3, #1
 800e426:	75fb      	strb	r3, [r7, #23]
      break;
 800e428:	e004      	b.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e42a:	bf00      	nop
 800e42c:	e002      	b.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e42e:	bf00      	nop
 800e430:	e000      	b.n	800e434 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e432:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e434:	7dfb      	ldrb	r3, [r7, #23]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10c      	bne.n	800e454 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e43a:	4b05      	ldr	r3, [pc, #20]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e43e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e446:	4902      	ldr	r1, [pc, #8]	@ (800e450 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e448:	4313      	orrs	r3, r2
 800e44a:	654b      	str	r3, [r1, #84]	@ 0x54
 800e44c:	e004      	b.n	800e458 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800e44e:	bf00      	nop
 800e450:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e454:	7dfb      	ldrb	r3, [r7, #23]
 800e456:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d008      	beq.n	800e476 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e464:	4b29      	ldr	r3, [pc, #164]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e468:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e470:	4926      	ldr	r1, [pc, #152]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e472:	4313      	orrs	r3, r2
 800e474:	650b      	str	r3, [r1, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d008      	beq.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e482:	4b22      	ldr	r3, [pc, #136]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e486:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e48e:	491f      	ldr	r1, [pc, #124]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e490:	4313      	orrs	r3, r2
 800e492:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00d      	beq.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4a2:	691b      	ldr	r3, [r3, #16]
 800e4a4:	4a19      	ldr	r2, [pc, #100]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e4aa:	6113      	str	r3, [r2, #16]
 800e4ac:	4b17      	ldr	r3, [pc, #92]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4ae:	691a      	ldr	r2, [r3, #16]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e4b6:	4915      	ldr	r1, [pc, #84]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	da08      	bge.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e4c4:	4b11      	ldr	r3, [pc, #68]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4c8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e4d0:	490e      	ldr	r1, [pc, #56]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d009      	beq.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4f0:	4906      	ldr	r1, [pc, #24]	@ (800e50c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  if (status == HAL_OK)
 800e4f6:	7dbb      	ldrb	r3, [r7, #22]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d101      	bne.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	e000      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800e500:	2301      	movs	r3, #1
}
 800e502:	4618      	mov	r0, r3
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	58024400 	.word	0x58024400

0800e510 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4aa2      	ldr	r2, [pc, #648]	@ (800e7a4 <HAL_RCCEx_GetPeriphCLKConfig+0x294>)
 800e51c:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_ADC     | RCC_PERIPHCLK_SWPMI1      | RCC_PERIPHCLK_DFSDM1  | RCC_PERIPHCLK_RTC      |
	         RCC_PERIPHCLK_CEC     | RCC_PERIPHCLK_FMC         | RCC_PERIPHCLK_SPDIFRX | RCC_PERIPHCLK_TIM      |
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f043 0208 	orr.w	r2, r3, #8
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	601a      	str	r2, [r3, #0]
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	601a      	str	r2, [r3, #0]
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
 800e55a:	4b93      	ldr	r3, [pc, #588]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e55c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e55e:	0d1b      	lsrs	r3, r3, #20
 800e560:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
 800e568:	4b8f      	ldr	r3, [pc, #572]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e56a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e570:	1c5a      	adds	r2, r3, #1
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
 800e576:	4b8c      	ldr	r3, [pc, #560]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e57a:	0e1b      	lsrs	r3, r3, #24
 800e57c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e580:	1c5a      	adds	r2, r3, #1
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
 800e586:	4b88      	ldr	r3, [pc, #544]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e58a:	0a5b      	lsrs	r3, r3, #9
 800e58c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
 800e596:	4b84      	ldr	r3, [pc, #528]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e59a:	0c1b      	lsrs	r3, r3, #16
 800e59c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5a0:	1c5a      	adds	r2, r3, #1
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 800e5a6:	4b80      	ldr	r3, [pc, #512]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5aa:	0a9b      	lsrs	r3, r3, #10
 800e5ac:	f003 0203 	and.w	r2, r3, #3
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 800e5b4:	4b7c      	ldr	r3, [pc, #496]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5b8:	0a5b      	lsrs	r3, r3, #9
 800e5ba:	f003 0201 	and.w	r2, r3, #1
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
 800e5c2:	4b79      	ldr	r3, [pc, #484]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5c6:	0b1b      	lsrs	r3, r3, #12
 800e5c8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
 800e5d0:	4b75      	ldr	r3, [pc, #468]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5d8:	1c5a      	adds	r2, r3, #1
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
 800e5de:	4b72      	ldr	r3, [pc, #456]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5e2:	0e1b      	lsrs	r3, r3, #24
 800e5e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5e8:	1c5a      	adds	r2, r3, #1
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
 800e5ee:	4b6e      	ldr	r3, [pc, #440]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5f2:	0a5b      	lsrs	r3, r3, #9
 800e5f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
 800e5fe:	4b6a      	ldr	r3, [pc, #424]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e602:	0c1b      	lsrs	r3, r3, #16
 800e604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e608:	1c5a      	adds	r2, r3, #1
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 800e60e:	4b66      	ldr	r3, [pc, #408]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e612:	099b      	lsrs	r3, r3, #6
 800e614:	f003 0203 	and.w	r2, r3, #3
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 800e61c:	4b62      	ldr	r3, [pc, #392]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e620:	095b      	lsrs	r3, r3, #5
 800e622:	f003 0201 	and.w	r2, r3, #1
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800e62a:	4b5f      	ldr	r3, [pc, #380]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e62c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e62e:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	675a      	str	r2, [r3, #116]	@ 0x74
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800e636:	4b5c      	ldr	r3, [pc, #368]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e63a:	f003 0207 	and.w	r2, r3, #7
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	671a      	str	r2, [r3, #112]	@ 0x70
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 800e642:	4b59      	ldr	r3, [pc, #356]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e646:	f003 0207 	and.w	r2, r3, #7
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 800e650:	4b55      	ldr	r3, [pc, #340]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e654:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	67da      	str	r2, [r3, #124]	@ 0x7c
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e65c:	4b52      	ldr	r3, [pc, #328]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e65e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e660:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e66a:	4b4f      	ldr	r3, [pc, #316]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e66c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e66e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 800e678:	4b4b      	ldr	r3, [pc, #300]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e67a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e67c:	f403 4260 	and.w	r2, r3, #57344	@ 0xe000
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 800e686:	4b48      	ldr	r3, [pc, #288]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e68a:	f003 0207 	and.w	r2, r3, #7
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 800e692:	4b45      	ldr	r3, [pc, #276]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e696:	f403 0260 	and.w	r2, r3, #14680064	@ 0xe00000
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 800e6a0:	4b41      	ldr	r3, [pc, #260]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6a4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 800e6ae:	4b3e      	ldr	r3, [pc, #248]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6b2:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 800e6bc:	4b3a      	ldr	r3, [pc, #232]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6c0:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800e6ca:	4b37      	ldr	r3, [pc, #220]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e6ce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 800e6d6:	4b34      	ldr	r3, [pc, #208]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6da:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 800e6e2:	4b31      	ldr	r3, [pc, #196]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 800e6f0:	4b2d      	ldr	r3, [pc, #180]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6f4:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 800e6fc:	4b2a      	ldr	r3, [pc, #168]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e6fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e700:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800e708:	4b27      	ldr	r3, [pc, #156]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e70c:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 800e714:	4b24      	ldr	r3, [pc, #144]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e718:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 800e720:	4b21      	ldr	r3, [pc, #132]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e724:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 800e72c:	4b1e      	ldr	r3, [pc, #120]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e72e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e730:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800e73a:	4b1b      	ldr	r3, [pc, #108]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e73c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e73e:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 800e746:	4b18      	ldr	r3, [pc, #96]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e74a:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 800e754:	4b14      	ldr	r3, [pc, #80]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e758:	f003 0203 	and.w	r2, r3, #3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /* Get the OSPI clock source -----------------------------------------------*/
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
 800e760:	4b11      	ldr	r3, [pc, #68]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e764:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 800e76c:	4b0e      	ldr	r3, [pc, #56]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e76e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e770:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 800e778:	4b0b      	ldr	r3, [pc, #44]	@ (800e7a8 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
 800e77a:	691b      	ldr	r3, [r3, #16]
 800e77c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e780:	2b00      	cmp	r3, #0
 800e782:	d104      	bne.n	800e78e <HAL_RCCEx_GetPeriphCLKConfig+0x27e>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800e78c:	e004      	b.n	800e798 <HAL_RCCEx_GetPeriphCLKConfig+0x288>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e794:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800e798:	bf00      	nop
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	c9fff1f7 	.word	0xc9fff1f7
 800e7a8:	58024400 	.word	0x58024400

0800e7ac <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b090      	sub	sp, #64	@ 0x40
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7ba:	f040 8089 	bne.w	800e8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800e7be:	4b95      	ldr	r3, [pc, #596]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e7c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7c2:	f003 0307 	and.w	r3, r3, #7
 800e7c6:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7ca:	2b04      	cmp	r3, #4
 800e7cc:	d87d      	bhi.n	800e8ca <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800e7ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800e7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d4:	0800e7e9 	.word	0x0800e7e9
 800e7d8:	0800e80d 	.word	0x0800e80d
 800e7dc:	0800e831 	.word	0x0800e831
 800e7e0:	0800e8c5 	.word	0x0800e8c5
 800e7e4:	0800e855 	.word	0x0800e855
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e7e8:	4b8a      	ldr	r3, [pc, #552]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e7f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e7f4:	d107      	bne.n	800e806 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e7f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f000 feba 	bl	800f574 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800e800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e802:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e804:	e3ef      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e80a:	e3ec      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e80c:	4b81      	ldr	r3, [pc, #516]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e814:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e818:	d107      	bne.n	800e82a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e81a:	f107 0318 	add.w	r3, r7, #24
 800e81e:	4618      	mov	r0, r3
 800e820:	f000 fc00 	bl	800f024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e828:	e3dd      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e82a:	2300      	movs	r3, #0
 800e82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e82e:	e3da      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e830:	4b78      	ldr	r3, [pc, #480]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e83c:	d107      	bne.n	800e84e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e83e:	f107 030c 	add.w	r3, r7, #12
 800e842:	4618      	mov	r0, r3
 800e844:	f000 fd42 	bl	800f2cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e84c:	e3cb      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e852:	e3c8      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e854:	4b6f      	ldr	r3, [pc, #444]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e858:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e85c:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e85e:	4b6d      	ldr	r3, [pc, #436]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f003 0304 	and.w	r3, r3, #4
 800e866:	2b04      	cmp	r3, #4
 800e868:	d10c      	bne.n	800e884 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800e86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d109      	bne.n	800e884 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e870:	4b68      	ldr	r3, [pc, #416]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	08db      	lsrs	r3, r3, #3
 800e876:	f003 0303 	and.w	r3, r3, #3
 800e87a:	4a67      	ldr	r2, [pc, #412]	@ (800ea18 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800e87c:	fa22 f303 	lsr.w	r3, r2, r3
 800e880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e882:	e01e      	b.n	800e8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e884:	4b63      	ldr	r3, [pc, #396]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e88c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e890:	d106      	bne.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800e892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e898:	d102      	bne.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e89a:	4b60      	ldr	r3, [pc, #384]	@ (800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800e89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e89e:	e010      	b.n	800e8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e8a0:	4b5c      	ldr	r3, [pc, #368]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e8a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e8ac:	d106      	bne.n	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8b4:	d102      	bne.n	800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e8b6:	4b5a      	ldr	r3, [pc, #360]	@ (800ea20 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800e8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8ba:	e002      	b.n	800e8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800e8c0:	e391      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e8c2:	e390      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e8c4:	4b57      	ldr	r3, [pc, #348]	@ (800ea24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e8c8:	e38d      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e8ce:	e38a      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8d6:	f040 80a7 	bne.w	800ea28 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800e8da:	4b4e      	ldr	r3, [pc, #312]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e8de:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800e8e2:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800e8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e8ea:	d054      	beq.n	800e996 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e8ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e8f2:	f200 808b 	bhi.w	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e8fc:	f000 8083 	beq.w	800ea06 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e902:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e906:	f200 8081 	bhi.w	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e90c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e910:	d02f      	beq.n	800e972 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800e912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e918:	d878      	bhi.n	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d004      	beq.n	800e92a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800e920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e922:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e926:	d012      	beq.n	800e94e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800e928:	e070      	b.n	800ea0c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e92a:	4b3a      	ldr	r3, [pc, #232]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e932:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e936:	d107      	bne.n	800e948 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e93c:	4618      	mov	r0, r3
 800e93e:	f000 fe19 	bl	800f574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e944:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e946:	e34e      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e948:	2300      	movs	r3, #0
 800e94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e94c:	e34b      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e94e:	4b31      	ldr	r3, [pc, #196]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e95a:	d107      	bne.n	800e96c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e95c:	f107 0318 	add.w	r3, r7, #24
 800e960:	4618      	mov	r0, r3
 800e962:	f000 fb5f 	bl	800f024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e96a:	e33c      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e970:	e339      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e972:	4b28      	ldr	r3, [pc, #160]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e97a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e97e:	d107      	bne.n	800e990 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e980:	f107 030c 	add.w	r3, r7, #12
 800e984:	4618      	mov	r0, r3
 800e986:	f000 fca1 	bl	800f2cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e98e:	e32a      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e990:	2300      	movs	r3, #0
 800e992:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800e994:	e327      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e996:	4b1f      	ldr	r3, [pc, #124]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e99a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e99e:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e9a0:	4b1c      	ldr	r3, [pc, #112]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f003 0304 	and.w	r3, r3, #4
 800e9a8:	2b04      	cmp	r3, #4
 800e9aa:	d10c      	bne.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800e9ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d109      	bne.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e9b2:	4b18      	ldr	r3, [pc, #96]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	08db      	lsrs	r3, r3, #3
 800e9b8:	f003 0303 	and.w	r3, r3, #3
 800e9bc:	4a16      	ldr	r2, [pc, #88]	@ (800ea18 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800e9be:	fa22 f303 	lsr.w	r3, r2, r3
 800e9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9c4:	e01e      	b.n	800ea04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e9c6:	4b13      	ldr	r3, [pc, #76]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e9d2:	d106      	bne.n	800e9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800e9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9da:	d102      	bne.n	800e9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e9dc:	4b0f      	ldr	r3, [pc, #60]	@ (800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800e9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9e0:	e010      	b.n	800ea04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e9e2:	4b0c      	ldr	r3, [pc, #48]	@ (800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e9ee:	d106      	bne.n	800e9fe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800e9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9f6:	d102      	bne.n	800e9fe <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e9f8:	4b09      	ldr	r3, [pc, #36]	@ (800ea20 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800e9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9fc:	e002      	b.n	800ea04 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800ea02:	e2f0      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ea04:	e2ef      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ea06:	4b07      	ldr	r3, [pc, #28]	@ (800ea24 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ea08:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ea0a:	e2ec      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ea10:	e2e9      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ea12:	bf00      	nop
 800ea14:	58024400 	.word	0x58024400
 800ea18:	03d09000 	.word	0x03d09000
 800ea1c:	003d0900 	.word	0x003d0900
 800ea20:	017d7840 	.word	0x017d7840
 800ea24:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ea2e:	f040 809c 	bne.w	800eb6a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ea32:	4b9d      	ldr	r3, [pc, #628]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ea34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea36:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ea3a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800ea3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea42:	d054      	beq.n	800eaee <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ea44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea4a:	f200 808b 	bhi.w	800eb64 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ea54:	f000 8083 	beq.w	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ea58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ea5e:	f200 8081 	bhi.w	800eb64 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ea62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea68:	d02f      	beq.n	800eaca <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea70:	d878      	bhi.n	800eb64 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ea72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d004      	beq.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ea78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea7e:	d012      	beq.n	800eaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ea80:	e070      	b.n	800eb64 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea82:	4b89      	ldr	r3, [pc, #548]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ea8e:	d107      	bne.n	800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ea94:	4618      	mov	r0, r3
 800ea96:	f000 fd6d 	bl	800f574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ea9e:	e2a2      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eaa4:	e29f      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eaa6:	4b80      	ldr	r3, [pc, #512]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eaae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eab2:	d107      	bne.n	800eac4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eab4:	f107 0318 	add.w	r3, r7, #24
 800eab8:	4618      	mov	r0, r3
 800eaba:	f000 fab3 	bl	800f024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800eac2:	e290      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eac8:	e28d      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eaca:	4b77      	ldr	r3, [pc, #476]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ead2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ead6:	d107      	bne.n	800eae8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ead8:	f107 030c 	add.w	r3, r7, #12
 800eadc:	4618      	mov	r0, r3
 800eade:	f000 fbf5 	bl	800f2cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eae6:	e27e      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800eae8:	2300      	movs	r3, #0
 800eaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eaec:	e27b      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800eaee:	4b6e      	ldr	r3, [pc, #440]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eaf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eaf2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eaf6:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eaf8:	4b6b      	ldr	r3, [pc, #428]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f003 0304 	and.w	r3, r3, #4
 800eb00:	2b04      	cmp	r3, #4
 800eb02:	d10c      	bne.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800eb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d109      	bne.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eb0a:	4b67      	ldr	r3, [pc, #412]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	08db      	lsrs	r3, r3, #3
 800eb10:	f003 0303 	and.w	r3, r3, #3
 800eb14:	4a65      	ldr	r2, [pc, #404]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800eb16:	fa22 f303 	lsr.w	r3, r2, r3
 800eb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb1c:	e01e      	b.n	800eb5c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eb1e:	4b62      	ldr	r3, [pc, #392]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb2a:	d106      	bne.n	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800eb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb32:	d102      	bne.n	800eb3a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800eb34:	4b5e      	ldr	r3, [pc, #376]	@ (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800eb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb38:	e010      	b.n	800eb5c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eb3a:	4b5b      	ldr	r3, [pc, #364]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eb46:	d106      	bne.n	800eb56 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800eb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb4e:	d102      	bne.n	800eb56 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800eb50:	4b58      	ldr	r3, [pc, #352]	@ (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800eb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb54:	e002      	b.n	800eb5c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800eb5a:	e244      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eb5c:	e243      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800eb5e:	4b56      	ldr	r3, [pc, #344]	@ (800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800eb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eb62:	e240      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800eb64:	2300      	movs	r3, #0
 800eb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eb68:	e23d      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb70:	f040 80a7 	bne.w	800ecc2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800eb74:	4b4c      	ldr	r3, [pc, #304]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb78:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800eb7c:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800eb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eb84:	d055      	beq.n	800ec32 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800eb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eb8c:	f200 8096 	bhi.w	800ecbc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800eb90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eb96:	f000 8084 	beq.w	800eca2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800eb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eba0:	f200 808c 	bhi.w	800ecbc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800eba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ebaa:	d030      	beq.n	800ec0e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800ebac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ebb2:	f200 8083 	bhi.w	800ecbc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d004      	beq.n	800ebc6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800ebbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ebc2:	d012      	beq.n	800ebea <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800ebc4:	e07a      	b.n	800ecbc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ebc6:	4b38      	ldr	r3, [pc, #224]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ebd2:	d107      	bne.n	800ebe4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ebd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 fccb 	bl	800f574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ebde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ebe2:	e200      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ebe8:	e1fd      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ebea:	4b2f      	ldr	r3, [pc, #188]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ebf6:	d107      	bne.n	800ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ebf8:	f107 0318 	add.w	r3, r7, #24
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f000 fa11 	bl	800f024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ec06:	e1ee      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ec0c:	e1eb      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ec0e:	4b26      	ldr	r3, [pc, #152]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec1a:	d107      	bne.n	800ec2c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec1c:	f107 030c 	add.w	r3, r7, #12
 800ec20:	4618      	mov	r0, r3
 800ec22:	f000 fb53 	bl	800f2cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ec2a:	e1dc      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ec30:	e1d9      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ec32:	4b1d      	ldr	r3, [pc, #116]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ec3a:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ec3c:	4b1a      	ldr	r3, [pc, #104]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f003 0304 	and.w	r3, r3, #4
 800ec44:	2b04      	cmp	r3, #4
 800ec46:	d10c      	bne.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800ec48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d109      	bne.n	800ec62 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ec4e:	4b16      	ldr	r3, [pc, #88]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	08db      	lsrs	r3, r3, #3
 800ec54:	f003 0303 	and.w	r3, r3, #3
 800ec58:	4a14      	ldr	r2, [pc, #80]	@ (800ecac <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ec5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ec5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec60:	e01e      	b.n	800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ec62:	4b11      	ldr	r3, [pc, #68]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec6e:	d106      	bne.n	800ec7e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800ec70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec76:	d102      	bne.n	800ec7e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ec78:	4b0d      	ldr	r3, [pc, #52]	@ (800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ec7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec7c:	e010      	b.n	800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ec7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec8a:	d106      	bne.n	800ec9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800ec8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec92:	d102      	bne.n	800ec9a <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ec94:	4b07      	ldr	r3, [pc, #28]	@ (800ecb4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ec96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec98:	e002      	b.n	800eca0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800ec9e:	e1a2      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eca0:	e1a1      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800eca2:	4b05      	ldr	r3, [pc, #20]	@ (800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800eca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eca6:	e19e      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eca8:	58024400 	.word	0x58024400
 800ecac:	03d09000 	.word	0x03d09000
 800ecb0:	003d0900 	.word	0x003d0900
 800ecb4:	017d7840 	.word	0x017d7840
 800ecb8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ecc0:	e191      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800ecc8:	d173      	bne.n	800edb2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ecca:	4b9b      	ldr	r3, [pc, #620]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ecd2:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ecda:	d02f      	beq.n	800ed3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800ecdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ece2:	d863      	bhi.n	800edac <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800ece4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d004      	beq.n	800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800ecea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecf0:	d012      	beq.n	800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800ecf2:	e05b      	b.n	800edac <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ecf4:	4b90      	ldr	r3, [pc, #576]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ecfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed00:	d107      	bne.n	800ed12 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed02:	f107 0318 	add.w	r3, r7, #24
 800ed06:	4618      	mov	r0, r3
 800ed08:	f000 f98c 	bl	800f024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ed10:	e169      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ed16:	e166      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed18:	4b87      	ldr	r3, [pc, #540]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ed20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed24:	d107      	bne.n	800ed36 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed26:	f107 030c 	add.w	r3, r7, #12
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f000 face 	bl	800f2cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ed34:	e157      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ed3a:	e154      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ed3c:	4b7e      	ldr	r3, [pc, #504]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ed44:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed46:	4b7c      	ldr	r3, [pc, #496]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f003 0304 	and.w	r3, r3, #4
 800ed4e:	2b04      	cmp	r3, #4
 800ed50:	d10c      	bne.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800ed52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d109      	bne.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ed58:	4b77      	ldr	r3, [pc, #476]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	08db      	lsrs	r3, r3, #3
 800ed5e:	f003 0303 	and.w	r3, r3, #3
 800ed62:	4a76      	ldr	r2, [pc, #472]	@ (800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800ed64:	fa22 f303 	lsr.w	r3, r2, r3
 800ed68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed6a:	e01e      	b.n	800edaa <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed6c:	4b72      	ldr	r3, [pc, #456]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed78:	d106      	bne.n	800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800ed7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed80:	d102      	bne.n	800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ed82:	4b6f      	ldr	r3, [pc, #444]	@ (800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800ed84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed86:	e010      	b.n	800edaa <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed88:	4b6b      	ldr	r3, [pc, #428]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed94:	d106      	bne.n	800eda4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800ed96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed9c:	d102      	bne.n	800eda4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ed9e:	4b69      	ldr	r3, [pc, #420]	@ (800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800eda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eda2:	e002      	b.n	800edaa <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800eda4:	2300      	movs	r3, #0
 800eda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800eda8:	e11d      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800edaa:	e11c      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800edb0:	e119      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edb8:	d133      	bne.n	800ee22 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800edba:	4b5f      	ldr	r3, [pc, #380]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800edbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800edc2:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800edc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d004      	beq.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800edca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edd0:	d012      	beq.n	800edf8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800edd2:	e023      	b.n	800ee1c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800edd4:	4b58      	ldr	r3, [pc, #352]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ede0:	d107      	bne.n	800edf2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ede2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ede6:	4618      	mov	r0, r3
 800ede8:	f000 fbc4 	bl	800f574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800edec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edee:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800edf0:	e0f9      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800edf2:	2300      	movs	r3, #0
 800edf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800edf6:	e0f6      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800edf8:	4b4f      	ldr	r3, [pc, #316]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee04:	d107      	bne.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee06:	f107 0318 	add.w	r3, r7, #24
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 f90a 	bl	800f024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ee14:	e0e7      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ee1a:	e0e4      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ee20:	e0e1      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ee28:	f040 808e 	bne.w	800ef48 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ee2c:	4b42      	ldr	r3, [pc, #264]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ee2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee30:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ee34:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800ee36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee3c:	d06b      	beq.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800ee3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee44:	d874      	bhi.n	800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ee46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee4c:	d056      	beq.n	800eefc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800ee4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee54:	d86c      	bhi.n	800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ee56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ee5c:	d03b      	beq.n	800eed6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800ee5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ee64:	d864      	bhi.n	800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ee66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee6c:	d021      	beq.n	800eeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800ee6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee74:	d85c      	bhi.n	800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ee76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d004      	beq.n	800ee86 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee82:	d004      	beq.n	800ee8e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800ee84:	e054      	b.n	800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ee86:	f000 f8b7 	bl	800eff8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ee8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
          break;
 800ee8c:	e0ab      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee8e:	4b2a      	ldr	r3, [pc, #168]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ee9a:	d107      	bne.n	800eeac <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee9c:	f107 0318 	add.w	r3, r7, #24
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 f8bf 	bl	800f024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800eeaa:	e09c      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800eeac:	2300      	movs	r3, #0
 800eeae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eeb0:	e099      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eeb2:	4b21      	ldr	r3, [pc, #132]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eeba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eebe:	d107      	bne.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eec0:	f107 030c 	add.w	r3, r7, #12
 800eec4:	4618      	mov	r0, r3
 800eec6:	f000 fa01 	bl	800f2cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800eece:	e08a      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800eed0:	2300      	movs	r3, #0
 800eed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eed4:	e087      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eed6:	4b18      	ldr	r3, [pc, #96]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f003 0304 	and.w	r3, r3, #4
 800eede:	2b04      	cmp	r3, #4
 800eee0:	d109      	bne.n	800eef6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eee2:	4b15      	ldr	r3, [pc, #84]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	08db      	lsrs	r3, r3, #3
 800eee8:	f003 0303 	and.w	r3, r3, #3
 800eeec:	4a13      	ldr	r2, [pc, #76]	@ (800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800eeee:	fa22 f303 	lsr.w	r3, r2, r3
 800eef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800eef4:	e077      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800eef6:	2300      	movs	r3, #0
 800eef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800eefa:	e074      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800eefc:	4b0e      	ldr	r3, [pc, #56]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef08:	d102      	bne.n	800ef10 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800ef0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800ef0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ef0e:	e06a      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ef10:	2300      	movs	r3, #0
 800ef12:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ef14:	e067      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ef16:	4b08      	ldr	r3, [pc, #32]	@ (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef22:	d102      	bne.n	800ef2a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800ef24:	4b07      	ldr	r3, [pc, #28]	@ (800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ef26:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ef28:	e05d      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ef2e:	e05a      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ef34:	e057      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ef36:	bf00      	nop
 800ef38:	58024400 	.word	0x58024400
 800ef3c:	03d09000 	.word	0x03d09000
 800ef40:	003d0900 	.word	0x003d0900
 800ef44:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ef4e:	d148      	bne.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800ef50:	4b27      	ldr	r3, [pc, #156]	@ (800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ef52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ef54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ef58:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800ef5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef60:	d02a      	beq.n	800efb8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800ef62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef68:	d838      	bhi.n	800efdc <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800ef6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d004      	beq.n	800ef7a <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800ef70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef76:	d00d      	beq.n	800ef94 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800ef78:	e030      	b.n	800efdc <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ef7a:	4b1d      	ldr	r3, [pc, #116]	@ (800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ef86:	d102      	bne.n	800ef8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800ef88:	4b1a      	ldr	r3, [pc, #104]	@ (800eff4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800ef8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ef8c:	e02b      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800ef92:	e028      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef94:	4b16      	ldr	r3, [pc, #88]	@ (800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ef9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800efa0:	d107      	bne.n	800efb2 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800efa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fae4 	bl	800f574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efae:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800efb0:	e019      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800efb6:	e016      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efb8:	4b0d      	ldr	r3, [pc, #52]	@ (800eff0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800efc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800efc4:	d107      	bne.n	800efd6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efc6:	f107 0318 	add.w	r3, r7, #24
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 f82a 	bl	800f024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800efd4:	e007      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800efd6:	2300      	movs	r3, #0
 800efd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800efda:	e004      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800efe0:	e001      	b.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

  return frequency;
 800efe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3740      	adds	r7, #64	@ 0x40
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	58024400 	.word	0x58024400
 800eff4:	017d7840 	.word	0x017d7840

0800eff8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800effc:	f7fe fb48 	bl	800d690 <HAL_RCC_GetHCLKFreq>
 800f000:	4602      	mov	r2, r0
 800f002:	4b06      	ldr	r3, [pc, #24]	@ (800f01c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f004:	6a1b      	ldr	r3, [r3, #32]
 800f006:	091b      	lsrs	r3, r3, #4
 800f008:	f003 0307 	and.w	r3, r3, #7
 800f00c:	4904      	ldr	r1, [pc, #16]	@ (800f020 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f00e:	5ccb      	ldrb	r3, [r1, r3]
 800f010:	f003 031f 	and.w	r3, r3, #31
 800f014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f018:	4618      	mov	r0, r3
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	58024400 	.word	0x58024400
 800f020:	08015a7c 	.word	0x08015a7c

0800f024 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800f024:	b480      	push	{r7}
 800f026:	b089      	sub	sp, #36	@ 0x24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f02c:	4ba1      	ldr	r3, [pc, #644]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f030:	f003 0303 	and.w	r3, r3, #3
 800f034:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800f036:	4b9f      	ldr	r3, [pc, #636]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f03a:	0b1b      	lsrs	r3, r3, #12
 800f03c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f040:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f042:	4b9c      	ldr	r3, [pc, #624]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f046:	091b      	lsrs	r3, r3, #4
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800f04e:	4b99      	ldr	r3, [pc, #612]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f052:	08db      	lsrs	r3, r3, #3
 800f054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f058:	693a      	ldr	r2, [r7, #16]
 800f05a:	fb02 f303 	mul.w	r3, r2, r3
 800f05e:	ee07 3a90 	vmov	s15, r3
 800f062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f066:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f000 8111 	beq.w	800f294 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	2b02      	cmp	r3, #2
 800f076:	f000 8083 	beq.w	800f180 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	2b02      	cmp	r3, #2
 800f07e:	f200 80a1 	bhi.w	800f1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f082:	69bb      	ldr	r3, [r7, #24]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d003      	beq.n	800f090 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d056      	beq.n	800f13c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f08e:	e099      	b.n	800f1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f090:	4b88      	ldr	r3, [pc, #544]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f003 0320 	and.w	r3, r3, #32
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d02d      	beq.n	800f0f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f09c:	4b85      	ldr	r3, [pc, #532]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	08db      	lsrs	r3, r3, #3
 800f0a2:	f003 0303 	and.w	r3, r3, #3
 800f0a6:	4a84      	ldr	r2, [pc, #528]	@ (800f2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800f0ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	ee07 3a90 	vmov	s15, r3
 800f0b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	ee07 3a90 	vmov	s15, r3
 800f0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0c6:	4b7b      	ldr	r3, [pc, #492]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0ce:	ee07 3a90 	vmov	s15, r3
 800f0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f0f6:	e087      	b.n	800f208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	ee07 3a90 	vmov	s15, r3
 800f0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f102:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f10a:	4b6a      	ldr	r3, [pc, #424]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f112:	ee07 3a90 	vmov	s15, r3
 800f116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f11e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f12a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f13a:	e065      	b.n	800f208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	ee07 3a90 	vmov	s15, r3
 800f142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f146:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f14e:	4b59      	ldr	r3, [pc, #356]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f156:	ee07 3a90 	vmov	s15, r3
 800f15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f162:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f16e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f17a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f17e:	e043      	b.n	800f208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	ee07 3a90 	vmov	s15, r3
 800f186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f18a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f192:	4b48      	ldr	r3, [pc, #288]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f19a:	ee07 3a90 	vmov	s15, r3
 800f19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f1c2:	e021      	b.n	800f208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	ee07 3a90 	vmov	s15, r3
 800f1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1d6:	4b37      	ldr	r3, [pc, #220]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1de:	ee07 3a90 	vmov	s15, r3
 800f1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f206:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800f208:	4b2a      	ldr	r3, [pc, #168]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f20a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f20c:	0a5b      	lsrs	r3, r3, #9
 800f20e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f212:	ee07 3a90 	vmov	s15, r3
 800f216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f21a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f21e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f222:	edd7 6a07 	vldr	s13, [r7, #28]
 800f226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f22a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f22e:	ee17 2a90 	vmov	r2, s15
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800f236:	4b1f      	ldr	r3, [pc, #124]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f23a:	0c1b      	lsrs	r3, r3, #16
 800f23c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f240:	ee07 3a90 	vmov	s15, r3
 800f244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f248:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f24c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f250:	edd7 6a07 	vldr	s13, [r7, #28]
 800f254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f25c:	ee17 2a90 	vmov	r2, s15
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800f264:	4b13      	ldr	r3, [pc, #76]	@ (800f2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f268:	0e1b      	lsrs	r3, r3, #24
 800f26a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f26e:	ee07 3a90 	vmov	s15, r3
 800f272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f27a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f27e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f28a:	ee17 2a90 	vmov	r2, s15
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f292:	e008      	b.n	800f2a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2200      	movs	r2, #0
 800f29e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	609a      	str	r2, [r3, #8]
}
 800f2a6:	bf00      	nop
 800f2a8:	3724      	adds	r7, #36	@ 0x24
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	58024400 	.word	0x58024400
 800f2b8:	03d09000 	.word	0x03d09000
 800f2bc:	46000000 	.word	0x46000000
 800f2c0:	4c742400 	.word	0x4c742400
 800f2c4:	4a742400 	.word	0x4a742400
 800f2c8:	4bbebc20 	.word	0x4bbebc20

0800f2cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b089      	sub	sp, #36	@ 0x24
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f2d4:	4ba1      	ldr	r3, [pc, #644]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2d8:	f003 0303 	and.w	r3, r3, #3
 800f2dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f2de:	4b9f      	ldr	r3, [pc, #636]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2e2:	0d1b      	lsrs	r3, r3, #20
 800f2e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f2e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f2ea:	4b9c      	ldr	r3, [pc, #624]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ee:	0a1b      	lsrs	r3, r3, #8
 800f2f0:	f003 0301 	and.w	r3, r3, #1
 800f2f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f2f6:	4b99      	ldr	r3, [pc, #612]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2fa:	08db      	lsrs	r3, r3, #3
 800f2fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	fb02 f303 	mul.w	r3, r2, r3
 800f306:	ee07 3a90 	vmov	s15, r3
 800f30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f30e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	2b00      	cmp	r3, #0
 800f316:	f000 8111 	beq.w	800f53c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f31a:	69bb      	ldr	r3, [r7, #24]
 800f31c:	2b02      	cmp	r3, #2
 800f31e:	f000 8083 	beq.w	800f428 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	2b02      	cmp	r3, #2
 800f326:	f200 80a1 	bhi.w	800f46c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d003      	beq.n	800f338 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	2b01      	cmp	r3, #1
 800f334:	d056      	beq.n	800f3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f336:	e099      	b.n	800f46c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f338:	4b88      	ldr	r3, [pc, #544]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f003 0320 	and.w	r3, r3, #32
 800f340:	2b00      	cmp	r3, #0
 800f342:	d02d      	beq.n	800f3a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f344:	4b85      	ldr	r3, [pc, #532]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	08db      	lsrs	r3, r3, #3
 800f34a:	f003 0303 	and.w	r3, r3, #3
 800f34e:	4a84      	ldr	r2, [pc, #528]	@ (800f560 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f350:	fa22 f303 	lsr.w	r3, r2, r3
 800f354:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	ee07 3a90 	vmov	s15, r3
 800f35c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	ee07 3a90 	vmov	s15, r3
 800f366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f36e:	4b7b      	ldr	r3, [pc, #492]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f376:	ee07 3a90 	vmov	s15, r3
 800f37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f37e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f382:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f38e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f39a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f39e:	e087      	b.n	800f4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	ee07 3a90 	vmov	s15, r3
 800f3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f568 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3b2:	4b6a      	ldr	r3, [pc, #424]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3ba:	ee07 3a90 	vmov	s15, r3
 800f3be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f3ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f3e2:	e065      	b.n	800f4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	ee07 3a90 	vmov	s15, r3
 800f3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f56c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3f6:	4b59      	ldr	r3, [pc, #356]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3fe:	ee07 3a90 	vmov	s15, r3
 800f402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f406:	ed97 6a03 	vldr	s12, [r7, #12]
 800f40a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f426:	e043      	b.n	800f4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	ee07 3a90 	vmov	s15, r3
 800f42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f432:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f43a:	4b48      	ldr	r3, [pc, #288]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f442:	ee07 3a90 	vmov	s15, r3
 800f446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f44a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f44e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f45a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f466:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f46a:	e021      	b.n	800f4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	ee07 3a90 	vmov	s15, r3
 800f472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f476:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f56c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f47e:	4b37      	ldr	r3, [pc, #220]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f486:	ee07 3a90 	vmov	s15, r3
 800f48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f48e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f492:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f49e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f4ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800f4b0:	4b2a      	ldr	r3, [pc, #168]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4b4:	0a5b      	lsrs	r3, r3, #9
 800f4b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4ba:	ee07 3a90 	vmov	s15, r3
 800f4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f4c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4d6:	ee17 2a90 	vmov	r2, s15
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800f4de:	4b1f      	ldr	r3, [pc, #124]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f4e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4e2:	0c1b      	lsrs	r3, r3, #16
 800f4e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4e8:	ee07 3a90 	vmov	s15, r3
 800f4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f4f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f504:	ee17 2a90 	vmov	r2, s15
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800f50c:	4b13      	ldr	r3, [pc, #76]	@ (800f55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f510:	0e1b      	lsrs	r3, r3, #24
 800f512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f516:	ee07 3a90 	vmov	s15, r3
 800f51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f51e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f522:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f526:	edd7 6a07 	vldr	s13, [r7, #28]
 800f52a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f52e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f532:	ee17 2a90 	vmov	r2, s15
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f53a:	e008      	b.n	800f54e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2200      	movs	r2, #0
 800f540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2200      	movs	r2, #0
 800f54c:	609a      	str	r2, [r3, #8]
}
 800f54e:	bf00      	nop
 800f550:	3724      	adds	r7, #36	@ 0x24
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	58024400 	.word	0x58024400
 800f560:	03d09000 	.word	0x03d09000
 800f564:	46000000 	.word	0x46000000
 800f568:	4c742400 	.word	0x4c742400
 800f56c:	4a742400 	.word	0x4a742400
 800f570:	4bbebc20 	.word	0x4bbebc20

0800f574 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800f574:	b480      	push	{r7}
 800f576:	b089      	sub	sp, #36	@ 0x24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f57c:	4ba0      	ldr	r3, [pc, #640]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f57e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f580:	f003 0303 	and.w	r3, r3, #3
 800f584:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800f586:	4b9e      	ldr	r3, [pc, #632]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f58a:	091b      	lsrs	r3, r3, #4
 800f58c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f590:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f592:	4b9b      	ldr	r3, [pc, #620]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f596:	f003 0301 	and.w	r3, r3, #1
 800f59a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f59c:	4b98      	ldr	r3, [pc, #608]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f59e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5a0:	08db      	lsrs	r3, r3, #3
 800f5a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5a6:	693a      	ldr	r2, [r7, #16]
 800f5a8:	fb02 f303 	mul.w	r3, r2, r3
 800f5ac:	ee07 3a90 	vmov	s15, r3
 800f5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f000 8111 	beq.w	800f7e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	2b02      	cmp	r3, #2
 800f5c4:	f000 8083 	beq.w	800f6ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	f200 80a1 	bhi.w	800f712 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d003      	beq.n	800f5de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d056      	beq.n	800f68a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f5dc:	e099      	b.n	800f712 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5de:	4b88      	ldr	r3, [pc, #544]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	f003 0320 	and.w	r3, r3, #32
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d02d      	beq.n	800f646 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f5ea:	4b85      	ldr	r3, [pc, #532]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	08db      	lsrs	r3, r3, #3
 800f5f0:	f003 0303 	and.w	r3, r3, #3
 800f5f4:	4a83      	ldr	r2, [pc, #524]	@ (800f804 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f5fa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	ee07 3a90 	vmov	s15, r3
 800f602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	ee07 3a90 	vmov	s15, r3
 800f60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f614:	4b7a      	ldr	r3, [pc, #488]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f61c:	ee07 3a90 	vmov	s15, r3
 800f620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f624:	ed97 6a03 	vldr	s12, [r7, #12]
 800f628:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800f808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f62c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f634:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f63c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f640:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f644:	e087      	b.n	800f756 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	ee07 3a90 	vmov	s15, r3
 800f64c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f650:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800f80c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f658:	4b69      	ldr	r3, [pc, #420]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f65a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f660:	ee07 3a90 	vmov	s15, r3
 800f664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f668:	ed97 6a03 	vldr	s12, [r7, #12]
 800f66c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800f808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f678:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f67c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f680:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f684:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f688:	e065      	b.n	800f756 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	ee07 3a90 	vmov	s15, r3
 800f690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f694:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800f810 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f69c:	4b58      	ldr	r3, [pc, #352]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f69e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6a4:	ee07 3a90 	vmov	s15, r3
 800f6a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6b0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800f808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f6b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f6cc:	e043      	b.n	800f756 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	ee07 3a90 	vmov	s15, r3
 800f6d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6d8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800f814 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f6dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6e0:	4b47      	ldr	r3, [pc, #284]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6e8:	ee07 3a90 	vmov	s15, r3
 800f6ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6f4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800f808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f6f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f700:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f70c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f710:	e021      	b.n	800f756 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	ee07 3a90 	vmov	s15, r3
 800f718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f71c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800f80c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f724:	4b36      	ldr	r3, [pc, #216]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f72c:	ee07 3a90 	vmov	s15, r3
 800f730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f734:	ed97 6a03 	vldr	s12, [r7, #12]
 800f738:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f73c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f744:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f74c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f754:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800f756:	4b2a      	ldr	r3, [pc, #168]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f75a:	0a5b      	lsrs	r3, r3, #9
 800f75c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f760:	ee07 3a90 	vmov	s15, r3
 800f764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f768:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f76c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f770:	edd7 6a07 	vldr	s13, [r7, #28]
 800f774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f77c:	ee17 2a90 	vmov	r2, s15
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800f784:	4b1e      	ldr	r3, [pc, #120]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f788:	0c1b      	lsrs	r3, r3, #16
 800f78a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f78e:	ee07 3a90 	vmov	s15, r3
 800f792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f796:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f79a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f79e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7aa:	ee17 2a90 	vmov	r2, s15
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800f7b2:	4b13      	ldr	r3, [pc, #76]	@ (800f800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f7b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7b6:	0e1b      	lsrs	r3, r3, #24
 800f7b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7bc:	ee07 3a90 	vmov	s15, r3
 800f7c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f7c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7d8:	ee17 2a90 	vmov	r2, s15
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f7e0:	e008      	b.n	800f7f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	609a      	str	r2, [r3, #8]
}
 800f7f4:	bf00      	nop
 800f7f6:	3724      	adds	r7, #36	@ 0x24
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr
 800f800:	58024400 	.word	0x58024400
 800f804:	03d09000 	.word	0x03d09000
 800f808:	46000000 	.word	0x46000000
 800f80c:	4c742400 	.word	0x4c742400
 800f810:	4a742400 	.word	0x4a742400
 800f814:	4bbebc20 	.word	0x4bbebc20

0800f818 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f826:	4b53      	ldr	r3, [pc, #332]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f82a:	f003 0303 	and.w	r3, r3, #3
 800f82e:	2b03      	cmp	r3, #3
 800f830:	d101      	bne.n	800f836 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f832:	2301      	movs	r3, #1
 800f834:	e099      	b.n	800f96a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f836:	4b4f      	ldr	r3, [pc, #316]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a4e      	ldr	r2, [pc, #312]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f83c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f842:	f7f7 fd31 	bl	80072a8 <HAL_GetTick>
 800f846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f848:	e008      	b.n	800f85c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f84a:	f7f7 fd2d 	bl	80072a8 <HAL_GetTick>
 800f84e:	4602      	mov	r2, r0
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	2b02      	cmp	r3, #2
 800f856:	d901      	bls.n	800f85c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f858:	2303      	movs	r3, #3
 800f85a:	e086      	b.n	800f96a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f85c:	4b45      	ldr	r3, [pc, #276]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1f0      	bne.n	800f84a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f868:	4b42      	ldr	r3, [pc, #264]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f86c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	031b      	lsls	r3, r3, #12
 800f876:	493f      	ldr	r1, [pc, #252]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f878:	4313      	orrs	r3, r2
 800f87a:	628b      	str	r3, [r1, #40]	@ 0x28
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	3b01      	subs	r3, #1
 800f882:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	3b01      	subs	r3, #1
 800f88c:	025b      	lsls	r3, r3, #9
 800f88e:	b29b      	uxth	r3, r3
 800f890:	431a      	orrs	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	3b01      	subs	r3, #1
 800f898:	041b      	lsls	r3, r3, #16
 800f89a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f89e:	431a      	orrs	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	061b      	lsls	r3, r3, #24
 800f8a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f8ac:	4931      	ldr	r1, [pc, #196]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f8b2:	4b30      	ldr	r3, [pc, #192]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	695b      	ldr	r3, [r3, #20]
 800f8be:	492d      	ldr	r1, [pc, #180]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f8c4:	4b2b      	ldr	r3, [pc, #172]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c8:	f023 0220 	bic.w	r2, r3, #32
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	699b      	ldr	r3, [r3, #24]
 800f8d0:	4928      	ldr	r1, [pc, #160]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f8d6:	4b27      	ldr	r3, [pc, #156]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8da:	4a26      	ldr	r2, [pc, #152]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8dc:	f023 0310 	bic.w	r3, r3, #16
 800f8e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f8e2:	4b24      	ldr	r3, [pc, #144]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f8e6:	4b24      	ldr	r3, [pc, #144]	@ (800f978 <RCCEx_PLL2_Config+0x160>)
 800f8e8:	4013      	ands	r3, r2
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	69d2      	ldr	r2, [r2, #28]
 800f8ee:	00d2      	lsls	r2, r2, #3
 800f8f0:	4920      	ldr	r1, [pc, #128]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f8f6:	4b1f      	ldr	r3, [pc, #124]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8fa:	4a1e      	ldr	r2, [pc, #120]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f8fc:	f043 0310 	orr.w	r3, r3, #16
 800f900:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d106      	bne.n	800f916 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f908:	4b1a      	ldr	r3, [pc, #104]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f90c:	4a19      	ldr	r2, [pc, #100]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f90e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f912:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f914:	e00f      	b.n	800f936 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d106      	bne.n	800f92a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f91c:	4b15      	ldr	r3, [pc, #84]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f920:	4a14      	ldr	r2, [pc, #80]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f926:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f928:	e005      	b.n	800f936 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f92a:	4b12      	ldr	r3, [pc, #72]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f92e:	4a11      	ldr	r2, [pc, #68]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f930:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f934:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f936:	4b0f      	ldr	r3, [pc, #60]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a0e      	ldr	r2, [pc, #56]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f93c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f942:	f7f7 fcb1 	bl	80072a8 <HAL_GetTick>
 800f946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f948:	e008      	b.n	800f95c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f94a:	f7f7 fcad 	bl	80072a8 <HAL_GetTick>
 800f94e:	4602      	mov	r2, r0
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	2b02      	cmp	r3, #2
 800f956:	d901      	bls.n	800f95c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f958:	2303      	movs	r3, #3
 800f95a:	e006      	b.n	800f96a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f95c:	4b05      	ldr	r3, [pc, #20]	@ (800f974 <RCCEx_PLL2_Config+0x15c>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f964:	2b00      	cmp	r3, #0
 800f966:	d0f0      	beq.n	800f94a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f968:	7bfb      	ldrb	r3, [r7, #15]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	58024400 	.word	0x58024400
 800f978:	ffff0007 	.word	0xffff0007

0800f97c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f98a:	4b53      	ldr	r3, [pc, #332]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800f98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f98e:	f003 0303 	and.w	r3, r3, #3
 800f992:	2b03      	cmp	r3, #3
 800f994:	d101      	bne.n	800f99a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f996:	2301      	movs	r3, #1
 800f998:	e099      	b.n	800face <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f99a:	4b4f      	ldr	r3, [pc, #316]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	4a4e      	ldr	r2, [pc, #312]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800f9a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f9a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f9a6:	f7f7 fc7f 	bl	80072a8 <HAL_GetTick>
 800f9aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f9ac:	e008      	b.n	800f9c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f9ae:	f7f7 fc7b 	bl	80072a8 <HAL_GetTick>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d901      	bls.n	800f9c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f9bc:	2303      	movs	r3, #3
 800f9be:	e086      	b.n	800face <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f9c0:	4b45      	ldr	r3, [pc, #276]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d1f0      	bne.n	800f9ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f9cc:	4b42      	ldr	r3, [pc, #264]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800f9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	051b      	lsls	r3, r3, #20
 800f9da:	493f      	ldr	r1, [pc, #252]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	628b      	str	r3, [r1, #40]	@ 0x28
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	3b01      	subs	r3, #1
 800f9e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	025b      	lsls	r3, r3, #9
 800f9f2:	b29b      	uxth	r3, r3
 800f9f4:	431a      	orrs	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	041b      	lsls	r3, r3, #16
 800f9fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fa02:	431a      	orrs	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	691b      	ldr	r3, [r3, #16]
 800fa08:	3b01      	subs	r3, #1
 800fa0a:	061b      	lsls	r3, r3, #24
 800fa0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fa10:	4931      	ldr	r1, [pc, #196]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa12:	4313      	orrs	r3, r2
 800fa14:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fa16:	4b30      	ldr	r3, [pc, #192]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	695b      	ldr	r3, [r3, #20]
 800fa22:	492d      	ldr	r1, [pc, #180]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa24:	4313      	orrs	r3, r2
 800fa26:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fa28:	4b2b      	ldr	r3, [pc, #172]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa2c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	4928      	ldr	r1, [pc, #160]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa36:	4313      	orrs	r3, r2
 800fa38:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fa3a:	4b27      	ldr	r3, [pc, #156]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa3e:	4a26      	ldr	r2, [pc, #152]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fa44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fa46:	4b24      	ldr	r3, [pc, #144]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fa4a:	4b24      	ldr	r3, [pc, #144]	@ (800fadc <RCCEx_PLL3_Config+0x160>)
 800fa4c:	4013      	ands	r3, r2
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	69d2      	ldr	r2, [r2, #28]
 800fa52:	00d2      	lsls	r2, r2, #3
 800fa54:	4920      	ldr	r1, [pc, #128]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa56:	4313      	orrs	r3, r2
 800fa58:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fa5a:	4b1f      	ldr	r3, [pc, #124]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa5e:	4a1e      	ldr	r2, [pc, #120]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fa64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d106      	bne.n	800fa7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fa6c:	4b1a      	ldr	r3, [pc, #104]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa70:	4a19      	ldr	r2, [pc, #100]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800fa76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fa78:	e00f      	b.n	800fa9a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d106      	bne.n	800fa8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fa80:	4b15      	ldr	r3, [pc, #84]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa84:	4a14      	ldr	r2, [pc, #80]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa86:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800fa8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fa8c:	e005      	b.n	800fa9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fa8e:	4b12      	ldr	r3, [pc, #72]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa92:	4a11      	ldr	r2, [pc, #68]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fa98:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fa9a:	4b0f      	ldr	r3, [pc, #60]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a0e      	ldr	r2, [pc, #56]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800faa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800faa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800faa6:	f7f7 fbff 	bl	80072a8 <HAL_GetTick>
 800faaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800faac:	e008      	b.n	800fac0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800faae:	f7f7 fbfb 	bl	80072a8 <HAL_GetTick>
 800fab2:	4602      	mov	r2, r0
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	2b02      	cmp	r3, #2
 800faba:	d901      	bls.n	800fac0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fabc:	2303      	movs	r3, #3
 800fabe:	e006      	b.n	800face <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fac0:	4b05      	ldr	r3, [pc, #20]	@ (800fad8 <RCCEx_PLL3_Config+0x15c>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d0f0      	beq.n	800faae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800facc:	7bfb      	ldrb	r3, [r7, #15]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	58024400 	.word	0x58024400
 800fadc:	ffff0007 	.word	0xffff0007

0800fae0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
 800faec:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	2b02      	cmp	r3, #2
 800faf2:	d904      	bls.n	800fafe <HAL_SAI_InitProtocol+0x1e>
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	3b03      	subs	r3, #3
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d812      	bhi.n	800fb22 <HAL_SAI_InitProtocol+0x42>
 800fafc:	e008      	b.n	800fb10 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	68b9      	ldr	r1, [r7, #8]
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f000 fb85 	bl	8010214 <SAI_InitI2S>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	75fb      	strb	r3, [r7, #23]
      break;
 800fb0e:	e00b      	b.n	800fb28 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	68b9      	ldr	r1, [r7, #8]
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f000 fc2e 	bl	8010378 <SAI_InitPCM>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	75fb      	strb	r3, [r7, #23]
      break;
 800fb20:	e002      	b.n	800fb28 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800fb22:	2301      	movs	r3, #1
 800fb24:	75fb      	strb	r3, [r7, #23]
      break;
 800fb26:	bf00      	nop
  }

  if (status == HAL_OK)
 800fb28:	7dfb      	ldrb	r3, [r7, #23]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d104      	bne.n	800fb38 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800fb2e:	68f8      	ldr	r0, [r7, #12]
 800fb30:	f000 f808 	bl	800fb44 <HAL_SAI_Init>
 800fb34:	4603      	mov	r3, r0
 800fb36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800fb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3718      	adds	r7, #24
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}
	...

0800fb44 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b08a      	sub	sp, #40	@ 0x28
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d101      	bne.n	800fb56 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800fb52:	2301      	movs	r3, #1
 800fb54:	e1fb      	b.n	800ff4e <HAL_SAI_Init+0x40a>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d113      	bne.n	800fb88 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a96      	ldr	r2, [pc, #600]	@ (800fdc0 <HAL_SAI_Init+0x27c>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d004      	beq.n	800fb74 <HAL_SAI_Init+0x30>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	4a95      	ldr	r2, [pc, #596]	@ (800fdc4 <HAL_SAI_Init+0x280>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d107      	bne.n	800fb84 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d103      	bne.n	800fb84 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d001      	beq.n	800fb88 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800fb84:	2301      	movs	r3, #1
 800fb86:	e1e2      	b.n	800ff4e <HAL_SAI_Init+0x40a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a8c      	ldr	r2, [pc, #560]	@ (800fdc0 <HAL_SAI_Init+0x27c>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d004      	beq.n	800fb9c <HAL_SAI_Init+0x58>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4a8c      	ldr	r2, [pc, #560]	@ (800fdc8 <HAL_SAI_Init+0x284>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d102      	bne.n	800fba2 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800fb9c:	4b8b      	ldr	r3, [pc, #556]	@ (800fdcc <HAL_SAI_Init+0x288>)
 800fb9e:	61bb      	str	r3, [r7, #24]
 800fba0:	e00e      	b.n	800fbc0 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	4a87      	ldr	r2, [pc, #540]	@ (800fdc4 <HAL_SAI_Init+0x280>)
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	d004      	beq.n	800fbb6 <HAL_SAI_Init+0x72>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4a87      	ldr	r2, [pc, #540]	@ (800fdd0 <HAL_SAI_Init+0x28c>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d102      	bne.n	800fbbc <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800fbb6:	4b87      	ldr	r3, [pc, #540]	@ (800fdd4 <HAL_SAI_Init+0x290>)
 800fbb8:	61bb      	str	r3, [r7, #24]
 800fbba:	e001      	b.n	800fbc0 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	e1c6      	b.n	800ff4e <HAL_SAI_Init+0x40a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d106      	bne.n	800fbda <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 f9c9 	bl	800ff6c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 fc86 	bl	80104ec <SAI_Disable>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d001      	beq.n	800fbea <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	e1b1      	b.n	800ff4e <HAL_SAI_Init+0x40a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2202      	movs	r2, #2
 800fbee:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	d00c      	beq.n	800fc14 <HAL_SAI_Init+0xd0>
 800fbfa:	2b02      	cmp	r3, #2
 800fbfc:	d80d      	bhi.n	800fc1a <HAL_SAI_Init+0xd6>
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d002      	beq.n	800fc08 <HAL_SAI_Init+0xc4>
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d003      	beq.n	800fc0e <HAL_SAI_Init+0xca>
 800fc06:	e008      	b.n	800fc1a <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc0c:	e008      	b.n	800fc20 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800fc0e:	2310      	movs	r3, #16
 800fc10:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc12:	e005      	b.n	800fc20 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800fc14:	2320      	movs	r3, #32
 800fc16:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc18:	e002      	b.n	800fc20 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc1e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	2b05      	cmp	r3, #5
 800fc26:	d822      	bhi.n	800fc6e <HAL_SAI_Init+0x12a>
 800fc28:	a201      	add	r2, pc, #4	@ (adr r2, 800fc30 <HAL_SAI_Init+0xec>)
 800fc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc2e:	bf00      	nop
 800fc30:	0800fc49 	.word	0x0800fc49
 800fc34:	0800fc4f 	.word	0x0800fc4f
 800fc38:	0800fc57 	.word	0x0800fc57
 800fc3c:	0800fc6f 	.word	0x0800fc6f
 800fc40:	0800fc6f 	.word	0x0800fc6f
 800fc44:	0800fc5f 	.word	0x0800fc5f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	61fb      	str	r3, [r7, #28]
      break;
 800fc4c:	e012      	b.n	800fc74 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800fc4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc52:	61fb      	str	r3, [r7, #28]
      break;
 800fc54:	e00e      	b.n	800fc74 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800fc56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fc5a:	61fb      	str	r3, [r7, #28]
      break;
 800fc5c:	e00a      	b.n	800fc74 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800fc5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fc62:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800fc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc66:	f043 0303 	orr.w	r3, r3, #3
 800fc6a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fc6c:	e002      	b.n	800fc74 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	61fb      	str	r3, [r7, #28]
      break;
 800fc72:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc78:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a1b      	ldr	r3, [r3, #32]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f000 8084 	beq.w	800fd8c <HAL_SAI_Init+0x248>
  {
    uint32_t freq = 0;
 800fc84:	2300      	movs	r3, #0
 800fc86:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a4c      	ldr	r2, [pc, #304]	@ (800fdc0 <HAL_SAI_Init+0x27c>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d004      	beq.n	800fc9c <HAL_SAI_Init+0x158>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4a4c      	ldr	r2, [pc, #304]	@ (800fdc8 <HAL_SAI_Init+0x284>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d104      	bne.n	800fca6 <HAL_SAI_Init+0x162>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800fc9c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800fca0:	f7fe fd84 	bl	800e7ac <HAL_RCCEx_GetPeriphCLKFreq>
 800fca4:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a46      	ldr	r2, [pc, #280]	@ (800fdc4 <HAL_SAI_Init+0x280>)
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d104      	bne.n	800fcba <HAL_SAI_Init+0x176>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800fcb0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800fcb4:	f7fe fd7a 	bl	800e7ac <HAL_RCCEx_GetPeriphCLKFreq>
 800fcb8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	4a44      	ldr	r2, [pc, #272]	@ (800fdd0 <HAL_SAI_Init+0x28c>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d104      	bne.n	800fcce <HAL_SAI_Init+0x18a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800fcc4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800fcc8:	f7fe fd70 	bl	800e7ac <HAL_RCCEx_GetPeriphCLKFreq>
 800fccc:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	699b      	ldr	r3, [r3, #24]
 800fcd2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800fcd6:	d120      	bne.n	800fd1a <HAL_SAI_Init+0x1d6>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcdc:	2b04      	cmp	r3, #4
 800fcde:	d102      	bne.n	800fce6 <HAL_SAI_Init+0x1a2>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800fce0:	2340      	movs	r3, #64	@ 0x40
 800fce2:	60fb      	str	r3, [r7, #12]
 800fce4:	e00a      	b.n	800fcfc <HAL_SAI_Init+0x1b8>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcea:	2b08      	cmp	r3, #8
 800fcec:	d103      	bne.n	800fcf6 <HAL_SAI_Init+0x1b2>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800fcee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	e002      	b.n	800fcfc <HAL_SAI_Init+0x1b8>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcfa:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800fcfc:	697a      	ldr	r2, [r7, #20]
 800fcfe:	4613      	mov	r3, r2
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	4413      	add	r3, r2
 800fd04:	005b      	lsls	r3, r3, #1
 800fd06:	4619      	mov	r1, r3
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a1b      	ldr	r3, [r3, #32]
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	fb02 f303 	mul.w	r3, r2, r3
 800fd12:	fbb1 f3f3 	udiv	r3, r1, r3
 800fd16:	613b      	str	r3, [r7, #16]
 800fd18:	e017      	b.n	800fd4a <HAL_SAI_Init+0x206>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fd22:	d101      	bne.n	800fd28 <HAL_SAI_Init+0x1e4>
 800fd24:	2302      	movs	r3, #2
 800fd26:	e000      	b.n	800fd2a <HAL_SAI_Init+0x1e6>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800fd2c:	697a      	ldr	r2, [r7, #20]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	4413      	add	r3, r2
 800fd34:	005b      	lsls	r3, r3, #1
 800fd36:	4619      	mov	r1, r3
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6a1b      	ldr	r3, [r3, #32]
 800fd3c:	68ba      	ldr	r2, [r7, #8]
 800fd3e:	fb02 f303 	mul.w	r3, r2, r3
 800fd42:	021b      	lsls	r3, r3, #8
 800fd44:	fbb1 f3f3 	udiv	r3, r1, r3
 800fd48:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	4a22      	ldr	r2, [pc, #136]	@ (800fdd8 <HAL_SAI_Init+0x294>)
 800fd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd52:	08da      	lsrs	r2, r3, #3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800fd58:	6939      	ldr	r1, [r7, #16]
 800fd5a:	4b1f      	ldr	r3, [pc, #124]	@ (800fdd8 <HAL_SAI_Init+0x294>)
 800fd5c:	fba3 2301 	umull	r2, r3, r3, r1
 800fd60:	08da      	lsrs	r2, r3, #3
 800fd62:	4613      	mov	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4413      	add	r3, r2
 800fd68:	005b      	lsls	r3, r3, #1
 800fd6a:	1aca      	subs	r2, r1, r3
 800fd6c:	2a08      	cmp	r2, #8
 800fd6e:	d904      	bls.n	800fd7a <HAL_SAI_Init+0x236>
    {
      hsai->Init.Mckdiv += 1U;
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd74:	1c5a      	adds	r2, r3, #1
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd7e:	2b04      	cmp	r3, #4
 800fd80:	d104      	bne.n	800fd8c <HAL_SAI_Init+0x248>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd86:	085a      	lsrs	r2, r3, #1
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d003      	beq.n	800fd9c <HAL_SAI_Init+0x258>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	2b02      	cmp	r3, #2
 800fd9a:	d109      	bne.n	800fdb0 <HAL_SAI_Init+0x26c>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d101      	bne.n	800fda8 <HAL_SAI_Init+0x264>
 800fda4:	2300      	movs	r3, #0
 800fda6:	e001      	b.n	800fdac <HAL_SAI_Init+0x268>
 800fda8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdac:	623b      	str	r3, [r7, #32]
 800fdae:	e017      	b.n	800fde0 <HAL_SAI_Init+0x29c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d111      	bne.n	800fddc <HAL_SAI_Init+0x298>
 800fdb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdbc:	e00f      	b.n	800fdde <HAL_SAI_Init+0x29a>
 800fdbe:	bf00      	nop
 800fdc0:	40015804 	.word	0x40015804
 800fdc4:	58005404 	.word	0x58005404
 800fdc8:	40015824 	.word	0x40015824
 800fdcc:	40015800 	.word	0x40015800
 800fdd0:	58005424 	.word	0x58005424
 800fdd4:	58005400 	.word	0x58005400
 800fdd8:	cccccccd 	.word	0xcccccccd
 800fddc:	2300      	movs	r3, #0
 800fdde:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	6819      	ldr	r1, [r3, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	4b5b      	ldr	r3, [pc, #364]	@ (800ff58 <HAL_SAI_Init+0x414>)
 800fdec:	400b      	ands	r3, r1
 800fdee:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	6819      	ldr	r1, [r3, #0]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	685a      	ldr	r2, [r3, #4]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdfe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fe04:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe0a:	431a      	orrs	r2, r3
 800fe0c:	6a3b      	ldr	r3, [r7, #32]
 800fe0e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800fe18:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	695b      	ldr	r3, [r3, #20]
 800fe1e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fe24:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe2a:	051b      	lsls	r3, r3, #20
 800fe2c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fe32:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	691b      	ldr	r3, [r3, #16]
 800fe38:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	430a      	orrs	r2, r1
 800fe40:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	6859      	ldr	r1, [r3, #4]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681a      	ldr	r2, [r3, #0]
 800fe4c:	4b43      	ldr	r3, [pc, #268]	@ (800ff5c <HAL_SAI_Init+0x418>)
 800fe4e:	400b      	ands	r3, r1
 800fe50:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	6859      	ldr	r1, [r3, #4]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	69da      	ldr	r2, [r3, #28]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe60:	431a      	orrs	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe66:	431a      	orrs	r2, r3
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	430a      	orrs	r2, r1
 800fe6e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	6899      	ldr	r1, [r3, #8]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681a      	ldr	r2, [r3, #0]
 800fe7a:	4b39      	ldr	r3, [pc, #228]	@ (800ff60 <HAL_SAI_Init+0x41c>)
 800fe7c:	400b      	ands	r3, r1
 800fe7e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	6899      	ldr	r1, [r3, #8]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe8a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fe90:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800fe96:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800fe9c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fea2:	3b01      	subs	r3, #1
 800fea4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800fea6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	430a      	orrs	r2, r1
 800feae:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	68d9      	ldr	r1, [r3, #12]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800febe:	400b      	ands	r3, r1
 800fec0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	68d9      	ldr	r1, [r3, #12]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fed0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fed6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fed8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fede:	3b01      	subs	r3, #1
 800fee0:	021b      	lsls	r3, r3, #8
 800fee2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	430a      	orrs	r2, r1
 800feea:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4a1c      	ldr	r2, [pc, #112]	@ (800ff64 <HAL_SAI_Init+0x420>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d004      	beq.n	800ff00 <HAL_SAI_Init+0x3bc>
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	4a1b      	ldr	r2, [pc, #108]	@ (800ff68 <HAL_SAI_Init+0x424>)
 800fefc:	4293      	cmp	r3, r2
 800fefe:	d119      	bne.n	800ff34 <HAL_SAI_Init+0x3f0>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800ff00:	69bb      	ldr	r3, [r7, #24]
 800ff02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff04:	f023 0201 	bic.w	r2, r3, #1
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d10e      	bne.n	800ff34 <HAL_SAI_Init+0x3f0>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff1e:	3b01      	subs	r3, #1
 800ff20:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800ff22:	431a      	orrs	r2, r3
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff2c:	f043 0201 	orr.w	r2, r3, #1
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2200      	movs	r2, #0
 800ff48:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ff4c:	2300      	movs	r3, #0
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3728      	adds	r7, #40	@ 0x28
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	f005c010 	.word	0xf005c010
 800ff5c:	ffff1ff0 	.word	0xffff1ff0
 800ff60:	fff88000 	.word	0xfff88000
 800ff64:	40015804 	.word	0x40015804
 800ff68:	58005404 	.word	0x58005404

0800ff6c <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800ff74:	bf00      	nop
 800ff76:	370c      	adds	r7, #12
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr

0800ff80 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	60f8      	str	r0, [r7, #12]
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800ff8e:	f7f7 f98b 	bl	80072a8 <HAL_GetTick>
 800ff92:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d002      	beq.n	800ffa0 <HAL_SAI_Transmit_DMA+0x20>
 800ff9a:	88fb      	ldrh	r3, [r7, #6]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d101      	bne.n	800ffa4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	e098      	b.n	80100d6 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	f040 8091 	bne.w	80100d4 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d101      	bne.n	800ffc0 <HAL_SAI_Transmit_DMA+0x40>
 800ffbc:	2302      	movs	r3, #2
 800ffbe:	e08a      	b.n	80100d6 <HAL_SAI_Transmit_DMA+0x156>
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	68ba      	ldr	r2, [r7, #8]
 800ffcc:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	88fa      	ldrh	r2, [r7, #6]
 800ffd2:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	88fa      	ldrh	r2, [r7, #6]
 800ffda:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2212      	movs	r2, #18
 800ffea:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fff4:	4a3a      	ldr	r2, [pc, #232]	@ (80100e0 <HAL_SAI_Transmit_DMA+0x160>)
 800fff6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fffe:	4a39      	ldr	r2, [pc, #228]	@ (80100e4 <HAL_SAI_Transmit_DMA+0x164>)
 8010000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010008:	4a37      	ldr	r2, [pc, #220]	@ (80100e8 <HAL_SAI_Transmit_DMA+0x168>)
 801000a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010012:	2200      	movs	r2, #0
 8010014:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010020:	4619      	mov	r1, r3
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	331c      	adds	r3, #28
 8010028:	461a      	mov	r2, r3
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8010030:	f7f8 fb70 	bl	8008714 <HAL_DMA_Start_IT>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d005      	beq.n	8010046 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2200      	movs	r2, #0
 801003e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8010042:	2301      	movs	r3, #1
 8010044:	e047      	b.n	80100d6 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010046:	2100      	movs	r1, #0
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f000 fa17 	bl	801047c <SAI_InterruptFlag>
 801004e:	4601      	mov	r1, r0
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	691a      	ldr	r2, [r3, #16]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	430a      	orrs	r2, r1
 801005c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801006c:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801006e:	e015      	b.n	801009c <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8010070:	f7f7 f91a 	bl	80072a8 <HAL_GetTick>
 8010074:	4602      	mov	r2, r0
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	1ad3      	subs	r3, r2, r3
 801007a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801007e:	d90d      	bls.n	801009c <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010086:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2200      	movs	r2, #0
 8010094:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 8010098:	2303      	movs	r3, #3
 801009a:	e01c      	b.n	80100d6 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	695b      	ldr	r3, [r3, #20]
 80100a2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d0e2      	beq.n	8010070 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d107      	bne.n	80100c8 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80100c6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2200      	movs	r2, #0
 80100cc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80100d0:	2300      	movs	r3, #0
 80100d2:	e000      	b.n	80100d6 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 80100d4:	2302      	movs	r3, #2
  }
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3718      	adds	r7, #24
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	080105c1 	.word	0x080105c1
 80100e4:	08010561 	.word	0x08010561
 80100e8:	08010659 	.word	0x08010659

080100ec <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	4613      	mov	r3, r2
 80100f8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <HAL_SAI_Receive_DMA+0x1a>
 8010100:	88fb      	ldrh	r3, [r7, #6]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d101      	bne.n	801010a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8010106:	2301      	movs	r3, #1
 8010108:	e079      	b.n	80101fe <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8010110:	b2db      	uxtb	r3, r3
 8010112:	2b01      	cmp	r3, #1
 8010114:	d172      	bne.n	80101fc <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801011c:	2b01      	cmp	r3, #1
 801011e:	d101      	bne.n	8010124 <HAL_SAI_Receive_DMA+0x38>
 8010120:	2302      	movs	r3, #2
 8010122:	e06c      	b.n	80101fe <HAL_SAI_Receive_DMA+0x112>
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	68ba      	ldr	r2, [r7, #8]
 8010130:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	88fa      	ldrh	r2, [r7, #6]
 8010136:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	88fa      	ldrh	r2, [r7, #6]
 801013e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2200      	movs	r2, #0
 8010146:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2222      	movs	r2, #34	@ 0x22
 801014e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010158:	4a2b      	ldr	r2, [pc, #172]	@ (8010208 <HAL_SAI_Receive_DMA+0x11c>)
 801015a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010162:	4a2a      	ldr	r2, [pc, #168]	@ (801020c <HAL_SAI_Receive_DMA+0x120>)
 8010164:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801016c:	4a28      	ldr	r2, [pc, #160]	@ (8010210 <HAL_SAI_Receive_DMA+0x124>)
 801016e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010176:	2200      	movs	r2, #0
 8010178:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	331c      	adds	r3, #28
 8010186:	4619      	mov	r1, r3
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801018c:	461a      	mov	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8010194:	f7f8 fabe 	bl	8008714 <HAL_DMA_Start_IT>
 8010198:	4603      	mov	r3, r0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d005      	beq.n	80101aa <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2200      	movs	r2, #0
 80101a2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 80101a6:	2301      	movs	r3, #1
 80101a8:	e029      	b.n	80101fe <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80101aa:	2100      	movs	r1, #0
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f000 f965 	bl	801047c <SAI_InterruptFlag>
 80101b2:	4601      	mov	r1, r0
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	691a      	ldr	r2, [r3, #16]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	430a      	orrs	r2, r1
 80101c0:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80101d0:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d107      	bne.n	80101f0 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80101ee:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80101f8:	2300      	movs	r3, #0
 80101fa:	e000      	b.n	80101fe <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80101fc:	2302      	movs	r3, #2
  }
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	0801063d 	.word	0x0801063d
 801020c:	080105dd 	.word	0x080105dd
 8010210:	08010659 	.word	0x08010659

08010214 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010214:	b480      	push	{r7}
 8010216:	b087      	sub	sp, #28
 8010218:	af00      	add	r7, sp, #0
 801021a:	60f8      	str	r0, [r7, #12]
 801021c:	60b9      	str	r1, [r7, #8]
 801021e:	607a      	str	r2, [r7, #4]
 8010220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010222:	2300      	movs	r3, #0
 8010224:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2200      	movs	r2, #0
 801022a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d003      	beq.n	8010242 <SAI_InitI2S+0x2e>
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	2b02      	cmp	r3, #2
 8010240:	d103      	bne.n	801024a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2200      	movs	r2, #0
 8010246:	651a      	str	r2, [r3, #80]	@ 0x50
 8010248:	e002      	b.n	8010250 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2201      	movs	r2, #1
 801024e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8010256:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801025e:	675a      	str	r2, [r3, #116]	@ 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2200      	movs	r2, #0
 8010264:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	f003 0301 	and.w	r3, r3, #1
 8010272:	2b00      	cmp	r3, #0
 8010274:	d001      	beq.n	801027a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8010276:	2301      	movs	r3, #1
 8010278:	e077      	b.n	801036a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d107      	bne.n	8010290 <SAI_InitI2S+0x7c>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2200      	movs	r2, #0
 8010284:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801028c:	665a      	str	r2, [r3, #100]	@ 0x64
 801028e:	e006      	b.n	801029e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8010296:	661a      	str	r2, [r3, #96]	@ 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2200      	movs	r2, #0
 801029c:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Frame definition */
  switch (datasize)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b03      	cmp	r3, #3
 80102a2:	d84f      	bhi.n	8010344 <SAI_InitI2S+0x130>
 80102a4:	a201      	add	r2, pc, #4	@ (adr r2, 80102ac <SAI_InitI2S+0x98>)
 80102a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102aa:	bf00      	nop
 80102ac:	080102bd 	.word	0x080102bd
 80102b0:	080102df 	.word	0x080102df
 80102b4:	08010301 	.word	0x08010301
 80102b8:	08010323 	.word	0x08010323
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2280      	movs	r2, #128	@ 0x80
 80102c0:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	085b      	lsrs	r3, r3, #1
 80102c6:	015a      	lsls	r2, r3, #5
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	085b      	lsrs	r3, r3, #1
 80102d0:	011a      	lsls	r2, r3, #4
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2240      	movs	r2, #64	@ 0x40
 80102da:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80102dc:	e035      	b.n	801034a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2280      	movs	r2, #128	@ 0x80
 80102e2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	085b      	lsrs	r3, r3, #1
 80102e8:	019a      	lsls	r2, r3, #6
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	085b      	lsrs	r3, r3, #1
 80102f2:	015a      	lsls	r2, r3, #5
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2280      	movs	r2, #128	@ 0x80
 80102fc:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 80102fe:	e024      	b.n	801034a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	22c0      	movs	r2, #192	@ 0xc0
 8010304:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	085b      	lsrs	r3, r3, #1
 801030a:	019a      	lsls	r2, r3, #6
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	085b      	lsrs	r3, r3, #1
 8010314:	015a      	lsls	r2, r3, #5
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2280      	movs	r2, #128	@ 0x80
 801031e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010320:	e013      	b.n	801034a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	22e0      	movs	r2, #224	@ 0xe0
 8010326:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	085b      	lsrs	r3, r3, #1
 801032c:	019a      	lsls	r2, r3, #6
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	085b      	lsrs	r3, r3, #1
 8010336:	015a      	lsls	r2, r3, #5
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	659a      	str	r2, [r3, #88]	@ 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2280      	movs	r2, #128	@ 0x80
 8010340:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010342:	e002      	b.n	801034a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8010344:	2301      	movs	r3, #1
 8010346:	75fb      	strb	r3, [r7, #23]
      break;
 8010348:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	2b02      	cmp	r3, #2
 801034e:	d10b      	bne.n	8010368 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b01      	cmp	r3, #1
 8010354:	d102      	bne.n	801035c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2210      	movs	r2, #16
 801035a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2b02      	cmp	r3, #2
 8010360:	d102      	bne.n	8010368 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2208      	movs	r2, #8
 8010366:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }
  return status;
 8010368:	7dfb      	ldrb	r3, [r7, #23]
}
 801036a:	4618      	mov	r0, r3
 801036c:	371c      	adds	r7, #28
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop

08010378 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8010378:	b480      	push	{r7}
 801037a:	b087      	sub	sp, #28
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]
 8010384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010386:	2300      	movs	r3, #0
 8010388:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2200      	movs	r2, #0
 801038e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2200      	movs	r2, #0
 8010394:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d003      	beq.n	80103a6 <SAI_InitPCM+0x2e>
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	d103      	bne.n	80103ae <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2201      	movs	r2, #1
 80103aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80103ac:	e002      	b.n	80103b4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2200      	movs	r2, #0
 80103b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80103c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80103c8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2200      	movs	r2, #0
 80103ce:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	683a      	ldr	r2, [r7, #0]
 80103d4:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80103dc:	675a      	str	r2, [r3, #116]	@ 0x74

  if (protocol == SAI_PCM_SHORT)
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2b04      	cmp	r3, #4
 80103e2:	d103      	bne.n	80103ec <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2201      	movs	r2, #1
 80103e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80103ea:	e002      	b.n	80103f2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	220d      	movs	r2, #13
 80103f0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  switch (datasize)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2b03      	cmp	r3, #3
 80103f6:	d837      	bhi.n	8010468 <SAI_InitPCM+0xf0>
 80103f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010400 <SAI_InitPCM+0x88>)
 80103fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103fe:	bf00      	nop
 8010400:	08010411 	.word	0x08010411
 8010404:	08010427 	.word	0x08010427
 8010408:	0801043d 	.word	0x0801043d
 801040c:	08010453 	.word	0x08010453
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2280      	movs	r2, #128	@ 0x80
 8010414:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	011a      	lsls	r2, r3, #4
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2240      	movs	r2, #64	@ 0x40
 8010422:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010424:	e023      	b.n	801046e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2280      	movs	r2, #128	@ 0x80
 801042a:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	015a      	lsls	r2, r3, #5
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	2280      	movs	r2, #128	@ 0x80
 8010438:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 801043a:	e018      	b.n	801046e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	22c0      	movs	r2, #192	@ 0xc0
 8010440:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	015a      	lsls	r2, r3, #5
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2280      	movs	r2, #128	@ 0x80
 801044e:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010450:	e00d      	b.n	801046e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	22e0      	movs	r2, #224	@ 0xe0
 8010456:	649a      	str	r2, [r3, #72]	@ 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	015a      	lsls	r2, r3, #5
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2280      	movs	r2, #128	@ 0x80
 8010464:	66da      	str	r2, [r3, #108]	@ 0x6c
      break;
 8010466:	e002      	b.n	801046e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8010468:	2301      	movs	r3, #1
 801046a:	75fb      	strb	r3, [r7, #23]
      break;
 801046c:	bf00      	nop
  }

  return status;
 801046e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010470:	4618      	mov	r0, r3
 8010472:	371c      	adds	r7, #28
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 801047c:	b480      	push	{r7}
 801047e:	b085      	sub	sp, #20
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
 8010484:	460b      	mov	r3, r1
 8010486:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8010488:	2301      	movs	r3, #1
 801048a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 801048c:	78fb      	ldrb	r3, [r7, #3]
 801048e:	2b01      	cmp	r3, #1
 8010490:	d103      	bne.n	801049a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f043 0308 	orr.w	r3, r3, #8
 8010498:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801049e:	2b08      	cmp	r3, #8
 80104a0:	d10b      	bne.n	80104ba <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80104a6:	2b03      	cmp	r3, #3
 80104a8:	d003      	beq.n	80104b2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	685b      	ldr	r3, [r3, #4]
 80104ae:	2b01      	cmp	r3, #1
 80104b0:	d103      	bne.n	80104ba <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f043 0310 	orr.w	r3, r3, #16
 80104b8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	2b03      	cmp	r3, #3
 80104c0:	d003      	beq.n	80104ca <SAI_InterruptFlag+0x4e>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d104      	bne.n	80104d4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80104d0:	60fb      	str	r3, [r7, #12]
 80104d2:	e003      	b.n	80104dc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f043 0304 	orr.w	r3, r3, #4
 80104da:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80104dc:	68fb      	ldr	r3, [r7, #12]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3714      	adds	r7, #20
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
	...

080104ec <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b085      	sub	sp, #20
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80104f4:	4b18      	ldr	r3, [pc, #96]	@ (8010558 <SAI_Disable+0x6c>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	4a18      	ldr	r2, [pc, #96]	@ (801055c <SAI_Disable+0x70>)
 80104fa:	fba2 2303 	umull	r2, r3, r2, r3
 80104fe:	0b1b      	lsrs	r3, r3, #12
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010504:	2300      	movs	r3, #0
 8010506:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8010516:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d10a      	bne.n	8010534 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010524:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 801052e:	2303      	movs	r3, #3
 8010530:	72fb      	strb	r3, [r7, #11]
      break;
 8010532:	e009      	b.n	8010548 <SAI_Disable+0x5c>
    }
    count--;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	3b01      	subs	r3, #1
 8010538:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010544:	2b00      	cmp	r3, #0
 8010546:	d1e7      	bne.n	8010518 <SAI_Disable+0x2c>

  return status;
 8010548:	7afb      	ldrb	r3, [r7, #11]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3714      	adds	r7, #20
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	24000524 	.word	0x24000524
 801055c:	95cbec1b 	.word	0x95cbec1b

08010560 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801056c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	69db      	ldr	r3, [r3, #28]
 8010572:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010576:	d01c      	beq.n	80105b2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2200      	movs	r2, #0
 801057c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801058e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010590:	2100      	movs	r1, #0
 8010592:	68f8      	ldr	r0, [r7, #12]
 8010594:	f7ff ff72 	bl	801047c <SAI_InterruptFlag>
 8010598:	4603      	mov	r3, r0
 801059a:	43d9      	mvns	r1, r3
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	691a      	ldr	r2, [r3, #16]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	400a      	ands	r2, r1
 80105a8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2201      	movs	r2, #1
 80105ae:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80105b2:	68f8      	ldr	r0, [r7, #12]
 80105b4:	f7f2 f960 	bl	8002878 <HAL_SAI_TxCpltCallback>
#endif
}
 80105b8:	bf00      	nop
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f7f2 f95d 	bl	800288e <HAL_SAI_TxHalfCpltCallback>
#endif
}
 80105d4:	bf00      	nop
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105e8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	69db      	ldr	r3, [r3, #28]
 80105ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105f2:	d01c      	beq.n	801062e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8010602:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2200      	movs	r2, #0
 8010608:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801060c:	2100      	movs	r1, #0
 801060e:	68f8      	ldr	r0, [r7, #12]
 8010610:	f7ff ff34 	bl	801047c <SAI_InterruptFlag>
 8010614:	4603      	mov	r3, r0
 8010616:	43d9      	mvns	r1, r3
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	691a      	ldr	r2, [r3, #16]
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	400a      	ands	r2, r1
 8010624:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2201      	movs	r2, #1
 801062a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	f7f4 fa51 	bl	8004ad6 <HAL_SAI_RxCpltCallback>
#endif
}
 8010634:	bf00      	nop
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010648:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 801064a:	68f8      	ldr	r0, [r7, #12]
 801064c:	f7f4 fa38 	bl	8004ac0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8010650:	bf00      	nop
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010664:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7f9 f9e8 	bl	8009a3c <HAL_DMA_GetError>
 801066c:	4603      	mov	r3, r0
 801066e:	2b02      	cmp	r3, #2
 8010670:	d01d      	beq.n	80106ae <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010678:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8010690:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8010692:	68f8      	ldr	r0, [r7, #12]
 8010694:	f7ff ff2a 	bl	80104ec <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2201      	movs	r2, #1
 801069c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2200      	movs	r2, #0
 80106a4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f7f2 f8fb 	bl	80028a4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 80106ae:	bf00      	nop
 80106b0:	3710      	adds	r7, #16
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
	...

080106b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b084      	sub	sp, #16
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d008      	beq.n	80106e6 <HAL_SD_IRQHandler+0x2e>
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f003 0308 	and.w	r3, r3, #8
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d003      	beq.n	80106e6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f000 f9ac 	bl	8010a3c <SD_Read_IT>
 80106e4:	e19a      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f000 80ac 	beq.w	801084e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80106fe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	4b59      	ldr	r3, [pc, #356]	@ (8010870 <HAL_SD_IRQHandler+0x1b8>)
 801070c:	400b      	ands	r3, r1
 801070e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801071e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	68da      	ldr	r2, [r3, #12]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801072e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f003 0308 	and.w	r3, r3, #8
 8010736:	2b00      	cmp	r3, #0
 8010738:	d038      	beq.n	80107ac <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f003 0302 	and.w	r3, r3, #2
 8010740:	2b00      	cmp	r3, #0
 8010742:	d104      	bne.n	801074e <HAL_SD_IRQHandler+0x96>
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f003 0320 	and.w	r3, r3, #32
 801074a:	2b00      	cmp	r3, #0
 801074c:	d011      	beq.n	8010772 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	4618      	mov	r0, r3
 8010754:	f000 fa92 	bl	8010c7c <SDMMC_CmdStopTransfer>
 8010758:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d008      	beq.n	8010772 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	431a      	orrs	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f000 f95b 	bl	8010a28 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4a3f      	ldr	r2, [pc, #252]	@ (8010874 <HAL_SD_IRQHandler+0x1bc>)
 8010778:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2201      	movs	r2, #1
 801077e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b00      	cmp	r3, #0
 8010790:	d104      	bne.n	801079c <HAL_SD_IRQHandler+0xe4>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f003 0302 	and.w	r3, r3, #2
 8010798:	2b00      	cmp	r3, #0
 801079a:	d003      	beq.n	80107a4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7f6 fcc3 	bl	8007128 <HAL_SD_RxCpltCallback>
 80107a2:	e13b      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7f6 fcab 	bl	8007100 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80107aa:	e137      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f000 8132 	beq.w	8010a1c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	2200      	movs	r2, #0
 80107be:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	2200      	movs	r2, #0
 80107c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2200      	movs	r2, #0
 80107ce:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	f003 0302 	and.w	r3, r3, #2
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d104      	bne.n	80107e4 <HAL_SD_IRQHandler+0x12c>
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f003 0320 	and.w	r3, r3, #32
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d011      	beq.n	8010808 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	4618      	mov	r0, r3
 80107ea:	f000 fa47 	bl	8010c7c <SDMMC_CmdStopTransfer>
 80107ee:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d008      	beq.n	8010808 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	431a      	orrs	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 f910 	bl	8010a28 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2201      	movs	r2, #1
 801080c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f003 0310 	and.w	r3, r3, #16
 801081c:	2b00      	cmp	r3, #0
 801081e:	d104      	bne.n	801082a <HAL_SD_IRQHandler+0x172>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f003 0320 	and.w	r3, r3, #32
 8010826:	2b00      	cmp	r3, #0
 8010828:	d002      	beq.n	8010830 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f7f6 fc68 	bl	8007100 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f003 0301 	and.w	r3, r3, #1
 8010836:	2b00      	cmp	r3, #0
 8010838:	d105      	bne.n	8010846 <HAL_SD_IRQHandler+0x18e>
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f003 0302 	and.w	r3, r3, #2
 8010840:	2b00      	cmp	r3, #0
 8010842:	f000 80eb 	beq.w	8010a1c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f7f6 fc6e 	bl	8007128 <HAL_SD_RxCpltCallback>
}
 801084c:	e0e6      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00d      	beq.n	8010878 <HAL_SD_IRQHandler+0x1c0>
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	f003 0308 	and.w	r3, r3, #8
 8010862:	2b00      	cmp	r3, #0
 8010864:	d008      	beq.n	8010878 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 f92e 	bl	8010ac8 <SD_Write_IT>
 801086c:	e0d6      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
 801086e:	bf00      	nop
 8010870:	ffff3ec5 	.word	0xffff3ec5
 8010874:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801087e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8010882:	2b00      	cmp	r3, #0
 8010884:	f000 809d 	beq.w	80109c2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801088e:	f003 0302 	and.w	r3, r3, #2
 8010892:	2b00      	cmp	r3, #0
 8010894:	d005      	beq.n	80108a2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801089a:	f043 0202 	orr.w	r2, r3, #2
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108a8:	f003 0308 	and.w	r3, r3, #8
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d005      	beq.n	80108bc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108b4:	f043 0208 	orr.w	r2, r3, #8
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108c2:	f003 0320 	and.w	r3, r3, #32
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d005      	beq.n	80108d6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108ce:	f043 0220 	orr.w	r2, r3, #32
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108dc:	f003 0310 	and.w	r3, r3, #16
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d005      	beq.n	80108f0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108e8:	f043 0210 	orr.w	r2, r3, #16
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	4a4b      	ldr	r2, [pc, #300]	@ (8010a24 <HAL_SD_IRQHandler+0x36c>)
 80108f6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8010906:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	68da      	ldr	r2, [r3, #12]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010916:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010926:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68da      	ldr	r2, [r3, #12]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010936:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	4618      	mov	r0, r3
 801093e:	f000 f99d 	bl	8010c7c <SDMMC_CmdStopTransfer>
 8010942:	4602      	mov	r2, r0
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010948:	431a      	orrs	r2, r3
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	68da      	ldr	r2, [r3, #12]
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801095c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010966:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	f003 0308 	and.w	r3, r3, #8
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00a      	beq.n	8010988 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2201      	movs	r2, #1
 8010976:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f851 	bl	8010a28 <HAL_SD_ErrorCallback>
}
 8010986:	e049      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801098e:	2b00      	cmp	r3, #0
 8010990:	d044      	beq.n	8010a1c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010996:	2b00      	cmp	r3, #0
 8010998:	d040      	beq.n	8010a1c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80109a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2200      	movs	r2, #0
 80109b0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2201      	movs	r2, #1
 80109b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 f834 	bl	8010a28 <HAL_SD_ErrorCallback>
}
 80109c0:	e02c      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80109c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d025      	beq.n	8010a1c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109d8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109e0:	f003 0304 	and.w	r3, r3, #4
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d10c      	bne.n	8010a02 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f003 0320 	and.w	r3, r3, #32
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d003      	beq.n	80109fa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f8d0 	bl	8010b98 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80109f8:	e010      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80109fa:	6878      	ldr	r0, [r7, #4]
 80109fc:	f000 f8b8 	bl	8010b70 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8010a00:	e00c      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f003 0320 	and.w	r3, r3, #32
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d003      	beq.n	8010a14 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f000 f8b9 	bl	8010b84 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8010a12:	e003      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 f8a1 	bl	8010b5c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8010a1a:	e7ff      	b.n	8010a1c <HAL_SD_IRQHandler+0x364>
 8010a1c:	bf00      	nop
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	18000f3a 	.word	0x18000f3a

08010a28 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a48:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a4e:	2b1f      	cmp	r3, #31
 8010a50:	d936      	bls.n	8010ac0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8010a52:	2300      	movs	r3, #0
 8010a54:	617b      	str	r3, [r7, #20]
 8010a56:	e027      	b.n	8010aa8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f000 f8a5 	bl	8010bac <SDMMC_ReadFIFO>
 8010a62:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	0a1b      	lsrs	r3, r3, #8
 8010a76:	b2da      	uxtb	r2, r3
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	3301      	adds	r3, #1
 8010a80:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	0c1b      	lsrs	r3, r3, #16
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	3301      	adds	r3, #1
 8010a90:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	0e1b      	lsrs	r3, r3, #24
 8010a96:	b2da      	uxtb	r2, r3
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	617b      	str	r3, [r7, #20]
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	2b07      	cmp	r3, #7
 8010aac:	d9d4      	bls.n	8010a58 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	693a      	ldr	r2, [r7, #16]
 8010ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ab8:	f1a3 0220 	sub.w	r2, r3, #32
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8010ac0:	bf00      	nop
 8010ac2:	3718      	adds	r7, #24
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}

08010ac8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	69db      	ldr	r3, [r3, #28]
 8010ad4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6a1b      	ldr	r3, [r3, #32]
 8010ada:	2b1f      	cmp	r3, #31
 8010adc:	d93a      	bls.n	8010b54 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8010ade:	2300      	movs	r3, #0
 8010ae0:	617b      	str	r3, [r7, #20]
 8010ae2:	e02b      	b.n	8010b3c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010aea:	693b      	ldr	r3, [r7, #16]
 8010aec:	3301      	adds	r3, #1
 8010aee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8010af0:	693b      	ldr	r3, [r7, #16]
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	021a      	lsls	r2, r3, #8
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	4313      	orrs	r3, r2
 8010afa:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	3301      	adds	r3, #1
 8010b00:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	041a      	lsls	r2, r3, #16
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	4313      	orrs	r3, r2
 8010b0c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	3301      	adds	r3, #1
 8010b12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	061a      	lsls	r2, r3, #24
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	3301      	adds	r3, #1
 8010b24:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	f107 020c 	add.w	r2, r7, #12
 8010b2e:	4611      	mov	r1, r2
 8010b30:	4618      	mov	r0, r3
 8010b32:	f000 f848 	bl	8010bc6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	617b      	str	r3, [r7, #20]
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	2b07      	cmp	r3, #7
 8010b40:	d9d0      	bls.n	8010ae4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	693a      	ldr	r2, [r7, #16]
 8010b46:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6a1b      	ldr	r3, [r3, #32]
 8010b4c:	f1a3 0220 	sub.w	r2, r3, #32
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	621a      	str	r2, [r3, #32]
  }
}
 8010b54:	bf00      	nop
 8010b56:	3718      	adds	r7, #24
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b083      	sub	sp, #12
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8010b64:	bf00      	nop
 8010b66:	370c      	adds	r7, #12
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b083      	sub	sp, #12
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8010b78:	bf00      	nop
 8010b7a:	370c      	adds	r7, #12
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr

08010b84 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8010b8c:	bf00      	nop
 8010b8e:	370c      	adds	r7, #12
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b083      	sub	sp, #12
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8010ba0:	bf00      	nop
 8010ba2:	370c      	adds	r7, #12
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010baa:	4770      	bx	lr

08010bac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b083      	sub	sp, #12
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	370c      	adds	r7, #12
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr

08010bc6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010bc6:	b480      	push	{r7}
 8010bc8:	b083      	sub	sp, #12
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	6078      	str	r0, [r7, #4]
 8010bce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010bda:	2300      	movs	r3, #0
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	370c      	adds	r7, #12
 8010be0:	46bd      	mov	sp, r7
 8010be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be6:	4770      	bx	lr

08010be8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010be8:	b480      	push	{r7}
 8010bea:	b085      	sub	sp, #20
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
 8010bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010c06:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010c0c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8010c12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	4313      	orrs	r3, r2
 8010c18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	68da      	ldr	r2, [r3, #12]
 8010c1e:	4b06      	ldr	r3, [pc, #24]	@ (8010c38 <SDMMC_SendCommand+0x50>)
 8010c20:	4013      	ands	r3, r2
 8010c22:	68fa      	ldr	r2, [r7, #12]
 8010c24:	431a      	orrs	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010c2a:	2300      	movs	r3, #0
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3714      	adds	r7, #20
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr
 8010c38:	fffee0c0 	.word	0xfffee0c0

08010c3c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	691b      	ldr	r3, [r3, #16]
 8010c48:	b2db      	uxtb	r3, r3
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	370c      	adds	r7, #12
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010c56:	b480      	push	{r7}
 8010c58:	b085      	sub	sp, #20
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	3314      	adds	r3, #20
 8010c64:	461a      	mov	r2, r3
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	4413      	add	r3, r2
 8010c6a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b088      	sub	sp, #32
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010c84:	2300      	movs	r3, #0
 8010c86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010c88:	230c      	movs	r3, #12
 8010c8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c92:	2300      	movs	r3, #0
 8010c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c9a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cb4:	f107 0308 	add.w	r3, r7, #8
 8010cb8:	4619      	mov	r1, r3
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f7ff ff94 	bl	8010be8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8010cf0 <SDMMC_CmdStopTransfer+0x74>)
 8010cc2:	210c      	movs	r1, #12
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 f815 	bl	8010cf4 <SDMMC_GetCmdResp1>
 8010cca:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010cde:	d101      	bne.n	8010ce4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010ce4:	69fb      	ldr	r3, [r7, #28]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3720      	adds	r7, #32
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	05f5e100 	.word	0x05f5e100

08010cf4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b088      	sub	sp, #32
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	460b      	mov	r3, r1
 8010cfe:	607a      	str	r2, [r7, #4]
 8010d00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d02:	4b70      	ldr	r3, [pc, #448]	@ (8010ec4 <SDMMC_GetCmdResp1+0x1d0>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4a70      	ldr	r2, [pc, #448]	@ (8010ec8 <SDMMC_GetCmdResp1+0x1d4>)
 8010d08:	fba2 2303 	umull	r2, r3, r2, r3
 8010d0c:	0a5a      	lsrs	r2, r3, #9
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	fb02 f303 	mul.w	r3, r2, r3
 8010d14:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	1e5a      	subs	r2, r3, #1
 8010d1a:	61fa      	str	r2, [r7, #28]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d102      	bne.n	8010d26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010d24:	e0c9      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d2a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010d2c:	69ba      	ldr	r2, [r7, #24]
 8010d2e:	4b67      	ldr	r3, [pc, #412]	@ (8010ecc <SDMMC_GetCmdResp1+0x1d8>)
 8010d30:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d0ef      	beq.n	8010d16 <SDMMC_GetCmdResp1+0x22>
 8010d36:	69bb      	ldr	r3, [r7, #24]
 8010d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1ea      	bne.n	8010d16 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d44:	f003 0304 	and.w	r3, r3, #4
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d004      	beq.n	8010d56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2204      	movs	r2, #4
 8010d50:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d52:	2304      	movs	r3, #4
 8010d54:	e0b1      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d5a:	f003 0301 	and.w	r3, r3, #1
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d004      	beq.n	8010d6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2201      	movs	r2, #1
 8010d66:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	e0a6      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	4a58      	ldr	r2, [pc, #352]	@ (8010ed0 <SDMMC_GetCmdResp1+0x1dc>)
 8010d70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010d72:	68f8      	ldr	r0, [r7, #12]
 8010d74:	f7ff ff62 	bl	8010c3c <SDMMC_GetCommandResponse>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	7afb      	ldrb	r3, [r7, #11]
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d001      	beq.n	8010d86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d82:	2301      	movs	r3, #1
 8010d84:	e099      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010d86:	2100      	movs	r1, #0
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f7ff ff64 	bl	8010c56 <SDMMC_GetResponse>
 8010d8e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	4b50      	ldr	r3, [pc, #320]	@ (8010ed4 <SDMMC_GetCmdResp1+0x1e0>)
 8010d94:	4013      	ands	r3, r2
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d101      	bne.n	8010d9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	e08d      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	da02      	bge.n	8010daa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010da4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010da8:	e087      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d001      	beq.n	8010db8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010db4:	2340      	movs	r3, #64	@ 0x40
 8010db6:	e080      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d001      	beq.n	8010dc6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010dc2:	2380      	movs	r3, #128	@ 0x80
 8010dc4:	e079      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010dd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010dd4:	e071      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d002      	beq.n	8010de6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010de0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010de4:	e069      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010df4:	e061      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d002      	beq.n	8010e06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010e04:	e059      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e14:	e051      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010e24:	e049      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d002      	beq.n	8010e36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010e34:	e041      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e36:	697b      	ldr	r3, [r7, #20]
 8010e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010e44:	e039      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010e54:	e031      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d002      	beq.n	8010e66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010e64:	e029      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010e70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010e74:	e021      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010e80:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010e84:	e019      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e86:	697b      	ldr	r3, [r7, #20]
 8010e88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d002      	beq.n	8010e96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010e90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010e94:	e011      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ea0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010ea4:	e009      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	f003 0308 	and.w	r3, r3, #8
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010eb0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010eb4:	e001      	b.n	8010eba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010eb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3720      	adds	r7, #32
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	24000524 	.word	0x24000524
 8010ec8:	10624dd3 	.word	0x10624dd3
 8010ecc:	00200045 	.word	0x00200045
 8010ed0:	002000c5 	.word	0x002000c5
 8010ed4:	fdffe008 	.word	0xfdffe008

08010ed8 <lab_init>:
/*
This function will be called once before beginning the main program loop.
This is the best place to build a lookup table.
*/
void lab_init(int16_t* output_buffer)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
	w0 = M_PI / 8.0;
 8010ee0:	4b12      	ldr	r3, [pc, #72]	@ (8010f2c <lab_init+0x54>)
 8010ee2:	4a13      	ldr	r2, [pc, #76]	@ (8010f30 <lab_init+0x58>)
 8010ee4:	601a      	str	r2, [r3, #0]
	coeff1 = 2.0 * arm_cos_f32(w0);
 8010ee6:	4b11      	ldr	r3, [pc, #68]	@ (8010f2c <lab_init+0x54>)
 8010ee8:	edd3 7a00 	vldr	s15, [r3]
 8010eec:	eeb0 0a67 	vmov.f32	s0, s15
 8010ef0:	f003 ff28 	bl	8014d44 <arm_cos_f32>
 8010ef4:	eef0 7a40 	vmov.f32	s15, s0
 8010ef8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010efc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010f04:	4b0b      	ldr	r3, [pc, #44]	@ (8010f34 <lab_init+0x5c>)
 8010f06:	edc3 7a00 	vstr	s15, [r3]
	coeff2 = arm_sin_f32(w0);
 8010f0a:	4b08      	ldr	r3, [pc, #32]	@ (8010f2c <lab_init+0x54>)
 8010f0c:	edd3 7a00 	vldr	s15, [r3]
 8010f10:	eeb0 0a67 	vmov.f32	s0, s15
 8010f14:	f003 fed0 	bl	8014cb8 <arm_sin_f32>
 8010f18:	eef0 7a40 	vmov.f32	s15, s0
 8010f1c:	4b06      	ldr	r3, [pc, #24]	@ (8010f38 <lab_init+0x60>)
 8010f1e:	edc3 7a00 	vstr	s15, [r3]
//	coeff2 = (arm_cos_f32(w0));
	return;
 8010f22:	bf00      	nop
}
 8010f24:	3708      	adds	r7, #8
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	24005b74 	.word	0x24005b74
 8010f30:	3ec90fdb 	.word	0x3ec90fdb
 8010f34:	24005b78 	.word	0x24005b78
 8010f38:	24005b7c 	.word	0x24005b7c

08010f3c <process_input_buffer>:
	2. Combine the two channels (by addition) into one signal
	3. Save the result to the fft_in buffer which will be used for the display
	4. The original audio buffer is left unchanged (passthrough)
*/
void process_input_buffer(int16_t* input_buffer)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b084      	sub	sp, #16
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
	int16_t left_sample;
	int16_t right_sample;
	for (uint32_t i_sample = 0; i_sample < FRAME_SIZE/2; i_sample+=1)
 8010f44:	2300      	movs	r3, #0
 8010f46:	60fb      	str	r3, [r7, #12]
 8010f48:	e02a      	b.n	8010fa0 <process_input_buffer+0x64>
	{
		left_sample = input_buffer[i_sample];
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	4413      	add	r3, r2
 8010f52:	881b      	ldrh	r3, [r3, #0]
 8010f54:	817b      	strh	r3, [r7, #10]
		i_sample +=1;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	60fb      	str	r3, [r7, #12]
		right_sample = input_buffer[i_sample];
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	005b      	lsls	r3, r3, #1
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	4413      	add	r3, r2
 8010f64:	881b      	ldrh	r3, [r3, #0]
 8010f66:	813b      	strh	r3, [r7, #8]
		fft_in[i_sample/2] =  (((float32_t) left_sample) + ((float32_t) right_sample))/2;
 8010f68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010f6c:	ee07 3a90 	vmov	s15, r3
 8010f70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010f74:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010f78:	ee07 3a90 	vmov	s15, r3
 8010f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	085b      	lsrs	r3, r3, #1
 8010f88:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f90:	4a0d      	ldr	r2, [pc, #52]	@ (8010fc8 <process_input_buffer+0x8c>)
 8010f92:	009b      	lsls	r3, r3, #2
 8010f94:	4413      	add	r3, r2
 8010f96:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i_sample = 0; i_sample < FRAME_SIZE/2; i_sample+=1)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	60fb      	str	r3, [r7, #12]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010fa6:	d3d0      	bcc.n	8010f4a <process_input_buffer+0xe>
	}
	arm_rfft_fast_f32(&fft_inst, fft_in, fft_out, 0);
 8010fa8:	2300      	movs	r3, #0
 8010faa:	4a08      	ldr	r2, [pc, #32]	@ (8010fcc <process_input_buffer+0x90>)
 8010fac:	4906      	ldr	r1, [pc, #24]	@ (8010fc8 <process_input_buffer+0x8c>)
 8010fae:	4808      	ldr	r0, [pc, #32]	@ (8010fd0 <process_input_buffer+0x94>)
 8010fb0:	f003 f978 	bl	80142a4 <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(fft_out, fft_mag, FRAME_SIZE/8);
 8010fb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8010fb8:	4906      	ldr	r1, [pc, #24]	@ (8010fd4 <process_input_buffer+0x98>)
 8010fba:	4804      	ldr	r0, [pc, #16]	@ (8010fcc <process_input_buffer+0x90>)
 8010fbc:	f003 fd58 	bl	8014a70 <arm_cmplx_mag_f32>
	return;
 8010fc0:	bf00      	nop
}
 8010fc2:	3710      	adds	r7, #16
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	2400dbe0 	.word	0x2400dbe0
 8010fcc:	2400fbe0 	.word	0x2400fbe0
 8010fd0:	2400dbc8 	.word	0x2400dbc8
 8010fd4:	24011be0 	.word	0x24011be0

08010fd8 <process_left_sample>:
//	return output_sample;
//}

// Lab 2 Week 1: Difference equation
int16_t process_left_sample(int16_t input_sample)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b086      	sub	sp, #24
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	4603      	mov	r3, r0
 8010fe0:	80fb      	strh	r3, [r7, #6]
	tic();
 8010fe2:	f000 f8ff 	bl	80111e4 <tic>
	int16_t output_sample;

	output_sample = y[0] * OUTPUT_SCALE_FACTOR;
 8010fe6:	4b28      	ldr	r3, [pc, #160]	@ (8011088 <process_left_sample+0xb0>)
 8010fe8:	edd3 7a00 	vldr	s15, [r3]
 8010fec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8010ff0:	ed9f 6b23 	vldr	d6, [pc, #140]	@ 8011080 <process_left_sample+0xa8>
 8010ff4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ff8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010ffc:	ee17 3a90 	vmov	r3, s15
 8011000:	82fb      	strh	r3, [r7, #22]

	float32_t y_new = coeff1 * y[1] - y[2] + coeff2 * x[1];
 8011002:	4b21      	ldr	r3, [pc, #132]	@ (8011088 <process_left_sample+0xb0>)
 8011004:	ed93 7a01 	vldr	s14, [r3, #4]
 8011008:	4b20      	ldr	r3, [pc, #128]	@ (801108c <process_left_sample+0xb4>)
 801100a:	edd3 7a00 	vldr	s15, [r3]
 801100e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011012:	4b1d      	ldr	r3, [pc, #116]	@ (8011088 <process_left_sample+0xb0>)
 8011014:	edd3 7a02 	vldr	s15, [r3, #8]
 8011018:	ee37 7a67 	vsub.f32	s14, s14, s15
 801101c:	4b1c      	ldr	r3, [pc, #112]	@ (8011090 <process_left_sample+0xb8>)
 801101e:	edd3 6a01 	vldr	s13, [r3, #4]
 8011022:	4b1c      	ldr	r3, [pc, #112]	@ (8011094 <process_left_sample+0xbc>)
 8011024:	edd3 7a00 	vldr	s15, [r3]
 8011028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801102c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011030:	edc7 7a04 	vstr	s15, [r7, #16]
//	float32_t y_new = coeff1 * y[1] - y[2] + x[0] - coeff2 * x[1];
	float32_t x_new = 0.0;
 8011034:	f04f 0300 	mov.w	r3, #0
 8011038:	60fb      	str	r3, [r7, #12]

	//y = {y_new, y[0], y[1]};
	y[2] = y[1];
 801103a:	4b13      	ldr	r3, [pc, #76]	@ (8011088 <process_left_sample+0xb0>)
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	4a12      	ldr	r2, [pc, #72]	@ (8011088 <process_left_sample+0xb0>)
 8011040:	6093      	str	r3, [r2, #8]
	y[1] = y_new;
 8011042:	4a11      	ldr	r2, [pc, #68]	@ (8011088 <process_left_sample+0xb0>)
 8011044:	693b      	ldr	r3, [r7, #16]
 8011046:	6053      	str	r3, [r2, #4]
	y[0] = y_new;
 8011048:	4a0f      	ldr	r2, [pc, #60]	@ (8011088 <process_left_sample+0xb0>)
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	6013      	str	r3, [r2, #0]
	//x = {x_new, x[0], x[1]};
	x[2] = x[1];
 801104e:	4b10      	ldr	r3, [pc, #64]	@ (8011090 <process_left_sample+0xb8>)
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	4a0f      	ldr	r2, [pc, #60]	@ (8011090 <process_left_sample+0xb8>)
 8011054:	6093      	str	r3, [r2, #8]
	x[1] = x[0];
 8011056:	4b0e      	ldr	r3, [pc, #56]	@ (8011090 <process_left_sample+0xb8>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	4a0d      	ldr	r2, [pc, #52]	@ (8011090 <process_left_sample+0xb8>)
 801105c:	6053      	str	r3, [r2, #4]
	x[0] = x_new;
 801105e:	4a0c      	ldr	r2, [pc, #48]	@ (8011090 <process_left_sample+0xb8>)
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	6013      	str	r3, [r2, #0]

	elapsed_cycles = toc();
 8011064:	f000 f8ce 	bl	8011204 <toc>
 8011068:	4603      	mov	r3, r0
 801106a:	4a0b      	ldr	r2, [pc, #44]	@ (8011098 <process_left_sample+0xc0>)
 801106c:	6013      	str	r3, [r2, #0]
	return output_sample;
 801106e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8011072:	4618      	mov	r0, r3
 8011074:	3718      	adds	r7, #24
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	f3af 8000 	nop.w
 8011080:	00000000 	.word	0x00000000
 8011084:	40a90000 	.word	0x40a90000
 8011088:	24005b68 	.word	0x24005b68
 801108c:	24005b78 	.word	0x24005b78
 8011090:	24000470 	.word	0x24000470
 8011094:	24005b7c 	.word	0x24005b7c
 8011098:	24005b64 	.word	0x24005b64

0801109c <process_right_sample>:
Default behavior:
	1. Copy input to output without modification (passthrough)
	2. Estimate the number of cycles that have elapsed during the function call
*/
int16_t process_right_sample(int16_t input_sample)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	4603      	mov	r3, r0
 80110a4:	80fb      	strh	r3, [r7, #6]
	tic();
 80110a6:	f000 f89d 	bl	80111e4 <tic>
	int16_t output_sample;
	output_sample = input_sample;
 80110aa:	88fb      	ldrh	r3, [r7, #6]
 80110ac:	81fb      	strh	r3, [r7, #14]
	elapsed_cycles = toc();
 80110ae:	f000 f8a9 	bl	8011204 <toc>
 80110b2:	4603      	mov	r3, r0
 80110b4:	4a03      	ldr	r2, [pc, #12]	@ (80110c4 <process_right_sample+0x28>)
 80110b6:	6013      	str	r3, [r2, #0]
	return output_sample;
 80110b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3710      	adds	r7, #16
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	24005b64 	.word	0x24005b64

080110c8 <process_output_buffer>:
The buffer you see here will have any changes that occurred to the signal due to:
	1. the process_input_buffer function
	2. the process_left_sample and process_right_sample functions
*/
void process_output_buffer(int16_t* output_buffer)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
	return;
 80110d0:	bf00      	nop
}
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <main>:
extern int16_t process_right_sample(int16_t input_sample);
extern void process_input_buffer(int16_t* input_buffer);
extern void process_output_buffer(int16_t* output_buffer);

int main(void)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	af00      	add	r7, sp, #0
  MPU_Config();
 80110e0:	f000 fb6e 	bl	80117c0 <MPU_Config>
  CPU_CACHE_Enable();
 80110e4:	f000 fb94 	bl	8011810 <CPU_CACHE_Enable>
  HAL_Init();
 80110e8:	f7f6 f858 	bl	800719c <HAL_Init>
  SystemClock_Config();
 80110ec:	f000 fa5a 	bl	80115a4 <SystemClock_Config>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 80110f0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80110f4:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 80110f8:	2000      	movs	r0, #0
 80110fa:	f7fc f8e5 	bl	800d2c8 <HAL_RCC_MCOConfig>
  BSP_LED_Init(LED1);
 80110fe:	2000      	movs	r0, #0
 8011100:	f7f1 f9c2 	bl	8002488 <BSP_LED_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_PORTRAIT);
 8011104:	2100      	movs	r1, #0
 8011106:	2000      	movs	r0, #0
 8011108:	f7f4 fc4a 	bl	80059a0 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 801110c:	480f      	ldr	r0, [pc, #60]	@ (801114c <main+0x70>)
 801110e:	f000 fcf9 	bl	8011b04 <UTIL_LCD_SetFuncDriver>
  Display_DemoDescription();
 8011112:	f000 fad1 	bl	80116b8 <Display_DemoDescription>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8011116:	2101      	movs	r1, #1
 8011118:	2000      	movs	r0, #0
 801111a:	f7f1 fa13 	bl	8002544 <BSP_PB_Init>
  arm_rfft_fast_init_f32(&fft_inst, FRAME_SIZE/4);
 801111e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011122:	480b      	ldr	r0, [pc, #44]	@ (8011150 <main+0x74>)
 8011124:	f002 ffd8 	bl	80140d8 <arm_rfft_fast_init_f32>
  audio_init();
 8011128:	f000 f818 	bl	801115c <audio_init>
  lab_init(play_buffer);
 801112c:	4809      	ldr	r0, [pc, #36]	@ (8011154 <main+0x78>)
 801112e:	f7ff fed3 	bl	8010ed8 <lab_init>
  #ifdef ENABLE_VISUALIZATION
	  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8011132:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8011136:	f000 fd4f 	bl	8011bd8 <UTIL_LCD_SetBackColor>
	  UTIL_LCD_Clear(UTIL_LCD_COLOR_BLACK);
 801113a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 801113e:	f000 fdc5 	bl	8011ccc <UTIL_LCD_Clear>
  #endif

  while (1)
  {
    #ifdef ENABLE_VISUALIZATION
	  display_spectrum(fft_mag);
 8011142:	4805      	ldr	r0, [pc, #20]	@ (8011158 <main+0x7c>)
 8011144:	f000 f870 	bl	8011228 <display_spectrum>
 8011148:	e7fb      	b.n	8011142 <main+0x66>
 801114a:	bf00      	nop
 801114c:	08015a48 	.word	0x08015a48
 8011150:	2400dbc8 	.word	0x2400dbc8
 8011154:	24005ba0 	.word	0x24005ba0
 8011158:	24011be0 	.word	0x24011be0

0801115c <audio_init>:
    #endif
  }
}

void audio_init(void)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	af00      	add	r7, sp, #0
  audio_out_init.Device = AUDIO_OUT_DEVICE_HEADPHONE;
 8011160:	4b1b      	ldr	r3, [pc, #108]	@ (80111d0 <audio_init+0x74>)
 8011162:	2202      	movs	r2, #2
 8011164:	601a      	str	r2, [r3, #0]
  audio_out_init.ChannelsNbr = 2;
 8011166:	4b1a      	ldr	r3, [pc, #104]	@ (80111d0 <audio_init+0x74>)
 8011168:	2202      	movs	r2, #2
 801116a:	60da      	str	r2, [r3, #12]
  audio_out_init.SampleRate = SAMPLE_RATE;
 801116c:	4b18      	ldr	r3, [pc, #96]	@ (80111d0 <audio_init+0x74>)
 801116e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8011172:	605a      	str	r2, [r3, #4]
  audio_out_init.BitsPerSample = AUDIO_RESOLUTION_16B;
 8011174:	4b16      	ldr	r3, [pc, #88]	@ (80111d0 <audio_init+0x74>)
 8011176:	2210      	movs	r2, #16
 8011178:	609a      	str	r2, [r3, #8]
  audio_out_init.Volume = 50;
 801117a:	4b15      	ldr	r3, [pc, #84]	@ (80111d0 <audio_init+0x74>)
 801117c:	2232      	movs	r2, #50	@ 0x32
 801117e:	611a      	str	r2, [r3, #16]
  audio_in_init.Device = AUDIO_IN_DEVICE_ANALOG_MIC;
 8011180:	4b14      	ldr	r3, [pc, #80]	@ (80111d4 <audio_init+0x78>)
 8011182:	2200      	movs	r2, #0
 8011184:	601a      	str	r2, [r3, #0]
  audio_in_init.ChannelsNbr = 2;
 8011186:	4b13      	ldr	r3, [pc, #76]	@ (80111d4 <audio_init+0x78>)
 8011188:	2202      	movs	r2, #2
 801118a:	60da      	str	r2, [r3, #12]
  audio_in_init.SampleRate = SAMPLE_RATE;
 801118c:	4b11      	ldr	r3, [pc, #68]	@ (80111d4 <audio_init+0x78>)
 801118e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8011192:	605a      	str	r2, [r3, #4]
  audio_in_init.BitsPerSample = AUDIO_RESOLUTION_16B;
 8011194:	4b0f      	ldr	r3, [pc, #60]	@ (80111d4 <audio_init+0x78>)
 8011196:	2210      	movs	r2, #16
 8011198:	609a      	str	r2, [r3, #8]
  audio_in_init.Volume = 100;
 801119a:	4b0e      	ldr	r3, [pc, #56]	@ (80111d4 <audio_init+0x78>)
 801119c:	2264      	movs	r2, #100	@ 0x64
 801119e:	611a      	str	r2, [r3, #16]
  BSP_AUDIO_IN_OUT_Init_Ex(0, 0, &audio_in_init, &audio_in_init);
 80111a0:	4b0c      	ldr	r3, [pc, #48]	@ (80111d4 <audio_init+0x78>)
 80111a2:	4a0c      	ldr	r2, [pc, #48]	@ (80111d4 <audio_init+0x78>)
 80111a4:	2100      	movs	r1, #0
 80111a6:	2000      	movs	r0, #0
 80111a8:	f7f2 fa8a 	bl	80036c0 <BSP_AUDIO_IN_OUT_Init_Ex>
  BSP_AUDIO_IN_Record_Ex(0, (uint8_t*) record_buffer, FRAME_SIZE*2);
 80111ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80111b0:	4909      	ldr	r1, [pc, #36]	@ (80111d8 <audio_init+0x7c>)
 80111b2:	2000      	movs	r0, #0
 80111b4:	f7f2 fea8 	bl	8003f08 <BSP_AUDIO_IN_Record_Ex>
  BSP_AUDIO_OUT_Play(0, (uint8_t*) play_buffer, FRAME_SIZE*2);
 80111b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80111bc:	4907      	ldr	r1, [pc, #28]	@ (80111dc <audio_init+0x80>)
 80111be:	2000      	movs	r0, #0
 80111c0:	f7f1 fadc 	bl	800277c <BSP_AUDIO_OUT_Play>
  audio_buffer_offset  = BUFFER_OFFSET_NONE;
 80111c4:	4b06      	ldr	r3, [pc, #24]	@ (80111e0 <audio_init+0x84>)
 80111c6:	2200      	movs	r2, #0
 80111c8:	601a      	str	r2, [r3, #0]
}
 80111ca:	bf00      	nop
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	2400dbb4 	.word	0x2400dbb4
 80111d4:	2400dba0 	.word	0x2400dba0
 80111d8:	24009ba0 	.word	0x24009ba0
 80111dc:	24005ba0 	.word	0x24005ba0
 80111e0:	24005b84 	.word	0x24005b84

080111e4 <tic>:

void tic(void)
{
 80111e4:	b480      	push	{r7}
 80111e6:	af00      	add	r7, sp, #0
	t = *systick;
 80111e8:	4b04      	ldr	r3, [pc, #16]	@ (80111fc <tic+0x18>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	4a04      	ldr	r2, [pc, #16]	@ (8011200 <tic+0x1c>)
 80111f0:	6013      	str	r3, [r2, #0]
}
 80111f2:	bf00      	nop
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr
 80111fc:	2400047c 	.word	0x2400047c
 8011200:	24005b88 	.word	0x24005b88

08011204 <toc>:

uint32_t toc(void)
{
 8011204:	b480      	push	{r7}
 8011206:	af00      	add	r7, sp, #0
	return t - *systick;
 8011208:	4b05      	ldr	r3, [pc, #20]	@ (8011220 <toc+0x1c>)
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	4b05      	ldr	r3, [pc, #20]	@ (8011224 <toc+0x20>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	1ad3      	subs	r3, r2, r3
}
 8011214:	4618      	mov	r0, r3
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr
 801121e:	bf00      	nop
 8011220:	24005b88 	.word	0x24005b88
 8011224:	2400047c 	.word	0x2400047c

08011228 <display_spectrum>:

void display_spectrum(float32_t *fft_mag)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b088      	sub	sp, #32
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
	uint32_t x1, x2;
	float32_t height;

	for(uint32_t i_bar = 0; i_bar<160; i_bar+=1)
 8011230:	2300      	movs	r3, #0
 8011232:	61bb      	str	r3, [r7, #24]
 8011234:	e07f      	b.n	8011336 <display_spectrum+0x10e>
	{
		x1 = FFT_to_CQ_LUT[i_bar];
 8011236:	4a44      	ldr	r2, [pc, #272]	@ (8011348 <display_spectrum+0x120>)
 8011238:	69bb      	ldr	r3, [r7, #24]
 801123a:	4413      	add	r3, r2
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	613b      	str	r3, [r7, #16]
		x2 = FFT_to_CQ_LUT[i_bar+1];
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	3301      	adds	r3, #1
 8011244:	4a40      	ldr	r2, [pc, #256]	@ (8011348 <display_spectrum+0x120>)
 8011246:	5cd3      	ldrb	r3, [r2, r3]
 8011248:	60fb      	str	r3, [r7, #12]
		if (x1 == x2){height = 20*logf(fft_mag[x1]);}
 801124a:	693a      	ldr	r2, [r7, #16]
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	429a      	cmp	r2, r3
 8011250:	d112      	bne.n	8011278 <display_spectrum+0x50>
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	009b      	lsls	r3, r3, #2
 8011256:	687a      	ldr	r2, [r7, #4]
 8011258:	4413      	add	r3, r2
 801125a:	edd3 7a00 	vldr	s15, [r3]
 801125e:	eeb0 0a67 	vmov.f32	s0, s15
 8011262:	f004 f8cb 	bl	80153fc <logf>
 8011266:	eef0 7a40 	vmov.f32	s15, s0
 801126a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 801126e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011272:	edc7 7a07 	vstr	s15, [r7, #28]
 8011276:	e024      	b.n	80112c2 <display_spectrum+0x9a>
		else
		{
			height = 0;
 8011278:	f04f 0300 	mov.w	r3, #0
 801127c:	61fb      	str	r3, [r7, #28]
			for (uint32_t bin = x1; bin<x2; bin+=1)
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	617b      	str	r3, [r7, #20]
 8011282:	e00e      	b.n	80112a2 <display_spectrum+0x7a>
			{
				height += fft_mag[bin];
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	009b      	lsls	r3, r3, #2
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	4413      	add	r3, r2
 801128c:	edd3 7a00 	vldr	s15, [r3]
 8011290:	ed97 7a07 	vldr	s14, [r7, #28]
 8011294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011298:	edc7 7a07 	vstr	s15, [r7, #28]
			for (uint32_t bin = x1; bin<x2; bin+=1)
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	3301      	adds	r3, #1
 80112a0:	617b      	str	r3, [r7, #20]
 80112a2:	697a      	ldr	r2, [r7, #20]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d3ec      	bcc.n	8011284 <display_spectrum+0x5c>
			}
			height = 20*logf(height);
 80112aa:	ed97 0a07 	vldr	s0, [r7, #28]
 80112ae:	f004 f8a5 	bl	80153fc <logf>
 80112b2:	eef0 7a40 	vmov.f32	s15, s0
 80112b6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80112ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80112be:	edc7 7a07 	vstr	s15, [r7, #28]
		}

		height = 2*height - 200;
 80112c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80112c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80112ca:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801134c <display_spectrum+0x124>
 80112ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112d2:	edc7 7a07 	vstr	s15, [r7, #28]
		if (height>270){height = 270;}
 80112d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80112da:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8011350 <display_spectrum+0x128>
 80112de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80112e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e6:	dd01      	ble.n	80112ec <display_spectrum+0xc4>
 80112e8:	4b1a      	ldr	r3, [pc, #104]	@ (8011354 <display_spectrum+0x12c>)
 80112ea:	61fb      	str	r3, [r7, #28]
		UTIL_LCD_DrawVLine(3*i_bar, 0, 272, UTIL_LCD_COLOR_BLACK);
 80112ec:	69ba      	ldr	r2, [r7, #24]
 80112ee:	4613      	mov	r3, r2
 80112f0:	005b      	lsls	r3, r3, #1
 80112f2:	1898      	adds	r0, r3, r2
 80112f4:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80112f8:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80112fc:	2100      	movs	r1, #0
 80112fe:	f000 fcaf 	bl	8011c60 <UTIL_LCD_DrawVLine>
		UTIL_LCD_DrawVLine(3*i_bar, (uint32_t)(272-height), (uint32_t)height, UTIL_LCD_COLOR_BLUE);
 8011302:	69ba      	ldr	r2, [r7, #24]
 8011304:	4613      	mov	r3, r2
 8011306:	005b      	lsls	r3, r3, #1
 8011308:	1898      	adds	r0, r3, r2
 801130a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8011358 <display_spectrum+0x130>
 801130e:	edd7 7a07 	vldr	s15, [r7, #28]
 8011312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011316:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801131a:	edd7 7a07 	vldr	s15, [r7, #28]
 801131e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011322:	4b0e      	ldr	r3, [pc, #56]	@ (801135c <display_spectrum+0x134>)
 8011324:	ee17 2a90 	vmov	r2, s15
 8011328:	ee17 1a10 	vmov	r1, s14
 801132c:	f000 fc98 	bl	8011c60 <UTIL_LCD_DrawVLine>
	for(uint32_t i_bar = 0; i_bar<160; i_bar+=1)
 8011330:	69bb      	ldr	r3, [r7, #24]
 8011332:	3301      	adds	r3, #1
 8011334:	61bb      	str	r3, [r7, #24]
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	2b9f      	cmp	r3, #159	@ 0x9f
 801133a:	f67f af7c 	bls.w	8011236 <display_spectrum+0xe>
	}
}
 801133e:	bf00      	nop
 8011340:	bf00      	nop
 8011342:	3720      	adds	r7, #32
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}
 8011348:	24000480 	.word	0x24000480
 801134c:	43480000 	.word	0x43480000
 8011350:	43870000 	.word	0x43870000
 8011354:	43870000 	.word	0x43870000
 8011358:	43880000 	.word	0x43880000
 801135c:	ff0000ff 	.word	0xff0000ff

08011360 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
    }
  }
}

void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b08c      	sub	sp, #48	@ 0x30
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	4b40      	ldr	r3, [pc, #256]	@ (801146c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 801136a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801136c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011370:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 8011372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011374:	2b00      	cmp	r3, #0
 8011376:	dd1d      	ble.n	80113b4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801137a:	f003 021f 	and.w	r2, r3, #31
 801137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011380:	4413      	add	r3, r2
 8011382:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8011384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011386:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8011388:	f3bf 8f4f 	dsb	sy
}
 801138c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801138e:	4a38      	ldr	r2, [pc, #224]	@ (8011470 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x110>)
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	3320      	adds	r3, #32
 801139a:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801139c:	6a3b      	ldr	r3, [r7, #32]
 801139e:	3b20      	subs	r3, #32
 80113a0:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 80113a2:	6a3b      	ldr	r3, [r7, #32]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	dcf2      	bgt.n	801138e <BSP_AUDIO_IN_HalfTransfer_CallBack+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 80113a8:	f3bf 8f4f 	dsb	sy
}
 80113ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80113ae:	f3bf 8f6f 	isb	sy
}
 80113b2:	bf00      	nop
}
 80113b4:	bf00      	nop
    SCB_InvalidateDCache_by_Addr((uint32_t *) record_buffer, FRAME_SIZE*2);
	#ifdef PROCESS_INPUT_BUFFER
    	process_input_buffer(record_buffer);
 80113b6:	482d      	ldr	r0, [pc, #180]	@ (801146c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 80113b8:	f7ff fdc0 	bl	8010f3c <process_input_buffer>
	#endif
    for(uint32_t i_sample = 0 ; i_sample < FRAME_SIZE/2; i_sample+=1)
 80113bc:	2300      	movs	r3, #0
 80113be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80113c0:	e01f      	b.n	8011402 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa2>
    {
		#ifdef PROCESS_LEFT_CHANNEL
			play_buffer[i_sample] = process_left_sample(record_buffer[i_sample]);
 80113c2:	4a2a      	ldr	r2, [pc, #168]	@ (801146c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 80113c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff fe04 	bl	8010fd8 <process_left_sample>
 80113d0:	4603      	mov	r3, r0
 80113d2:	4619      	mov	r1, r3
 80113d4:	4a27      	ldr	r2, [pc, #156]	@ (8011474 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 80113d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		#elif defined(PERIODIC_LOOKUP_TABLE)
		#else
			play_buffer[i_sample] = record_buffer[i_sample];
		#endif
		i_sample +=1;
 80113dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113de:	3301      	adds	r3, #1
 80113e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		#ifdef PROCESS_RIGHT_CHANNEL
			play_buffer[i_sample] = process_right_sample(record_buffer[i_sample]);
 80113e2:	4a22      	ldr	r2, [pc, #136]	@ (801146c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 80113e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7ff fe56 	bl	801109c <process_right_sample>
 80113f0:	4603      	mov	r3, r0
 80113f2:	4619      	mov	r1, r3
 80113f4:	4a1f      	ldr	r2, [pc, #124]	@ (8011474 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 80113f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint32_t i_sample = 0 ; i_sample < FRAME_SIZE/2; i_sample+=1)
 80113fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fe:	3301      	adds	r3, #1
 8011400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011408:	d3db      	bcc.n	80113c2 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x62>
		#else
			play_buffer[i_sample] = record_buffer[i_sample];
		#endif
    }
	#ifdef PROCESS_OUTPUT_BUFFER
    	process_output_buffer(play_buffer);
 801140a:	481a      	ldr	r0, [pc, #104]	@ (8011474 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 801140c:	f7ff fe5c 	bl	80110c8 <process_output_buffer>
 8011410:	4b18      	ldr	r3, [pc, #96]	@ (8011474 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 8011412:	61bb      	str	r3, [r7, #24]
 8011414:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011418:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	2b00      	cmp	r3, #0
 801141e:	dd1d      	ble.n	801145c <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011420:	69bb      	ldr	r3, [r7, #24]
 8011422:	f003 021f 	and.w	r2, r3, #31
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	4413      	add	r3, r2
 801142a:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801142c:	69bb      	ldr	r3, [r7, #24]
 801142e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011430:	f3bf 8f4f 	dsb	sy
}
 8011434:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011436:	4a0e      	ldr	r2, [pc, #56]	@ (8011470 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x110>)
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	3320      	adds	r3, #32
 8011442:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	3b20      	subs	r3, #32
 8011448:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	2b00      	cmp	r3, #0
 801144e:	dcf2      	bgt.n	8011436 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xd6>
  __ASM volatile ("dsb 0xF":::"memory");
 8011450:	f3bf 8f4f 	dsb	sy
}
 8011454:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011456:	f3bf 8f6f 	isb	sy
}
 801145a:	bf00      	nop
}
 801145c:	bf00      	nop
	#endif
    SCB_CleanDCache_by_Addr((uint32_t *)play_buffer, FRAME_SIZE);
    audio_buffer_offset  = BUFFER_OFFSET_HALF;
 801145e:	4b06      	ldr	r3, [pc, #24]	@ (8011478 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x118>)
 8011460:	2201      	movs	r2, #1
 8011462:	601a      	str	r2, [r3, #0]
}
 8011464:	bf00      	nop
 8011466:	3730      	adds	r7, #48	@ 0x30
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	24009ba0 	.word	0x24009ba0
 8011470:	e000ed00 	.word	0xe000ed00
 8011474:	24005ba0 	.word	0x24005ba0
 8011478:	24005b84 	.word	0x24005b84

0801147c <BSP_AUDIO_IN_TransferComplete_CallBack>:
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b08c      	sub	sp, #48	@ 0x30
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	4b41      	ldr	r3, [pc, #260]	@ (801158c <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 8011486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011488:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801148c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 801148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011490:	2b00      	cmp	r3, #0
 8011492:	dd1d      	ble.n	80114d0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x54>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8011494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011496:	f003 021f 	and.w	r2, r3, #31
 801149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801149c:	4413      	add	r3, r2
 801149e:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80114a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 80114a4:	f3bf 8f4f 	dsb	sy
}
 80114a8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80114aa:	4a39      	ldr	r2, [pc, #228]	@ (8011590 <BSP_AUDIO_IN_TransferComplete_CallBack+0x114>)
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	3320      	adds	r3, #32
 80114b6:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80114b8:	6a3b      	ldr	r3, [r7, #32]
 80114ba:	3b20      	subs	r3, #32
 80114bc:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 80114be:	6a3b      	ldr	r3, [r7, #32]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	dcf2      	bgt.n	80114aa <BSP_AUDIO_IN_TransferComplete_CallBack+0x2e>
  __ASM volatile ("dsb 0xF":::"memory");
 80114c4:	f3bf 8f4f 	dsb	sy
}
 80114c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80114ca:	f3bf 8f6f 	isb	sy
}
 80114ce:	bf00      	nop
}
 80114d0:	bf00      	nop
    SCB_InvalidateDCache_by_Addr((uint32_t*) &record_buffer[FRAME_SIZE/2], FRAME_SIZE*2);
	#ifdef PROCESS_INPUT_BUFFER
		process_input_buffer(&record_buffer[FRAME_SIZE/2]);
 80114d2:	482e      	ldr	r0, [pc, #184]	@ (801158c <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 80114d4:	f7ff fd32 	bl	8010f3c <process_input_buffer>
	#endif
	for(uint32_t i_sample = FRAME_SIZE/2; i_sample < FRAME_SIZE; i_sample+=1)
 80114d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80114dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114de:	e01f      	b.n	8011520 <BSP_AUDIO_IN_TransferComplete_CallBack+0xa4>
	{
		#ifdef PROCESS_LEFT_CHANNEL
			play_buffer[i_sample] = process_left_sample(record_buffer[i_sample]);
 80114e0:	4a2c      	ldr	r2, [pc, #176]	@ (8011594 <BSP_AUDIO_IN_TransferComplete_CallBack+0x118>)
 80114e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7ff fd75 	bl	8010fd8 <process_left_sample>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4619      	mov	r1, r3
 80114f2:	4a29      	ldr	r2, [pc, #164]	@ (8011598 <BSP_AUDIO_IN_TransferComplete_CallBack+0x11c>)
 80114f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		#elif defined(PERIODIC_LOOKUP_TABLE)
		#else
			play_buffer[i_sample] = record_buffer[i_sample];
		#endif
		i_sample +=1;
 80114fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114fc:	3301      	adds	r3, #1
 80114fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		#ifdef PROCESS_RIGHT_CHANNEL
			play_buffer[i_sample] = process_right_sample(record_buffer[i_sample]);
 8011500:	4a24      	ldr	r2, [pc, #144]	@ (8011594 <BSP_AUDIO_IN_TransferComplete_CallBack+0x118>)
 8011502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011504:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011508:	4618      	mov	r0, r3
 801150a:	f7ff fdc7 	bl	801109c <process_right_sample>
 801150e:	4603      	mov	r3, r0
 8011510:	4619      	mov	r1, r3
 8011512:	4a21      	ldr	r2, [pc, #132]	@ (8011598 <BSP_AUDIO_IN_TransferComplete_CallBack+0x11c>)
 8011514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i_sample = FRAME_SIZE/2; i_sample < FRAME_SIZE; i_sample+=1)
 801151a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151c:	3301      	adds	r3, #1
 801151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011526:	d3db      	bcc.n	80114e0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x64>
		#else
			play_buffer[i_sample] = record_buffer[i_sample];
		#endif
	}
	#ifdef PROCESS_OUTPUT_BUFFER
		process_output_buffer(&record_buffer[FRAME_SIZE/2]);
 8011528:	4818      	ldr	r0, [pc, #96]	@ (801158c <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 801152a:	f7ff fdcd 	bl	80110c8 <process_output_buffer>
 801152e:	4b1b      	ldr	r3, [pc, #108]	@ (801159c <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
 8011530:	61bb      	str	r3, [r7, #24]
 8011532:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011536:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	2b00      	cmp	r3, #0
 801153c:	dd1d      	ble.n	801157a <BSP_AUDIO_IN_TransferComplete_CallBack+0xfe>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	f003 021f 	and.w	r2, r3, #31
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	4413      	add	r3, r2
 8011548:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801154e:	f3bf 8f4f 	dsb	sy
}
 8011552:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8011554:	4a0e      	ldr	r2, [pc, #56]	@ (8011590 <BSP_AUDIO_IN_TransferComplete_CallBack+0x114>)
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	3320      	adds	r3, #32
 8011560:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	3b20      	subs	r3, #32
 8011566:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	2b00      	cmp	r3, #0
 801156c:	dcf2      	bgt.n	8011554 <BSP_AUDIO_IN_TransferComplete_CallBack+0xd8>
  __ASM volatile ("dsb 0xF":::"memory");
 801156e:	f3bf 8f4f 	dsb	sy
}
 8011572:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011574:	f3bf 8f6f 	isb	sy
}
 8011578:	bf00      	nop
}
 801157a:	bf00      	nop
	#endif
    SCB_CleanDCache_by_Addr((uint32_t*) &play_buffer[FRAME_SIZE/2], FRAME_SIZE);
    audio_buffer_offset  = BUFFER_OFFSET_FULL;
 801157c:	4b08      	ldr	r3, [pc, #32]	@ (80115a0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x124>)
 801157e:	2202      	movs	r2, #2
 8011580:	601a      	str	r2, [r3, #0]
}
 8011582:	bf00      	nop
 8011584:	3730      	adds	r7, #48	@ 0x30
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
 801158a:	bf00      	nop
 801158c:	2400bba0 	.word	0x2400bba0
 8011590:	e000ed00 	.word	0xe000ed00
 8011594:	24009ba0 	.word	0x24009ba0
 8011598:	24005ba0 	.word	0x24005ba0
 801159c:	24007ba0 	.word	0x24007ba0
 80115a0:	24005b84 	.word	0x24005b84

080115a4 <SystemClock_Config>:
  *            Flash Latency(WS)              = 3
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b09e      	sub	sp, #120	@ 0x78
 80115a8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80115aa:	2300      	movs	r3, #0
 80115ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80115b0:	2004      	movs	r0, #4
 80115b2:	f7fb f8e9 	bl	800c788 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80115b6:	2300      	movs	r3, #0
 80115b8:	607b      	str	r3, [r7, #4]
 80115ba:	4b3d      	ldr	r3, [pc, #244]	@ (80116b0 <SystemClock_Config+0x10c>)
 80115bc:	699b      	ldr	r3, [r3, #24]
 80115be:	4a3c      	ldr	r2, [pc, #240]	@ (80116b0 <SystemClock_Config+0x10c>)
 80115c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80115c4:	6193      	str	r3, [r2, #24]
 80115c6:	4b3a      	ldr	r3, [pc, #232]	@ (80116b0 <SystemClock_Config+0x10c>)
 80115c8:	699b      	ldr	r3, [r3, #24]
 80115ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80115ce:	607b      	str	r3, [r7, #4]
 80115d0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80115d2:	bf00      	nop
 80115d4:	4b36      	ldr	r3, [pc, #216]	@ (80116b0 <SystemClock_Config+0x10c>)
 80115d6:	699b      	ldr	r3, [r3, #24]
 80115d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80115dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80115e0:	d1f8      	bne.n	80115d4 <SystemClock_Config+0x30>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80115e2:	2301      	movs	r3, #1
 80115e4:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80115e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80115ea:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80115ec:	2300      	movs	r3, #0
 80115ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80115f0:	2300      	movs	r3, #0
 80115f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80115f4:	2302      	movs	r3, #2
 80115f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80115f8:	2302      	movs	r3, #2
 80115fa:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80115fc:	2305      	movs	r3, #5
 80115fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 104;
 8011600:	2368      	movs	r3, #104	@ 0x68
 8011602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8011604:	2300      	movs	r3, #0
 8011606:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 1;
 8011608:	2301      	movs	r3, #1
 801160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 801160c:	2302      	movs	r3, #2
 801160e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8011610:	2304      	movs	r3, #4
 8011612:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8011614:	2300      	movs	r3, #0
 8011616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8011618:	2308      	movs	r3, #8
 801161a:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 801161c:	f107 0308 	add.w	r3, r7, #8
 8011620:	4618      	mov	r0, r3
 8011622:	f7fb f90b 	bl	800c83c <HAL_RCC_OscConfig>
 8011626:	4603      	mov	r3, r0
 8011628:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 801162c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8011634:	f000 f95a 	bl	80118ec <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8011638:	233f      	movs	r3, #63	@ 0x3f
 801163a:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801163c:	2303      	movs	r3, #3
 801163e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8011640:	2300      	movs	r3, #0
 8011642:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8011644:	2308      	movs	r3, #8
 8011646:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8011648:	2340      	movs	r3, #64	@ 0x40
 801164a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 801164c:	2340      	movs	r3, #64	@ 0x40
 801164e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8011650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011654:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8011656:	2340      	movs	r3, #64	@ 0x40
 8011658:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3);
 801165a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801165e:	2103      	movs	r1, #3
 8011660:	4618      	mov	r0, r3
 8011662:	f7fb fc7b 	bl	800cf5c <HAL_RCC_ClockConfig>
 8011666:	4603      	mov	r3, r0
 8011668:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 801166c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011670:	2b00      	cmp	r3, #0
 8011672:	d001      	beq.n	8011678 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8011674:	f000 f93a 	bl	80118ec <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
*/


  __HAL_RCC_CSI_ENABLE() ;
 8011678:	4b0e      	ldr	r3, [pc, #56]	@ (80116b4 <SystemClock_Config+0x110>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	4a0d      	ldr	r2, [pc, #52]	@ (80116b4 <SystemClock_Config+0x110>)
 801167e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011682:	6013      	str	r3, [r2, #0]

  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8011684:	4b0b      	ldr	r3, [pc, #44]	@ (80116b4 <SystemClock_Config+0x110>)
 8011686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801168a:	4a0a      	ldr	r2, [pc, #40]	@ (80116b4 <SystemClock_Config+0x110>)
 801168c:	f043 0302 	orr.w	r3, r3, #2
 8011690:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011694:	4b07      	ldr	r3, [pc, #28]	@ (80116b4 <SystemClock_Config+0x110>)
 8011696:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801169a:	f003 0302 	and.w	r3, r3, #2
 801169e:	603b      	str	r3, [r7, #0]
 80116a0:	683b      	ldr	r3, [r7, #0]

  HAL_EnableCompensationCell();
 80116a2:	f7f5 fe31 	bl	8007308 <HAL_EnableCompensationCell>

}
 80116a6:	bf00      	nop
 80116a8:	3778      	adds	r7, #120	@ 0x78
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	58024800 	.word	0x58024800
 80116b4:	58024400 	.word	0x58024400

080116b8 <Display_DemoDescription>:
/**
  * @brief  Display main demo messages
  * @retval None
  */
static void Display_DemoDescription(void)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af02      	add	r7, sp, #8
  uint32_t x_size;
  uint32_t y_size;

  UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 80116be:	482c      	ldr	r0, [pc, #176]	@ (8011770 <Display_DemoDescription+0xb8>)
 80116c0:	f000 fa9e 	bl	8011c00 <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80116c4:	f04f 30ff 	mov.w	r0, #4294967295
 80116c8:	f000 fa86 	bl	8011bd8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80116cc:	f04f 30ff 	mov.w	r0, #4294967295
 80116d0:	f000 fafc 	bl	8011ccc <UTIL_LCD_Clear>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 80116d4:	4827      	ldr	r0, [pc, #156]	@ (8011774 <Display_DemoDescription+0xbc>)
 80116d6:	f000 fa6b 	bl	8011bb0 <UTIL_LCD_SetTextColor>

  /* Display LCD messages */
  UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32H735G-DK", CENTER_MODE);
 80116da:	2301      	movs	r3, #1
 80116dc:	4a26      	ldr	r2, [pc, #152]	@ (8011778 <Display_DemoDescription+0xc0>)
 80116de:	210a      	movs	r1, #10
 80116e0:	2000      	movs	r0, #0
 80116e2:	f000 fb3f 	bl	8011d64 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)"Stereo DMA Talkthrough", CENTER_MODE);
 80116e6:	2301      	movs	r3, #1
 80116e8:	4a24      	ldr	r2, [pc, #144]	@ (801177c <Display_DemoDescription+0xc4>)
 80116ea:	2123      	movs	r1, #35	@ 0x23
 80116ec:	2000      	movs	r0, #0
 80116ee:	f000 fb39 	bl	8011d64 <UTIL_LCD_DisplayStringAt>

  BSP_LCD_GetXSize(0, &x_size);
 80116f2:	1d3b      	adds	r3, r7, #4
 80116f4:	4619      	mov	r1, r3
 80116f6:	2000      	movs	r0, #0
 80116f8:	f7f4 fb5a 	bl	8005db0 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80116fc:	463b      	mov	r3, r7
 80116fe:	4619      	mov	r1, r3
 8011700:	2000      	movs	r0, #0
 8011702:	f7f4 fb77 	bl	8005df4 <BSP_LCD_GetYSize>

  UTIL_LCD_SetFont(&Font12);
 8011706:	481e      	ldr	r0, [pc, #120]	@ (8011780 <Display_DemoDescription+0xc8>)
 8011708:	f000 fa7a 	bl	8011c00 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2019", CENTER_MODE);
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	f1a3 0114 	sub.w	r1, r3, #20
 8011712:	2301      	movs	r3, #1
 8011714:	4a1b      	ldr	r2, [pc, #108]	@ (8011784 <Display_DemoDescription+0xcc>)
 8011716:	2000      	movs	r0, #0
 8011718:	f000 fb24 	bl	8011d64 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetFont(&Font16);
 801171c:	481a      	ldr	r0, [pc, #104]	@ (8011788 <Display_DemoDescription+0xd0>)
 801171e:	f000 fa6f 	bl	8011c00 <UTIL_LCD_SetFont>
  BSP_LCD_FillRect(0, 0, y_size/2 , x_size, 30, UTIL_LCD_COLOR_BLUE);
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	085a      	lsrs	r2, r3, #1
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4918      	ldr	r1, [pc, #96]	@ (801178c <Display_DemoDescription+0xd4>)
 801172a:	9101      	str	r1, [sp, #4]
 801172c:	211e      	movs	r1, #30
 801172e:	9100      	str	r1, [sp, #0]
 8011730:	2100      	movs	r1, #0
 8011732:	2000      	movs	r0, #0
 8011734:	f7f4 fd26 	bl	8006184 <BSP_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8011738:	f04f 30ff 	mov.w	r0, #4294967295
 801173c:	f000 fa38 	bl	8011bb0 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8011740:	4812      	ldr	r0, [pc, #72]	@ (801178c <Display_DemoDescription+0xd4>)
 8011742:	f000 fa49 	bl	8011bd8 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, y_size / 2 , (uint8_t *)"Plug input device into blue jack", CENTER_MODE);
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	0859      	lsrs	r1, r3, #1
 801174a:	2301      	movs	r3, #1
 801174c:	4a10      	ldr	r2, [pc, #64]	@ (8011790 <Display_DemoDescription+0xd8>)
 801174e:	2000      	movs	r0, #0
 8011750:	f000 fb08 	bl	8011d64 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, y_size/2 + 15, (uint8_t *)"Plug output device into green jack", CENTER_MODE);
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	085b      	lsrs	r3, r3, #1
 8011758:	f103 010f 	add.w	r1, r3, #15
 801175c:	2301      	movs	r3, #1
 801175e:	4a0d      	ldr	r2, [pc, #52]	@ (8011794 <Display_DemoDescription+0xdc>)
 8011760:	2000      	movs	r0, #0
 8011762:	f000 faff 	bl	8011d64 <UTIL_LCD_DisplayStringAt>
}
 8011766:	bf00      	nop
 8011768:	3708      	adds	r7, #8
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}
 801176e:	bf00      	nop
 8011770:	2400053c 	.word	0x2400053c
 8011774:	ff000080 	.word	0xff000080
 8011778:	080158e8 	.word	0x080158e8
 801177c:	080158f8 	.word	0x080158f8
 8011780:	2400052c 	.word	0x2400052c
 8011784:	08015910 	.word	0x08015910
 8011788:	24000534 	.word	0x24000534
 801178c:	ff0000ff 	.word	0xff0000ff
 8011790:	08015938 	.word	0x08015938
 8011794:	0801595c 	.word	0x0801595c

08011798 <BSP_PB_Callback>:
  * @brief  Button Callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	4603      	mov	r3, r0
 80117a0:	71fb      	strb	r3, [r7, #7]
  if(Button == BUTTON_USER)
 80117a2:	79fb      	ldrb	r3, [r7, #7]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d102      	bne.n	80117ae <BSP_PB_Callback+0x16>
  {
    button_state = 1;
 80117a8:	4b04      	ldr	r3, [pc, #16]	@ (80117bc <BSP_PB_Callback+0x24>)
 80117aa:	2201      	movs	r2, #1
 80117ac:	601a      	str	r2, [r3, #0]
  }
}
 80117ae:	bf00      	nop
 80117b0:	370c      	adds	r7, #12
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop
 80117bc:	24005b80 	.word	0x24005b80

080117c0 <MPU_Config>:
  * @brief  CPU MPU Config.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 80117c6:	f7f5 febf 	bl	8007548 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for OctoSPI RAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80117ca:	2301      	movs	r3, #1
 80117cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = OSPI_RAM_WRITE_READ_ADDR;
 80117ce:	4b0f      	ldr	r3, [pc, #60]	@ (801180c <MPU_Config+0x4c>)
 80117d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 80117d2:	2317      	movs	r3, #23
 80117d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80117d6:	2303      	movs	r3, #3
 80117d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80117da:	2300      	movs	r3, #0
 80117dc:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80117de:	2301      	movs	r3, #1
 80117e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80117e2:	2300      	movs	r3, #0
 80117e4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80117e6:	2300      	movs	r3, #0
 80117e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80117ea:	2300      	movs	r3, #0
 80117ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80117ee:	2300      	movs	r3, #0
 80117f0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80117f2:	2300      	movs	r3, #0
 80117f4:	733b      	strb	r3, [r7, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80117f6:	463b      	mov	r3, r7
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7f5 fedd 	bl	80075b8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80117fe:	2004      	movs	r0, #4
 8011800:	f7f5 feba 	bl	8007578 <HAL_MPU_Enable>
}
 8011804:	bf00      	nop
 8011806:	3710      	adds	r7, #16
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	70400000 	.word	0x70400000

08011810 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8011810:	b480      	push	{r7}
 8011812:	b085      	sub	sp, #20
 8011814:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8011816:	4b34      	ldr	r3, [pc, #208]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 8011818:	695b      	ldr	r3, [r3, #20]
 801181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801181e:	2b00      	cmp	r3, #0
 8011820:	d11b      	bne.n	801185a <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8011822:	f3bf 8f4f 	dsb	sy
}
 8011826:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011828:	f3bf 8f6f 	isb	sy
}
 801182c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801182e:	4b2e      	ldr	r3, [pc, #184]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 8011830:	2200      	movs	r2, #0
 8011832:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8011836:	f3bf 8f4f 	dsb	sy
}
 801183a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801183c:	f3bf 8f6f 	isb	sy
}
 8011840:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8011842:	4b29      	ldr	r3, [pc, #164]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 8011844:	695b      	ldr	r3, [r3, #20]
 8011846:	4a28      	ldr	r2, [pc, #160]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 8011848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801184c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801184e:	f3bf 8f4f 	dsb	sy
}
 8011852:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011854:	f3bf 8f6f 	isb	sy
}
 8011858:	e000      	b.n	801185c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 801185a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 801185c:	4b22      	ldr	r3, [pc, #136]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 801185e:	695b      	ldr	r3, [r3, #20]
 8011860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011864:	2b00      	cmp	r3, #0
 8011866:	d138      	bne.n	80118da <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8011868:	4b1f      	ldr	r3, [pc, #124]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 801186a:	2200      	movs	r2, #0
 801186c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8011870:	f3bf 8f4f 	dsb	sy
}
 8011874:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8011876:	4b1c      	ldr	r3, [pc, #112]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 8011878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801187c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	0b5b      	lsrs	r3, r3, #13
 8011882:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011886:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	08db      	lsrs	r3, r3, #3
 801188c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011890:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	015a      	lsls	r2, r3, #5
 8011896:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 801189a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80118a0:	4911      	ldr	r1, [pc, #68]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 80118a2:	4313      	orrs	r3, r2
 80118a4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	1e5a      	subs	r2, r3, #1
 80118ac:	607a      	str	r2, [r7, #4]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d1ef      	bne.n	8011892 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	1e5a      	subs	r2, r3, #1
 80118b6:	60ba      	str	r2, [r7, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d1e5      	bne.n	8011888 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80118bc:	f3bf 8f4f 	dsb	sy
}
 80118c0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80118c2:	4b09      	ldr	r3, [pc, #36]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 80118c4:	695b      	ldr	r3, [r3, #20]
 80118c6:	4a08      	ldr	r2, [pc, #32]	@ (80118e8 <CPU_CACHE_Enable+0xd8>)
 80118c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80118cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80118ce:	f3bf 8f4f 	dsb	sy
}
 80118d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80118d4:	f3bf 8f6f 	isb	sy
}
 80118d8:	e000      	b.n	80118dc <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80118da:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80118dc:	bf00      	nop
 80118de:	3714      	adds	r7, #20
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr
 80118e8:	e000ed00 	.word	0xe000ed00

080118ec <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80118ec:	b480      	push	{r7}
 80118ee:	af00      	add	r7, sp, #0
  /* User may add here some code to deal with this error */
  while(1)
 80118f0:	bf00      	nop
 80118f2:	e7fd      	b.n	80118f0 <Error_Handler+0x4>

080118f4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80118f4:	b480      	push	{r7}
 80118f6:	af00      	add	r7, sp, #0
}
 80118f8:	bf00      	nop
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr

08011902 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8011902:	b480      	push	{r7}
 8011904:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8011906:	bf00      	nop
 8011908:	e7fd      	b.n	8011906 <HardFault_Handler+0x4>

0801190a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 801190a:	b480      	push	{r7}
 801190c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 801190e:	bf00      	nop
 8011910:	e7fd      	b.n	801190e <MemManage_Handler+0x4>

08011912 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8011912:	b480      	push	{r7}
 8011914:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8011916:	bf00      	nop
 8011918:	e7fd      	b.n	8011916 <BusFault_Handler+0x4>

0801191a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 801191a:	b480      	push	{r7}
 801191c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 801191e:	bf00      	nop
 8011920:	e7fd      	b.n	801191e <UsageFault_Handler+0x4>

08011922 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8011922:	b480      	push	{r7}
 8011924:	af00      	add	r7, sp, #0
}
 8011926:	bf00      	nop
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8011930:	b480      	push	{r7}
 8011932:	af00      	add	r7, sp, #0
}
 8011934:	bf00      	nop
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr

0801193e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 801193e:	b480      	push	{r7}
 8011940:	af00      	add	r7, sp, #0
}
 8011942:	bf00      	nop
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr

0801194c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8011950:	f7f5 fc96 	bl	8007280 <HAL_IncTick>
}
 8011954:	bf00      	nop
 8011956:	bd80      	pop	{r7, pc}

08011958 <SDMMC1_IRQHandler>:
/**
  * @brief  Handles SD1 card interrupt request.
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	af00      	add	r7, sp, #0
  BSP_SD_IRQHandler(0);
 801195c:	2000      	movs	r0, #0
 801195e:	f7f5 fbbb 	bl	80070d8 <BSP_SD_IRQHandler>
}
 8011962:	bf00      	nop
 8011964:	bd80      	pop	{r7, pc}

08011966 <EXTI2_IRQHandler>:
  * @brief  This function handles External line 2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8011966:	b580      	push	{r7, lr}
 8011968:	af00      	add	r7, sp, #0
  BSP_TS_IRQHandler(0);
 801196a:	2000      	movs	r0, #0
 801196c:	f7f5 fc04 	bl	8007178 <BSP_TS_IRQHandler>
}
 8011970:	bf00      	nop
 8011972:	bd80      	pop	{r7, pc}

08011974 <EXTI9_5_IRQHandler>:
  * @brief  This function handles External lines 9 to 5 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI9_5_IRQHandler(void)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	af00      	add	r7, sp, #0
  BSP_SD_DETECT_IRQHandler(0);
 8011978:	2000      	movs	r0, #0
 801197a:	f7f5 fb9b 	bl	80070b4 <BSP_SD_DETECT_IRQHandler>
}
 801197e:	bf00      	nop
 8011980:	bd80      	pop	{r7, pc}

08011982 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8011982:	b580      	push	{r7, lr}
 8011984:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(BUTTON_USER);
 8011986:	2000      	movs	r0, #0
 8011988:	f7f0 fe4e 	bl	8002628 <BSP_PB_IRQHandler>
}
 801198c:	bf00      	nop
 801198e:	bd80      	pop	{r7, pc}

08011990 <DMA2_Stream0_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream0 interrupt request.
  * @retval None
  */
void DMA2_Stream0_IRQHandler(void)
{
 8011990:	b580      	push	{r7, lr}
 8011992:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(2, AUDIO_IN_DEVICE_DIGITAL_MIC2);
 8011994:	2120      	movs	r1, #32
 8011996:	2002      	movs	r0, #2
 8011998:	f7f2 fb8e 	bl	80040b8 <BSP_AUDIO_IN_IRQHandler>
}
 801199c:	bf00      	nop
 801199e:	bd80      	pop	{r7, pc}

080119a0 <DMA2_Stream2_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream2 interrupt request.
  * @retval None
  */
void DMA2_Stream2_IRQHandler(void)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(2, AUDIO_IN_DEVICE_DIGITAL_MIC4);
 80119a4:	2180      	movs	r1, #128	@ 0x80
 80119a6:	2002      	movs	r0, #2
 80119a8:	f7f2 fb86 	bl	80040b8 <BSP_AUDIO_IN_IRQHandler>
}
 80119ac:	bf00      	nop
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <DMA2_Stream3_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream3 interrupt request.
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(2, AUDIO_IN_DEVICE_DIGITAL_MIC3);
 80119b4:	2140      	movs	r1, #64	@ 0x40
 80119b6:	2002      	movs	r0, #2
 80119b8:	f7f2 fb7e 	bl	80040b8 <BSP_AUDIO_IN_IRQHandler>
}
 80119bc:	bf00      	nop
 80119be:	bd80      	pop	{r7, pc}

080119c0 <DMA2_Stream4_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream4 interrupt request.
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0, AUDIO_IN_DEVICE_ANALOG_MIC);
 80119c4:	2100      	movs	r1, #0
 80119c6:	2000      	movs	r0, #0
 80119c8:	f7f2 fb76 	bl	80040b8 <BSP_AUDIO_IN_IRQHandler>
}
 80119cc:	bf00      	nop
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <DMA2_Stream6_IRQHandler>:
  * @brief  This function handles DMA2 Stream6 interrupt request.
  * @param  None
  * @retval None
  */
void DMA2_Stream6_IRQHandler(void)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 80119d4:	2000      	movs	r0, #0
 80119d6:	f7f0 ff3f 	bl	8002858 <BSP_AUDIO_OUT_IRQHandler>
}
 80119da:	bf00      	nop
 80119dc:	bd80      	pop	{r7, pc}

080119de <DMA2_Stream7_IRQHandler>:
/**
  * @brief  This function handles DMA2 Stream7 interrupt request.
  * @retval None
  */
void DMA2_Stream7_IRQHandler(void)
{
 80119de:	b580      	push	{r7, lr}
 80119e0:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(2, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 80119e2:	2110      	movs	r1, #16
 80119e4:	2002      	movs	r0, #2
 80119e6:	f7f2 fb67 	bl	80040b8 <BSP_AUDIO_IN_IRQHandler>
}
 80119ea:	bf00      	nop
 80119ec:	bd80      	pop	{r7, pc}

080119ee <BDMA_Channel1_IRQHandler>:

void BDMA_Channel1_IRQHandler(void)
{
 80119ee:	b580      	push	{r7, lr}
 80119f0:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC1);
 80119f2:	2110      	movs	r1, #16
 80119f4:	2001      	movs	r0, #1
 80119f6:	f7f2 fb5f 	bl	80040b8 <BSP_AUDIO_IN_IRQHandler>
}
 80119fa:	bf00      	nop
 80119fc:	bd80      	pop	{r7, pc}
	...

08011a00 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8011a00:	b480      	push	{r7}
 8011a02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8011a04:	4b26      	ldr	r3, [pc, #152]	@ (8011aa0 <SystemInit+0xa0>)
 8011a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011a0a:	4a25      	ldr	r2, [pc, #148]	@ (8011aa0 <SystemInit+0xa0>)
 8011a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8011a14:	4b23      	ldr	r3, [pc, #140]	@ (8011aa4 <SystemInit+0xa4>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	4a22      	ldr	r2, [pc, #136]	@ (8011aa4 <SystemInit+0xa4>)
 8011a1a:	f043 0301 	orr.w	r3, r3, #1
 8011a1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011a20:	4b20      	ldr	r3, [pc, #128]	@ (8011aa4 <SystemInit+0xa4>)
 8011a22:	2200      	movs	r2, #0
 8011a24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8011a26:	4b1f      	ldr	r3, [pc, #124]	@ (8011aa4 <SystemInit+0xa4>)
 8011a28:	681a      	ldr	r2, [r3, #0]
 8011a2a:	491e      	ldr	r1, [pc, #120]	@ (8011aa4 <SystemInit+0xa4>)
 8011a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8011aa8 <SystemInit+0xa8>)
 8011a2e:	4013      	ands	r3, r2
 8011a30:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8011a32:	4b1c      	ldr	r3, [pc, #112]	@ (8011aa4 <SystemInit+0xa4>)
 8011a34:	2200      	movs	r2, #0
 8011a36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8011a38:	4b1a      	ldr	r3, [pc, #104]	@ (8011aa4 <SystemInit+0xa4>)
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8011a3e:	4b19      	ldr	r3, [pc, #100]	@ (8011aa4 <SystemInit+0xa4>)
 8011a40:	2200      	movs	r2, #0
 8011a42:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8011a44:	4b17      	ldr	r3, [pc, #92]	@ (8011aa4 <SystemInit+0xa4>)
 8011a46:	2200      	movs	r2, #0
 8011a48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8011a4a:	4b16      	ldr	r3, [pc, #88]	@ (8011aa4 <SystemInit+0xa4>)
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8011a50:	4b14      	ldr	r3, [pc, #80]	@ (8011aa4 <SystemInit+0xa4>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8011a56:	4b13      	ldr	r3, [pc, #76]	@ (8011aa4 <SystemInit+0xa4>)
 8011a58:	2200      	movs	r2, #0
 8011a5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8011a5c:	4b11      	ldr	r3, [pc, #68]	@ (8011aa4 <SystemInit+0xa4>)
 8011a5e:	2200      	movs	r2, #0
 8011a60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8011a62:	4b10      	ldr	r3, [pc, #64]	@ (8011aa4 <SystemInit+0xa4>)
 8011a64:	2200      	movs	r2, #0
 8011a66:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8011a68:	4b0e      	ldr	r3, [pc, #56]	@ (8011aa4 <SystemInit+0xa4>)
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8011a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8011aa4 <SystemInit+0xa4>)
 8011a70:	2200      	movs	r2, #0
 8011a72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8011a74:	4b0b      	ldr	r3, [pc, #44]	@ (8011aa4 <SystemInit+0xa4>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4a0a      	ldr	r2, [pc, #40]	@ (8011aa4 <SystemInit+0xa4>)
 8011a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011a7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8011a80:	4b08      	ldr	r3, [pc, #32]	@ (8011aa4 <SystemInit+0xa4>)
 8011a82:	2200      	movs	r2, #0
 8011a84:	661a      	str	r2, [r3, #96]	@ 0x60
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8011a86:	4b09      	ldr	r3, [pc, #36]	@ (8011aac <SystemInit+0xac>)
 8011a88:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8011a8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8011a8e:	4b04      	ldr	r3, [pc, #16]	@ (8011aa0 <SystemInit+0xa0>)
 8011a90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8011a94:	609a      	str	r2, [r3, #8]
#endif


}
 8011a96:	bf00      	nop
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr
 8011aa0:	e000ed00 	.word	0xe000ed00
 8011aa4:	58024400 	.word	0x58024400
 8011aa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8011aac:	52004000 	.word	0x52004000

08011ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
;  ldr   sp, =_estack      /* set stack pointer */
 8011ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8011ae8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8011ab4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8011ab6:	e003      	b.n	8011ac0 <LoopCopyDataInit>

08011ab8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8011aec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011aba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011abc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011abe:	3104      	adds	r1, #4

08011ac0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011ac0:	480b      	ldr	r0, [pc, #44]	@ (8011af0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8011ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8011af4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8011ac4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8011ac6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011ac8:	d3f6      	bcc.n	8011ab8 <CopyDataInit>
  ldr  r2, =_sbss
 8011aca:	4a0b      	ldr	r2, [pc, #44]	@ (8011af8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011acc:	e002      	b.n	8011ad4 <LoopFillZerobss>

08011ace <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011ace:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011ad0:	f842 3b04 	str.w	r3, [r2], #4

08011ad4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011ad4:	4b09      	ldr	r3, [pc, #36]	@ (8011afc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011ad6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011ad8:	d3f9      	bcc.n	8011ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011ada:	f7ff ff91 	bl	8011a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011ade:	f003 fc4b 	bl	8015378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011ae2:	f7ff fafb 	bl	80110dc <main>
  bx  lr    
 8011ae6:	4770      	bx	lr
;  ldr   sp, =_estack      /* set stack pointer */
 8011ae8:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 8011aec:	0802c120 	.word	0x0802c120
  ldr  r0, =_sdata
 8011af0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8011af4:	24000594 	.word	0x24000594
  ldr  r2, =_sbss
 8011af8:	240005a0 	.word	0x240005a0
  ldr  r3, = _ebss
 8011afc:	24012d84 	.word	0x24012d84

08011b00 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011b00:	e7fe      	b.n	8011b00 <ADC3_IRQHandler>
	...

08011b04 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4a22      	ldr	r2, [pc, #136]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b12:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	4a20      	ldr	r2, [pc, #128]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b1a:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	4a1e      	ldr	r2, [pc, #120]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b22:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	68db      	ldr	r3, [r3, #12]
 8011b28:	4a1c      	ldr	r2, [pc, #112]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b2a:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	691b      	ldr	r3, [r3, #16]
 8011b30:	4a1a      	ldr	r2, [pc, #104]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b32:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	695b      	ldr	r3, [r3, #20]
 8011b38:	4a18      	ldr	r2, [pc, #96]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b3a:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	699b      	ldr	r3, [r3, #24]
 8011b40:	4a16      	ldr	r2, [pc, #88]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b42:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	69db      	ldr	r3, [r3, #28]
 8011b48:	4a14      	ldr	r2, [pc, #80]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b4a:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6a1b      	ldr	r3, [r3, #32]
 8011b50:	4a12      	ldr	r2, [pc, #72]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b52:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b58:	4a10      	ldr	r2, [pc, #64]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b5a:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b60:	4a0e      	ldr	r2, [pc, #56]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b62:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8011b64:	4b0e      	ldr	r3, [pc, #56]	@ (8011ba0 <UTIL_LCD_SetFuncDriver+0x9c>)
 8011b66:	2200      	movs	r2, #0
 8011b68:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8011b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ba0 <UTIL_LCD_SetFuncDriver+0x9c>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8011b70:	4b0a      	ldr	r3, [pc, #40]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b72:	69db      	ldr	r3, [r3, #28]
 8011b74:	4a0b      	ldr	r2, [pc, #44]	@ (8011ba4 <UTIL_LCD_SetFuncDriver+0xa0>)
 8011b76:	4611      	mov	r1, r2
 8011b78:	2000      	movs	r0, #0
 8011b7a:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8011b7c:	4b07      	ldr	r3, [pc, #28]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b7e:	6a1b      	ldr	r3, [r3, #32]
 8011b80:	4a09      	ldr	r2, [pc, #36]	@ (8011ba8 <UTIL_LCD_SetFuncDriver+0xa4>)
 8011b82:	4611      	mov	r1, r2
 8011b84:	2000      	movs	r0, #0
 8011b86:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8011b88:	4b04      	ldr	r3, [pc, #16]	@ (8011b9c <UTIL_LCD_SetFuncDriver+0x98>)
 8011b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b8c:	4a07      	ldr	r2, [pc, #28]	@ (8011bac <UTIL_LCD_SetFuncDriver+0xa8>)
 8011b8e:	4611      	mov	r1, r2
 8011b90:	2000      	movs	r0, #0
 8011b92:	4798      	blx	r3
}
 8011b94:	bf00      	nop
 8011b96:	3708      	adds	r7, #8
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	24012c20 	.word	0x24012c20
 8011ba0:	24012be0 	.word	0x24012be0
 8011ba4:	24012bf4 	.word	0x24012bf4
 8011ba8:	24012bf8 	.word	0x24012bf8
 8011bac:	24012bfc 	.word	0x24012bfc

08011bb0 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b083      	sub	sp, #12
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8011bb8:	4b06      	ldr	r3, [pc, #24]	@ (8011bd4 <UTIL_LCD_SetTextColor+0x24>)
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	4a05      	ldr	r2, [pc, #20]	@ (8011bd4 <UTIL_LCD_SetTextColor+0x24>)
 8011bbe:	015b      	lsls	r3, r3, #5
 8011bc0:	4413      	add	r3, r2
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	601a      	str	r2, [r3, #0]
}
 8011bc6:	bf00      	nop
 8011bc8:	370c      	adds	r7, #12
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd0:	4770      	bx	lr
 8011bd2:	bf00      	nop
 8011bd4:	24012be0 	.word	0x24012be0

08011bd8 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8011bd8:	b480      	push	{r7}
 8011bda:	b083      	sub	sp, #12
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8011be0:	4b06      	ldr	r3, [pc, #24]	@ (8011bfc <UTIL_LCD_SetBackColor+0x24>)
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	4a05      	ldr	r2, [pc, #20]	@ (8011bfc <UTIL_LCD_SetBackColor+0x24>)
 8011be6:	015b      	lsls	r3, r3, #5
 8011be8:	4413      	add	r3, r2
 8011bea:	3304      	adds	r3, #4
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	601a      	str	r2, [r3, #0]
}
 8011bf0:	bf00      	nop
 8011bf2:	370c      	adds	r7, #12
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr
 8011bfc:	24012be0 	.word	0x24012be0

08011c00 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8011c08:	4b06      	ldr	r3, [pc, #24]	@ (8011c24 <UTIL_LCD_SetFont+0x24>)
 8011c0a:	68db      	ldr	r3, [r3, #12]
 8011c0c:	4a05      	ldr	r2, [pc, #20]	@ (8011c24 <UTIL_LCD_SetFont+0x24>)
 8011c0e:	015b      	lsls	r3, r3, #5
 8011c10:	4413      	add	r3, r2
 8011c12:	3308      	adds	r3, #8
 8011c14:	687a      	ldr	r2, [r7, #4]
 8011c16:	601a      	str	r2, [r3, #0]
}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr
 8011c24:	24012be0 	.word	0x24012be0

08011c28 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8011c28:	b590      	push	{r4, r7, lr}
 8011c2a:	b087      	sub	sp, #28
 8011c2c:	af02      	add	r7, sp, #8
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	60b9      	str	r1, [r7, #8]
 8011c32:	607a      	str	r2, [r7, #4]
 8011c34:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8011c36:	4b08      	ldr	r3, [pc, #32]	@ (8011c58 <UTIL_LCD_FillRGBRect+0x30>)
 8011c38:	685c      	ldr	r4, [r3, #4]
 8011c3a:	4b08      	ldr	r3, [pc, #32]	@ (8011c5c <UTIL_LCD_FillRGBRect+0x34>)
 8011c3c:	6918      	ldr	r0, [r3, #16]
 8011c3e:	6a3b      	ldr	r3, [r7, #32]
 8011c40:	9301      	str	r3, [sp, #4]
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	9300      	str	r3, [sp, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	68f9      	ldr	r1, [r7, #12]
 8011c4c:	47a0      	blx	r4
}
 8011c4e:	bf00      	nop
 8011c50:	3714      	adds	r7, #20
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd90      	pop	{r4, r7, pc}
 8011c56:	bf00      	nop
 8011c58:	24012c20 	.word	0x24012c20
 8011c5c:	24012be0 	.word	0x24012be0

08011c60 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8011c60:	b590      	push	{r4, r7, lr}
 8011c62:	b087      	sub	sp, #28
 8011c64:	af02      	add	r7, sp, #8
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	60b9      	str	r1, [r7, #8]
 8011c6a:	607a      	str	r2, [r7, #4]
 8011c6c:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8011c6e:	4b15      	ldr	r3, [pc, #84]	@ (8011cc4 <UTIL_LCD_DrawVLine+0x64>)
 8011c70:	69db      	ldr	r3, [r3, #28]
 8011c72:	2b02      	cmp	r3, #2
 8011c74:	d118      	bne.n	8011ca8 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8011c76:	4b14      	ldr	r3, [pc, #80]	@ (8011cc8 <UTIL_LCD_DrawVLine+0x68>)
 8011c78:	68dc      	ldr	r4, [r3, #12]
 8011c7a:	4b12      	ldr	r3, [pc, #72]	@ (8011cc4 <UTIL_LCD_DrawVLine+0x64>)
 8011c7c:	6918      	ldr	r0, [r3, #16]
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	08db      	lsrs	r3, r3, #3
 8011c82:	f003 021f 	and.w	r2, r3, #31
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	0a9b      	lsrs	r3, r3, #10
 8011c8a:	015b      	lsls	r3, r3, #5
 8011c8c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011c90:	431a      	orrs	r2, r3
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	0cdb      	lsrs	r3, r3, #19
 8011c96:	02db      	lsls	r3, r3, #11
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	9300      	str	r3, [sp, #0]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	68f9      	ldr	r1, [r7, #12]
 8011ca4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8011ca6:	e009      	b.n	8011cbc <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8011ca8:	4b07      	ldr	r3, [pc, #28]	@ (8011cc8 <UTIL_LCD_DrawVLine+0x68>)
 8011caa:	68dc      	ldr	r4, [r3, #12]
 8011cac:	4b05      	ldr	r3, [pc, #20]	@ (8011cc4 <UTIL_LCD_DrawVLine+0x64>)
 8011cae:	6918      	ldr	r0, [r3, #16]
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	9300      	str	r3, [sp, #0]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	68ba      	ldr	r2, [r7, #8]
 8011cb8:	68f9      	ldr	r1, [r7, #12]
 8011cba:	47a0      	blx	r4
}
 8011cbc:	bf00      	nop
 8011cbe:	3714      	adds	r7, #20
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd90      	pop	{r4, r7, pc}
 8011cc4:	24012be0 	.word	0x24012be0
 8011cc8:	24012c20 	.word	0x24012c20

08011ccc <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b084      	sub	sp, #16
 8011cd0:	af02      	add	r7, sp, #8
 8011cd2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8011cd4:	4b07      	ldr	r3, [pc, #28]	@ (8011cf4 <UTIL_LCD_Clear+0x28>)
 8011cd6:	695a      	ldr	r2, [r3, #20]
 8011cd8:	4b06      	ldr	r3, [pc, #24]	@ (8011cf4 <UTIL_LCD_Clear+0x28>)
 8011cda:	6999      	ldr	r1, [r3, #24]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	f000 f8eb 	bl	8011ec0 <UTIL_LCD_FillRect>
}
 8011cea:	bf00      	nop
 8011cec:	3708      	adds	r7, #8
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	24012be0 	.word	0x24012be0

08011cf8 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b084      	sub	sp, #16
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	60b9      	str	r1, [r7, #8]
 8011d02:	4613      	mov	r3, r2
 8011d04:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8011d06:	4b16      	ldr	r3, [pc, #88]	@ (8011d60 <UTIL_LCD_DisplayChar+0x68>)
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	4a15      	ldr	r2, [pc, #84]	@ (8011d60 <UTIL_LCD_DisplayChar+0x68>)
 8011d0c:	015b      	lsls	r3, r3, #5
 8011d0e:	4413      	add	r3, r2
 8011d10:	3308      	adds	r3, #8
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	79fb      	ldrb	r3, [r7, #7]
 8011d18:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8011d1a:	4911      	ldr	r1, [pc, #68]	@ (8011d60 <UTIL_LCD_DisplayChar+0x68>)
 8011d1c:	68c9      	ldr	r1, [r1, #12]
 8011d1e:	4810      	ldr	r0, [pc, #64]	@ (8011d60 <UTIL_LCD_DisplayChar+0x68>)
 8011d20:	0149      	lsls	r1, r1, #5
 8011d22:	4401      	add	r1, r0
 8011d24:	3108      	adds	r1, #8
 8011d26:	6809      	ldr	r1, [r1, #0]
 8011d28:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8011d2a:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8011d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8011d60 <UTIL_LCD_DisplayChar+0x68>)
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	480b      	ldr	r0, [pc, #44]	@ (8011d60 <UTIL_LCD_DisplayChar+0x68>)
 8011d34:	015b      	lsls	r3, r3, #5
 8011d36:	4403      	add	r3, r0
 8011d38:	3308      	adds	r3, #8
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	889b      	ldrh	r3, [r3, #4]
 8011d3e:	3307      	adds	r3, #7
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	da00      	bge.n	8011d46 <UTIL_LCD_DisplayChar+0x4e>
 8011d44:	3307      	adds	r3, #7
 8011d46:	10db      	asrs	r3, r3, #3
 8011d48:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8011d4c:	4413      	add	r3, r2
 8011d4e:	461a      	mov	r2, r3
 8011d50:	68b9      	ldr	r1, [r7, #8]
 8011d52:	68f8      	ldr	r0, [r7, #12]
 8011d54:	f000 f8ee 	bl	8011f34 <DrawChar>
}
 8011d58:	bf00      	nop
 8011d5a:	3710      	adds	r7, #16
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	24012be0 	.word	0x24012be0

08011d64 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b08a      	sub	sp, #40	@ 0x28
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	60f8      	str	r0, [r7, #12]
 8011d6c:	60b9      	str	r1, [r7, #8]
 8011d6e:	607a      	str	r2, [r7, #4]
 8011d70:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8011d72:	2301      	movs	r3, #1
 8011d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d76:	2300      	movs	r3, #0
 8011d78:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	61fb      	str	r3, [r7, #28]
 8011d7e:	2300      	movs	r3, #0
 8011d80:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8011d86:	e002      	b.n	8011d8e <UTIL_LCD_DisplayStringAt+0x2a>
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	61fb      	str	r3, [r7, #28]
 8011d8e:	69bb      	ldr	r3, [r7, #24]
 8011d90:	1c5a      	adds	r2, r3, #1
 8011d92:	61ba      	str	r2, [r7, #24]
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d1f6      	bne.n	8011d88 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8011d9a:	4b48      	ldr	r3, [pc, #288]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011d9c:	695b      	ldr	r3, [r3, #20]
 8011d9e:	4a47      	ldr	r2, [pc, #284]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011da0:	68d2      	ldr	r2, [r2, #12]
 8011da2:	4946      	ldr	r1, [pc, #280]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011da4:	0152      	lsls	r2, r2, #5
 8011da6:	440a      	add	r2, r1
 8011da8:	3208      	adds	r2, #8
 8011daa:	6812      	ldr	r2, [r2, #0]
 8011dac:	8892      	ldrh	r2, [r2, #4]
 8011dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8011db2:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8011db4:	78fb      	ldrb	r3, [r7, #3]
 8011db6:	2b03      	cmp	r3, #3
 8011db8:	d018      	beq.n	8011dec <UTIL_LCD_DisplayStringAt+0x88>
 8011dba:	2b03      	cmp	r3, #3
 8011dbc:	dc2a      	bgt.n	8011e14 <UTIL_LCD_DisplayStringAt+0xb0>
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d002      	beq.n	8011dc8 <UTIL_LCD_DisplayStringAt+0x64>
 8011dc2:	2b02      	cmp	r3, #2
 8011dc4:	d015      	beq.n	8011df2 <UTIL_LCD_DisplayStringAt+0x8e>
 8011dc6:	e025      	b.n	8011e14 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8011dc8:	697a      	ldr	r2, [r7, #20]
 8011dca:	69fb      	ldr	r3, [r7, #28]
 8011dcc:	1ad3      	subs	r3, r2, r3
 8011dce:	4a3b      	ldr	r2, [pc, #236]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011dd0:	68d2      	ldr	r2, [r2, #12]
 8011dd2:	493a      	ldr	r1, [pc, #232]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011dd4:	0152      	lsls	r2, r2, #5
 8011dd6:	440a      	add	r2, r1
 8011dd8:	3208      	adds	r2, #8
 8011dda:	6812      	ldr	r2, [r2, #0]
 8011ddc:	8892      	ldrh	r2, [r2, #4]
 8011dde:	fb02 f303 	mul.w	r3, r2, r3
 8011de2:	085b      	lsrs	r3, r3, #1
 8011de4:	68fa      	ldr	r2, [r7, #12]
 8011de6:	4413      	add	r3, r2
 8011de8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011dea:	e016      	b.n	8011e1a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011df0:	e013      	b.n	8011e1a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8011df2:	697a      	ldr	r2, [r7, #20]
 8011df4:	69fb      	ldr	r3, [r7, #28]
 8011df6:	1ad3      	subs	r3, r2, r3
 8011df8:	4a30      	ldr	r2, [pc, #192]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011dfa:	68d2      	ldr	r2, [r2, #12]
 8011dfc:	492f      	ldr	r1, [pc, #188]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011dfe:	0152      	lsls	r2, r2, #5
 8011e00:	440a      	add	r2, r1
 8011e02:	3208      	adds	r2, #8
 8011e04:	6812      	ldr	r2, [r2, #0]
 8011e06:	8892      	ldrh	r2, [r2, #4]
 8011e08:	fb03 f202 	mul.w	r2, r3, r2
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	1ad3      	subs	r3, r2, r3
 8011e10:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011e12:	e002      	b.n	8011e1a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8011e18:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8011e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d003      	beq.n	8011e28 <UTIL_LCD_DisplayStringAt+0xc4>
 8011e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011e26:	d31b      	bcc.n	8011e60 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8011e2c:	e018      	b.n	8011e60 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	461a      	mov	r2, r3
 8011e34:	68b9      	ldr	r1, [r7, #8]
 8011e36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011e38:	f7ff ff5e 	bl	8011cf8 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8011e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	4a1e      	ldr	r2, [pc, #120]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011e42:	015b      	lsls	r3, r3, #5
 8011e44:	4413      	add	r3, r2
 8011e46:	3308      	adds	r3, #8
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	889b      	ldrh	r3, [r3, #4]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e50:	4413      	add	r3, r2
 8011e52:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	3301      	adds	r3, #1
 8011e58:	607b      	str	r3, [r7, #4]
    i++;
 8011e5a:	6a3b      	ldr	r3, [r7, #32]
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	781b      	ldrb	r3, [r3, #0]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	bf14      	ite	ne
 8011e68:	2301      	movne	r3, #1
 8011e6a:	2300      	moveq	r3, #0
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	4b13      	ldr	r3, [pc, #76]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011e70:	6959      	ldr	r1, [r3, #20]
 8011e72:	4b12      	ldr	r3, [pc, #72]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011e74:	68db      	ldr	r3, [r3, #12]
 8011e76:	4811      	ldr	r0, [pc, #68]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011e78:	015b      	lsls	r3, r3, #5
 8011e7a:	4403      	add	r3, r0
 8011e7c:	3308      	adds	r3, #8
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	889b      	ldrh	r3, [r3, #4]
 8011e82:	4618      	mov	r0, r3
 8011e84:	6a3b      	ldr	r3, [r7, #32]
 8011e86:	fb00 f303 	mul.w	r3, r0, r3
 8011e8a:	1acb      	subs	r3, r1, r3
 8011e8c:	b29b      	uxth	r3, r3
 8011e8e:	490b      	ldr	r1, [pc, #44]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011e90:	68c9      	ldr	r1, [r1, #12]
 8011e92:	480a      	ldr	r0, [pc, #40]	@ (8011ebc <UTIL_LCD_DisplayStringAt+0x158>)
 8011e94:	0149      	lsls	r1, r1, #5
 8011e96:	4401      	add	r1, r0
 8011e98:	3108      	adds	r1, #8
 8011e9a:	6809      	ldr	r1, [r1, #0]
 8011e9c:	8889      	ldrh	r1, [r1, #4]
 8011e9e:	428b      	cmp	r3, r1
 8011ea0:	bf2c      	ite	cs
 8011ea2:	2301      	movcs	r3, #1
 8011ea4:	2300      	movcc	r3, #0
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	4013      	ands	r3, r2
 8011eaa:	b2db      	uxtb	r3, r3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d1be      	bne.n	8011e2e <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8011eb0:	bf00      	nop
 8011eb2:	bf00      	nop
 8011eb4:	3728      	adds	r7, #40	@ 0x28
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	24012be0 	.word	0x24012be0

08011ec0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8011ec0:	b590      	push	{r4, r7, lr}
 8011ec2:	b087      	sub	sp, #28
 8011ec4:	af02      	add	r7, sp, #8
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	607a      	str	r2, [r7, #4]
 8011ecc:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8011ece:	4b17      	ldr	r3, [pc, #92]	@ (8011f2c <UTIL_LCD_FillRect+0x6c>)
 8011ed0:	69db      	ldr	r3, [r3, #28]
 8011ed2:	2b02      	cmp	r3, #2
 8011ed4:	d11a      	bne.n	8011f0c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8011ed6:	4b16      	ldr	r3, [pc, #88]	@ (8011f30 <UTIL_LCD_FillRect+0x70>)
 8011ed8:	691c      	ldr	r4, [r3, #16]
 8011eda:	4b14      	ldr	r3, [pc, #80]	@ (8011f2c <UTIL_LCD_FillRect+0x6c>)
 8011edc:	6918      	ldr	r0, [r3, #16]
 8011ede:	6a3b      	ldr	r3, [r7, #32]
 8011ee0:	08db      	lsrs	r3, r3, #3
 8011ee2:	f003 021f 	and.w	r2, r3, #31
 8011ee6:	6a3b      	ldr	r3, [r7, #32]
 8011ee8:	0a9b      	lsrs	r3, r3, #10
 8011eea:	015b      	lsls	r3, r3, #5
 8011eec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011ef0:	431a      	orrs	r2, r3
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	0cdb      	lsrs	r3, r3, #19
 8011ef6:	02db      	lsls	r3, r3, #11
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	4313      	orrs	r3, r2
 8011efc:	9301      	str	r3, [sp, #4]
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	68ba      	ldr	r2, [r7, #8]
 8011f06:	68f9      	ldr	r1, [r7, #12]
 8011f08:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8011f0a:	e00b      	b.n	8011f24 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8011f0c:	4b08      	ldr	r3, [pc, #32]	@ (8011f30 <UTIL_LCD_FillRect+0x70>)
 8011f0e:	691c      	ldr	r4, [r3, #16]
 8011f10:	4b06      	ldr	r3, [pc, #24]	@ (8011f2c <UTIL_LCD_FillRect+0x6c>)
 8011f12:	6918      	ldr	r0, [r3, #16]
 8011f14:	6a3b      	ldr	r3, [r7, #32]
 8011f16:	9301      	str	r3, [sp, #4]
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	68ba      	ldr	r2, [r7, #8]
 8011f20:	68f9      	ldr	r1, [r7, #12]
 8011f22:	47a0      	blx	r4
}
 8011f24:	bf00      	nop
 8011f26:	3714      	adds	r7, #20
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd90      	pop	{r4, r7, pc}
 8011f2c:	24012be0 	.word	0x24012be0
 8011f30:	24012c20 	.word	0x24012c20

08011f34 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b0b2      	sub	sp, #200	@ 0xc8
 8011f38:	af02      	add	r7, sp, #8
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	60b9      	str	r1, [r7, #8]
 8011f3e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8011f40:	2300      	movs	r3, #0
 8011f42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011f46:	2300      	movs	r3, #0
 8011f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8011f4c:	4ba5      	ldr	r3, [pc, #660]	@ (80121e4 <DrawChar+0x2b0>)
 8011f4e:	68db      	ldr	r3, [r3, #12]
 8011f50:	4aa4      	ldr	r2, [pc, #656]	@ (80121e4 <DrawChar+0x2b0>)
 8011f52:	015b      	lsls	r3, r3, #5
 8011f54:	4413      	add	r3, r2
 8011f56:	3308      	adds	r3, #8
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	88db      	ldrh	r3, [r3, #6]
 8011f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8011f60:	4ba0      	ldr	r3, [pc, #640]	@ (80121e4 <DrawChar+0x2b0>)
 8011f62:	68db      	ldr	r3, [r3, #12]
 8011f64:	4a9f      	ldr	r2, [pc, #636]	@ (80121e4 <DrawChar+0x2b0>)
 8011f66:	015b      	lsls	r3, r3, #5
 8011f68:	4413      	add	r3, r2
 8011f6a:	3308      	adds	r3, #8
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	889b      	ldrh	r3, [r3, #4]
 8011f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8011f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f78:	3307      	adds	r3, #7
 8011f7a:	f023 0207 	bic.w	r2, r3, #7
 8011f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f82:	1ad3      	subs	r3, r2, r3
 8011f84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8011f88:	2300      	movs	r3, #0
 8011f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011f8e:	e11c      	b.n	80121ca <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8011f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f94:	3307      	adds	r3, #7
 8011f96:	08db      	lsrs	r3, r3, #3
 8011f98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8011f9c:	fb02 f303 	mul.w	r3, r2, r3
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8011fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fac:	3307      	adds	r3, #7
 8011fae:	08db      	lsrs	r3, r3, #3
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	d002      	beq.n	8011fba <DrawChar+0x86>
 8011fb4:	2b02      	cmp	r3, #2
 8011fb6:	d006      	beq.n	8011fc6 <DrawChar+0x92>
 8011fb8:	e011      	b.n	8011fde <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8011fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8011fc4:	e01d      	b.n	8012002 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8011fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	021b      	lsls	r3, r3, #8
 8011fce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011fd2:	3201      	adds	r2, #1
 8011fd4:	7812      	ldrb	r2, [r2, #0]
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8011fdc:	e011      	b.n	8012002 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8011fde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	041a      	lsls	r2, r3, #16
 8011fe6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011fea:	3301      	adds	r3, #1
 8011fec:	781b      	ldrb	r3, [r3, #0]
 8011fee:	021b      	lsls	r3, r3, #8
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011ff6:	3202      	adds	r2, #2
 8011ff8:	7812      	ldrb	r2, [r2, #0]
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8012000:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8012002:	4b78      	ldr	r3, [pc, #480]	@ (80121e4 <DrawChar+0x2b0>)
 8012004:	68db      	ldr	r3, [r3, #12]
 8012006:	4a77      	ldr	r2, [pc, #476]	@ (80121e4 <DrawChar+0x2b0>)
 8012008:	015b      	lsls	r3, r3, #5
 801200a:	4413      	add	r3, r2
 801200c:	331c      	adds	r3, #28
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b02      	cmp	r3, #2
 8012012:	f040 808c 	bne.w	801212e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8012016:	2300      	movs	r3, #0
 8012018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801201c:	e074      	b.n	8012108 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 801201e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012026:	1ad2      	subs	r2, r2, r3
 8012028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801202c:	4413      	add	r3, r2
 801202e:	3b01      	subs	r3, #1
 8012030:	2201      	movs	r2, #1
 8012032:	fa02 f303 	lsl.w	r3, r2, r3
 8012036:	461a      	mov	r2, r3
 8012038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801203c:	4013      	ands	r3, r2
 801203e:	2b00      	cmp	r3, #0
 8012040:	d02d      	beq.n	801209e <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8012042:	4b68      	ldr	r3, [pc, #416]	@ (80121e4 <DrawChar+0x2b0>)
 8012044:	68db      	ldr	r3, [r3, #12]
 8012046:	4a67      	ldr	r2, [pc, #412]	@ (80121e4 <DrawChar+0x2b0>)
 8012048:	015b      	lsls	r3, r3, #5
 801204a:	4413      	add	r3, r2
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	08db      	lsrs	r3, r3, #3
 8012050:	b29b      	uxth	r3, r3
 8012052:	f003 031f 	and.w	r3, r3, #31
 8012056:	b29a      	uxth	r2, r3
 8012058:	4b62      	ldr	r3, [pc, #392]	@ (80121e4 <DrawChar+0x2b0>)
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	4961      	ldr	r1, [pc, #388]	@ (80121e4 <DrawChar+0x2b0>)
 801205e:	015b      	lsls	r3, r3, #5
 8012060:	440b      	add	r3, r1
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	0a9b      	lsrs	r3, r3, #10
 8012066:	b29b      	uxth	r3, r3
 8012068:	015b      	lsls	r3, r3, #5
 801206a:	b29b      	uxth	r3, r3
 801206c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8012070:	b29b      	uxth	r3, r3
 8012072:	4313      	orrs	r3, r2
 8012074:	b29a      	uxth	r2, r3
 8012076:	4b5b      	ldr	r3, [pc, #364]	@ (80121e4 <DrawChar+0x2b0>)
 8012078:	68db      	ldr	r3, [r3, #12]
 801207a:	495a      	ldr	r1, [pc, #360]	@ (80121e4 <DrawChar+0x2b0>)
 801207c:	015b      	lsls	r3, r3, #5
 801207e:	440b      	add	r3, r1
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	0cdb      	lsrs	r3, r3, #19
 8012084:	b29b      	uxth	r3, r3
 8012086:	02db      	lsls	r3, r3, #11
 8012088:	b29b      	uxth	r3, r3
 801208a:	4313      	orrs	r3, r2
 801208c:	b29a      	uxth	r2, r3
 801208e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012092:	005b      	lsls	r3, r3, #1
 8012094:	33c0      	adds	r3, #192	@ 0xc0
 8012096:	443b      	add	r3, r7
 8012098:	f823 2c4c 	strh.w	r2, [r3, #-76]
 801209c:	e02f      	b.n	80120fe <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801209e:	4b51      	ldr	r3, [pc, #324]	@ (80121e4 <DrawChar+0x2b0>)
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	4a50      	ldr	r2, [pc, #320]	@ (80121e4 <DrawChar+0x2b0>)
 80120a4:	015b      	lsls	r3, r3, #5
 80120a6:	4413      	add	r3, r2
 80120a8:	3304      	adds	r3, #4
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	08db      	lsrs	r3, r3, #3
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	f003 031f 	and.w	r3, r3, #31
 80120b4:	b29a      	uxth	r2, r3
 80120b6:	4b4b      	ldr	r3, [pc, #300]	@ (80121e4 <DrawChar+0x2b0>)
 80120b8:	68db      	ldr	r3, [r3, #12]
 80120ba:	494a      	ldr	r1, [pc, #296]	@ (80121e4 <DrawChar+0x2b0>)
 80120bc:	015b      	lsls	r3, r3, #5
 80120be:	440b      	add	r3, r1
 80120c0:	3304      	adds	r3, #4
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	0a9b      	lsrs	r3, r3, #10
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	015b      	lsls	r3, r3, #5
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	4313      	orrs	r3, r2
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	4b43      	ldr	r3, [pc, #268]	@ (80121e4 <DrawChar+0x2b0>)
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	4942      	ldr	r1, [pc, #264]	@ (80121e4 <DrawChar+0x2b0>)
 80120dc:	015b      	lsls	r3, r3, #5
 80120de:	440b      	add	r3, r1
 80120e0:	3304      	adds	r3, #4
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	0cdb      	lsrs	r3, r3, #19
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	02db      	lsls	r3, r3, #11
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	4313      	orrs	r3, r2
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80120f4:	005b      	lsls	r3, r3, #1
 80120f6:	33c0      	adds	r3, #192	@ 0xc0
 80120f8:	443b      	add	r3, r7
 80120fa:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80120fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012102:	3301      	adds	r3, #1
 8012104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012108:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801210c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012110:	429a      	cmp	r2, r3
 8012112:	d384      	bcc.n	801201e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8012114:	68b9      	ldr	r1, [r7, #8]
 8012116:	1c4b      	adds	r3, r1, #1
 8012118:	60bb      	str	r3, [r7, #8]
 801211a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801211e:	2301      	movs	r3, #1
 8012120:	9300      	str	r3, [sp, #0]
 8012122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012126:	68f8      	ldr	r0, [r7, #12]
 8012128:	f7ff fd7e 	bl	8011c28 <UTIL_LCD_FillRGBRect>
 801212c:	e048      	b.n	80121c0 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 801212e:	2300      	movs	r3, #0
 8012130:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012134:	e032      	b.n	801219c <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8012136:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801213a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801213e:	1ad2      	subs	r2, r2, r3
 8012140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012144:	4413      	add	r3, r2
 8012146:	3b01      	subs	r3, #1
 8012148:	2201      	movs	r2, #1
 801214a:	fa02 f303 	lsl.w	r3, r2, r3
 801214e:	461a      	mov	r2, r3
 8012150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012154:	4013      	ands	r3, r2
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00d      	beq.n	8012176 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801215a:	4b22      	ldr	r3, [pc, #136]	@ (80121e4 <DrawChar+0x2b0>)
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	4a21      	ldr	r2, [pc, #132]	@ (80121e4 <DrawChar+0x2b0>)
 8012160:	015b      	lsls	r3, r3, #5
 8012162:	4413      	add	r3, r2
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	33c0      	adds	r3, #192	@ 0xc0
 801216e:	443b      	add	r3, r7
 8012170:	f843 2cac 	str.w	r2, [r3, #-172]
 8012174:	e00d      	b.n	8012192 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8012176:	4b1b      	ldr	r3, [pc, #108]	@ (80121e4 <DrawChar+0x2b0>)
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	4a1a      	ldr	r2, [pc, #104]	@ (80121e4 <DrawChar+0x2b0>)
 801217c:	015b      	lsls	r3, r3, #5
 801217e:	4413      	add	r3, r2
 8012180:	3304      	adds	r3, #4
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	33c0      	adds	r3, #192	@ 0xc0
 801218c:	443b      	add	r3, r7
 801218e:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8012192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8012196:	3301      	adds	r3, #1
 8012198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801219c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80121a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d3c6      	bcc.n	8012136 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80121a8:	68b9      	ldr	r1, [r7, #8]
 80121aa:	1c4b      	adds	r3, r1, #1
 80121ac:	60bb      	str	r3, [r7, #8]
 80121ae:	f107 0214 	add.w	r2, r7, #20
 80121b2:	2301      	movs	r3, #1
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f7ff fd34 	bl	8011c28 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80121c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80121c4:	3301      	adds	r3, #1
 80121c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80121ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80121ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80121d2:	429a      	cmp	r2, r3
 80121d4:	f4ff aedc 	bcc.w	8011f90 <DrawChar+0x5c>
    }
  }
}
 80121d8:	bf00      	nop
 80121da:	bf00      	nop
 80121dc:	37c0      	adds	r7, #192	@ 0xc0
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	24012be0 	.word	0x24012be0

080121e8 <D16_GENERIC>:
 80121e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ec:	b089      	sub	sp, #36	@ 0x24
 80121ee:	6993      	ldr	r3, [r2, #24]
 80121f0:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80121f2:	9103      	str	r1, [sp, #12]
 80121f4:	9307      	str	r3, [sp, #28]
 80121f6:	69d3      	ldr	r3, [r2, #28]
 80121f8:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 80121fc:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8012200:	9106      	str	r1, [sp, #24]
 8012202:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	@ 0x30
 8012206:	2d00      	cmp	r5, #0
 8012208:	d063      	beq.n	80122d2 <D16_GENERIC+0xea>
 801220a:	f001 0520 	and.w	r5, r1, #32
 801220e:	f001 0110 	and.w	r1, r1, #16
 8012212:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 80122f4 <D16_GENERIC+0x10c>
 8012216:	46c1      	mov	r9, r8
 8012218:	9104      	str	r1, [sp, #16]
 801221a:	2100      	movs	r1, #0
 801221c:	9505      	str	r5, [sp, #20]
 801221e:	e04d      	b.n	80122bc <D16_GENERIC+0xd4>
 8012220:	5d87      	ldrb	r7, [r0, r6]
 8012222:	7805      	ldrb	r5, [r0, #0]
 8012224:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8012228:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 801222c:	b2fe      	uxtb	r6, r7
 801222e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8012232:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8012236:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 801223a:	441d      	add	r5, r3
 801223c:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8012240:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8012244:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8012248:	0a9b      	lsrs	r3, r3, #10
 801224a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 801224e:	4d27      	ldr	r5, [pc, #156]	@ (80122ec <D16_GENERIC+0x104>)
 8012250:	fb26 c505 	smlad	r5, r6, r5, ip
 8012254:	4f26      	ldr	r7, [pc, #152]	@ (80122f0 <D16_GENERIC+0x108>)
 8012256:	fb26 fc07 	smuad	ip, r6, r7
 801225a:	9e04      	ldr	r6, [sp, #16]
 801225c:	f101 0801 	add.w	r8, r1, #1
 8012260:	f5a5 6500 	sub.w	r5, r5, #2048	@ 0x800
 8012264:	b1ae      	cbz	r6, 8012292 <D16_GENERIC+0xaa>
 8012266:	442c      	add	r4, r5
 8012268:	f8d2 b020 	ldr.w	fp, [r2, #32]
 801226c:	eba4 040a 	sub.w	r4, r4, sl
 8012270:	46aa      	mov	sl, r5
 8012272:	17e7      	asrs	r7, r4, #31
 8012274:	fba4 450b 	umull	r4, r5, r4, fp
 8012278:	e9cd 4500 	strd	r4, r5, [sp]
 801227c:	fb0b 5407 	mla	r4, fp, r7, r5
 8012280:	9401      	str	r4, [sp, #4]
 8012282:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012286:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801228a:	f145 0500 	adc.w	r5, r5, #0
 801228e:	006c      	lsls	r4, r5, #1
 8012290:	4625      	mov	r5, r4
 8012292:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 8012296:	042d      	lsls	r5, r5, #16
 8012298:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801229c:	2700      	movs	r7, #0
 801229e:	fb01 fb0b 	mul.w	fp, r1, fp
 80122a2:	fa1f f188 	uxth.w	r1, r8
 80122a6:	fbc9 6705 	smlal	r6, r7, r9, r5
 80122aa:	9e03      	ldr	r6, [sp, #12]
 80122ac:	10bd      	asrs	r5, r7, #2
 80122ae:	f305 050f 	ssat	r5, #16, r5
 80122b2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80122b6:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80122b8:	428d      	cmp	r5, r1
 80122ba:	d90a      	bls.n	80122d2 <D16_GENERIC+0xea>
 80122bc:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80122be:	2d01      	cmp	r5, #1
 80122c0:	b2ee      	uxtb	r6, r5
 80122c2:	d1ad      	bne.n	8012220 <D16_GENERIC+0x38>
 80122c4:	9d05      	ldr	r5, [sp, #20]
 80122c6:	f850 7b02 	ldr.w	r7, [r0], #2
 80122ca:	2d00      	cmp	r5, #0
 80122cc:	d0ae      	beq.n	801222c <D16_GENERIC+0x44>
 80122ce:	ba7f      	rev16	r7, r7
 80122d0:	e7ac      	b.n	801222c <D16_GENERIC+0x44>
 80122d2:	2000      	movs	r0, #0
 80122d4:	9906      	ldr	r1, [sp, #24]
 80122d6:	61d3      	str	r3, [r2, #28]
 80122d8:	9b07      	ldr	r3, [sp, #28]
 80122da:	f8c2 c008 	str.w	ip, [r2, #8]
 80122de:	60d1      	str	r1, [r2, #12]
 80122e0:	6193      	str	r3, [r2, #24]
 80122e2:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 80122e6:	b009      	add	sp, #36	@ 0x24
 80122e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ec:	00030001 	.word	0x00030001
 80122f0:	00010003 	.word	0x00010003
 80122f4:	24000000 	.word	0x24000000

080122f8 <D24_GENERIC>:
 80122f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122fc:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8012300:	b089      	sub	sp, #36	@ 0x24
 8012302:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8012304:	9303      	str	r3, [sp, #12]
 8012306:	6993      	ldr	r3, [r2, #24]
 8012308:	9104      	str	r1, [sp, #16]
 801230a:	9307      	str	r3, [sp, #28]
 801230c:	69d1      	ldr	r1, [r2, #28]
 801230e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8012312:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	@ 0x30
 8012316:	2e00      	cmp	r6, #0
 8012318:	f000 8088 	beq.w	801242c <D24_GENERIC+0x134>
 801231c:	f005 0620 	and.w	r6, r5, #32
 8012320:	f005 0510 	and.w	r5, r5, #16
 8012324:	f04f 0c00 	mov.w	ip, #0
 8012328:	f8df e140 	ldr.w	lr, [pc, #320]	@ 801246c <D24_GENERIC+0x174>
 801232c:	9606      	str	r6, [sp, #24]
 801232e:	9505      	str	r5, [sp, #20]
 8012330:	e064      	b.n	80123fc <D24_GENERIC+0x104>
 8012332:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8012336:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801233a:	f810 b007 	ldrb.w	fp, [r0, r7]
 801233e:	042d      	lsls	r5, r5, #16
 8012340:	19f0      	adds	r0, r6, r7
 8012342:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8012346:	44a9      	add	r9, r5
 8012348:	fa5f f689 	uxtb.w	r6, r9
 801234c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8012350:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8012354:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8012358:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 801235c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8012360:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8012364:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8012368:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801236c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8012370:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8012374:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8012378:	4d3a      	ldr	r5, [pc, #232]	@ (8012464 <D24_GENERIC+0x16c>)
 801237a:	fb26 8705 	smlad	r7, r6, r5, r8
 801237e:	4d3a      	ldr	r5, [pc, #232]	@ (8012468 <D24_GENERIC+0x170>)
 8012380:	fb26 3805 	smlad	r8, r6, r5, r3
 8012384:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8012388:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801238c:	2301      	movs	r3, #1
 801238e:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8012392:	fb26 f603 	smuad	r6, r6, r3
 8012396:	eb0c 0903 	add.w	r9, ip, r3
 801239a:	eb0b 0306 	add.w	r3, fp, r6
 801239e:	9e05      	ldr	r6, [sp, #20]
 80123a0:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 80123a4:	b1ae      	cbz	r6, 80123d2 <D24_GENERIC+0xda>
 80123a6:	442c      	add	r4, r5
 80123a8:	9e03      	ldr	r6, [sp, #12]
 80123aa:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80123ae:	1ba4      	subs	r4, r4, r6
 80123b0:	9503      	str	r5, [sp, #12]
 80123b2:	17e7      	asrs	r7, r4, #31
 80123b4:	fba4 450b 	umull	r4, r5, r4, fp
 80123b8:	e9cd 4500 	strd	r4, r5, [sp]
 80123bc:	fb0b 5407 	mla	r4, fp, r7, r5
 80123c0:	9401      	str	r4, [sp, #4]
 80123c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80123c6:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 80123ca:	f145 0500 	adc.w	r5, r5, #0
 80123ce:	006c      	lsls	r4, r5, #1
 80123d0:	4625      	mov	r5, r4
 80123d2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 80123d6:	03ad      	lsls	r5, r5, #14
 80123d8:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 80123dc:	2700      	movs	r7, #0
 80123de:	fb0c fb0b 	mul.w	fp, ip, fp
 80123e2:	fa1f fc89 	uxth.w	ip, r9
 80123e6:	fbca 6705 	smlal	r6, r7, sl, r5
 80123ea:	9e04      	ldr	r6, [sp, #16]
 80123ec:	10bd      	asrs	r5, r7, #2
 80123ee:	f305 050f 	ssat	r5, #16, r5
 80123f2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80123f6:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80123f8:	4565      	cmp	r5, ip
 80123fa:	d917      	bls.n	801242c <D24_GENERIC+0x134>
 80123fc:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80123fe:	f890 9000 	ldrb.w	r9, [r0]
 8012402:	b2ef      	uxtb	r7, r5
 8012404:	2d01      	cmp	r5, #1
 8012406:	b23e      	sxth	r6, r7
 8012408:	d193      	bne.n	8012332 <D24_GENERIC+0x3a>
 801240a:	9d06      	ldr	r5, [sp, #24]
 801240c:	b1dd      	cbz	r5, 8012446 <D24_GENERIC+0x14e>
 801240e:	78c7      	ldrb	r7, [r0, #3]
 8012410:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8012414:	f01c 0f01 	tst.w	ip, #1
 8012418:	ea4f 2507 	mov.w	r5, r7, lsl #8
 801241c:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8012420:	d11a      	bne.n	8012458 <D24_GENERIC+0x160>
 8012422:	f890 9001 	ldrb.w	r9, [r0, #1]
 8012426:	3002      	adds	r0, #2
 8012428:	44b1      	add	r9, r6
 801242a:	e78d      	b.n	8012348 <D24_GENERIC+0x50>
 801242c:	6093      	str	r3, [r2, #8]
 801242e:	2000      	movs	r0, #0
 8012430:	9b03      	ldr	r3, [sp, #12]
 8012432:	f8c2 800c 	str.w	r8, [r2, #12]
 8012436:	6153      	str	r3, [r2, #20]
 8012438:	9b07      	ldr	r3, [sp, #28]
 801243a:	61d1      	str	r1, [r2, #28]
 801243c:	6114      	str	r4, [r2, #16]
 801243e:	6193      	str	r3, [r2, #24]
 8012440:	b009      	add	sp, #36	@ 0x24
 8012442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012446:	7845      	ldrb	r5, [r0, #1]
 8012448:	3003      	adds	r0, #3
 801244a:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 801244e:	022d      	lsls	r5, r5, #8
 8012450:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8012454:	44a9      	add	r9, r5
 8012456:	e777      	b.n	8012348 <D24_GENERIC+0x50>
 8012458:	7886      	ldrb	r6, [r0, #2]
 801245a:	3004      	adds	r0, #4
 801245c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8012460:	44a9      	add	r9, r5
 8012462:	e771      	b.n	8012348 <D24_GENERIC+0x50>
 8012464:	00030001 	.word	0x00030001
 8012468:	00060007 	.word	0x00060007
 801246c:	24000000 	.word	0x24000000

08012470 <D32_GENERIC>:
 8012470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012474:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8012478:	b089      	sub	sp, #36	@ 0x24
 801247a:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801247c:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 801247e:	9302      	str	r3, [sp, #8]
 8012480:	6993      	ldr	r3, [r2, #24]
 8012482:	9104      	str	r1, [sp, #16]
 8012484:	9307      	str	r3, [sp, #28]
 8012486:	9503      	str	r5, [sp, #12]
 8012488:	69d1      	ldr	r1, [r2, #28]
 801248a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 801248c:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8012490:	2e00      	cmp	r6, #0
 8012492:	f000 8097 	beq.w	80125c4 <D32_GENERIC+0x154>
 8012496:	f005 0620 	and.w	r6, r5, #32
 801249a:	f005 0510 	and.w	r5, r5, #16
 801249e:	f04f 0e00 	mov.w	lr, #0
 80124a2:	f8df c150 	ldr.w	ip, [pc, #336]	@ 80125f4 <D32_GENERIC+0x184>
 80124a6:	9606      	str	r6, [sp, #24]
 80124a8:	9505      	str	r5, [sp, #20]
 80124aa:	e079      	b.n	80125a0 <D32_GENERIC+0x130>
 80124ac:	783d      	ldrb	r5, [r7, #0]
 80124ae:	f810 b009 	ldrb.w	fp, [r0, r9]
 80124b2:	042d      	lsls	r5, r5, #16
 80124b4:	f810 a006 	ldrb.w	sl, [r0, r6]
 80124b8:	f890 9000 	ldrb.w	r9, [r0]
 80124bc:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 80124c0:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 80124c4:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 80124c8:	44a9      	add	r9, r5
 80124ca:	fa5f f789 	uxtb.w	r7, r9
 80124ce:	f3c9 2507 	ubfx	r5, r9, #8, #8
 80124d2:	f3c9 4607 	ubfx	r6, r9, #16, #8
 80124d6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80124da:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80124de:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 80124e2:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 80124e6:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80124ea:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 80124ee:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80124f2:	f3c1 0909 	ubfx	r9, r1, #0, #10
 80124f6:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 80124fa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80124fe:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8012502:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012506:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 801250a:	f3c1 0509 	ubfx	r5, r1, #0, #10
 801250e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8012512:	4d34      	ldr	r5, [pc, #208]	@ (80125e4 <D32_GENERIC+0x174>)
 8012514:	fb29 8805 	smlad	r8, r9, r5, r8
 8012518:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 801251c:	fb26 8705 	smlad	r7, r6, r5, r8
 8012520:	4d31      	ldr	r5, [pc, #196]	@ (80125e8 <D32_GENERIC+0x178>)
 8012522:	fb29 3305 	smlad	r3, r9, r5, r3
 8012526:	4d31      	ldr	r5, [pc, #196]	@ (80125ec <D32_GENERIC+0x17c>)
 8012528:	fb26 3805 	smlad	r8, r6, r5, r3
 801252c:	2301      	movs	r3, #1
 801252e:	fb29 f903 	smuad	r9, r9, r3
 8012532:	4b2f      	ldr	r3, [pc, #188]	@ (80125f0 <D32_GENERIC+0x180>)
 8012534:	fb26 9303 	smlad	r3, r6, r3, r9
 8012538:	9e05      	ldr	r6, [sp, #20]
 801253a:	f10e 0901 	add.w	r9, lr, #1
 801253e:	f5a7 4580 	sub.w	r5, r7, #16384	@ 0x4000
 8012542:	b1ae      	cbz	r6, 8012570 <D32_GENERIC+0x100>
 8012544:	442c      	add	r4, r5
 8012546:	9e02      	ldr	r6, [sp, #8]
 8012548:	f8d2 a020 	ldr.w	sl, [r2, #32]
 801254c:	1ba4      	subs	r4, r4, r6
 801254e:	9502      	str	r5, [sp, #8]
 8012550:	17e7      	asrs	r7, r4, #31
 8012552:	fba4 450a 	umull	r4, r5, r4, sl
 8012556:	e9cd 4500 	strd	r4, r5, [sp]
 801255a:	fb0a 5407 	mla	r4, sl, r7, r5
 801255e:	9401      	str	r4, [sp, #4]
 8012560:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012564:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8012568:	f145 0500 	adc.w	r5, r5, #0
 801256c:	006c      	lsls	r4, r5, #1
 801256e:	4625      	mov	r5, r4
 8012570:	f8b2 a028 	ldrh.w	sl, [r2, #40]	@ 0x28
 8012574:	036d      	lsls	r5, r5, #13
 8012576:	9f03      	ldr	r7, [sp, #12]
 8012578:	fb0e fb0a 	mul.w	fp, lr, sl
 801257c:	fa1f fe89 	uxth.w	lr, r9
 8012580:	f04f 0a00 	mov.w	sl, #0
 8012584:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8012588:	9e04      	ldr	r6, [sp, #16]
 801258a:	fbc7 9a05 	smlal	r9, sl, r7, r5
 801258e:	4657      	mov	r7, sl
 8012590:	10bd      	asrs	r5, r7, #2
 8012592:	f305 050f 	ssat	r5, #16, r5
 8012596:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801259a:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801259c:	4575      	cmp	r5, lr
 801259e:	d911      	bls.n	80125c4 <D32_GENERIC+0x154>
 80125a0:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80125a2:	b2ee      	uxtb	r6, r5
 80125a4:	2d01      	cmp	r5, #1
 80125a6:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 80125aa:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 80125ae:	f47f af7d 	bne.w	80124ac <D32_GENERIC+0x3c>
 80125b2:	1d05      	adds	r5, r0, #4
 80125b4:	f8d0 9000 	ldr.w	r9, [r0]
 80125b8:	9806      	ldr	r0, [sp, #24]
 80125ba:	b180      	cbz	r0, 80125de <D32_GENERIC+0x16e>
 80125bc:	fa99 f999 	rev16.w	r9, r9
 80125c0:	4628      	mov	r0, r5
 80125c2:	e782      	b.n	80124ca <D32_GENERIC+0x5a>
 80125c4:	6093      	str	r3, [r2, #8]
 80125c6:	2000      	movs	r0, #0
 80125c8:	9b02      	ldr	r3, [sp, #8]
 80125ca:	f8c2 800c 	str.w	r8, [r2, #12]
 80125ce:	6153      	str	r3, [r2, #20]
 80125d0:	9b07      	ldr	r3, [sp, #28]
 80125d2:	61d1      	str	r1, [r2, #28]
 80125d4:	6114      	str	r4, [r2, #16]
 80125d6:	6193      	str	r3, [r2, #24]
 80125d8:	b009      	add	sp, #36	@ 0x24
 80125da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125de:	4628      	mov	r0, r5
 80125e0:	e773      	b.n	80124ca <D32_GENERIC+0x5a>
 80125e2:	bf00      	nop
 80125e4:	00060003 	.word	0x00060003
 80125e8:	000a000c 	.word	0x000a000c
 80125ec:	000c000a 	.word	0x000c000a
 80125f0:	00030006 	.word	0x00030006
 80125f4:	24000000 	.word	0x24000000

080125f8 <D48_GENERIC>:
 80125f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125fc:	6913      	ldr	r3, [r2, #16]
 80125fe:	b089      	sub	sp, #36	@ 0x24
 8012600:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8012602:	9301      	str	r3, [sp, #4]
 8012604:	6953      	ldr	r3, [r2, #20]
 8012606:	9104      	str	r1, [sp, #16]
 8012608:	9302      	str	r3, [sp, #8]
 801260a:	6993      	ldr	r3, [r2, #24]
 801260c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8012610:	9307      	str	r3, [sp, #28]
 8012612:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8012616:	9100      	str	r1, [sp, #0]
 8012618:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801261a:	9103      	str	r1, [sp, #12]
 801261c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 801261e:	2c00      	cmp	r4, #0
 8012620:	f000 80be 	beq.w	80127a0 <D48_GENERIC+0x1a8>
 8012624:	f001 0420 	and.w	r4, r1, #32
 8012628:	f001 0110 	and.w	r1, r1, #16
 801262c:	f04f 0e00 	mov.w	lr, #0
 8012630:	9105      	str	r1, [sp, #20]
 8012632:	9406      	str	r4, [sp, #24]
 8012634:	4962      	ldr	r1, [pc, #392]	@ (80127c0 <D48_GENERIC+0x1c8>)
 8012636:	e0a0      	b.n	801277a <D48_GENERIC+0x182>
 8012638:	eb00 0608 	add.w	r6, r0, r8
 801263c:	f810 a008 	ldrb.w	sl, [r0, r8]
 8012640:	f810 9005 	ldrb.w	r9, [r0, r5]
 8012644:	5df4      	ldrb	r4, [r6, r7]
 8012646:	443e      	add	r6, r7
 8012648:	f890 b000 	ldrb.w	fp, [r0]
 801264c:	0420      	lsls	r0, r4, #16
 801264e:	eb06 0408 	add.w	r4, r6, r8
 8012652:	f816 6008 	ldrb.w	r6, [r6, r8]
 8012656:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 801265a:	f814 8007 	ldrb.w	r8, [r4, r7]
 801265e:	4427      	add	r7, r4
 8012660:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8012664:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8012668:	eb0a 040b 	add.w	r4, sl, fp
 801266c:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 8012670:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8012674:	b2f7      	uxtb	r7, r6
 8012676:	b2e6      	uxtb	r6, r4
 8012678:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801267c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8012680:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8012684:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8012688:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801268c:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8012690:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 8012694:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8012698:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 801269c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80126a0:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 80126a4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80126a8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80126ac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80126b0:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80126b4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80126b8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80126bc:	9d00      	ldr	r5, [sp, #0]
 80126be:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80126c2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80126c6:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80126ca:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80126ce:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80126d2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80126d6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80126da:	4c3a      	ldr	r4, [pc, #232]	@ (80127c4 <D48_GENERIC+0x1cc>)
 80126dc:	fb26 5a04 	smlad	sl, r6, r4, r5
 80126e0:	4c39      	ldr	r4, [pc, #228]	@ (80127c8 <D48_GENERIC+0x1d0>)
 80126e2:	fb29 aa04 	smlad	sl, r9, r4, sl
 80126e6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80126ea:	fb27 aa04 	smlad	sl, r7, r4, sl
 80126ee:	4c37      	ldr	r4, [pc, #220]	@ (80127cc <D48_GENERIC+0x1d4>)
 80126f0:	fb26 3304 	smlad	r3, r6, r4, r3
 80126f4:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 80126f8:	fb29 3304 	smlad	r3, r9, r4, r3
 80126fc:	4c34      	ldr	r4, [pc, #208]	@ (80127d0 <D48_GENERIC+0x1d8>)
 80126fe:	fb27 3304 	smlad	r3, r7, r4, r3
 8012702:	2501      	movs	r5, #1
 8012704:	9300      	str	r3, [sp, #0]
 8012706:	fb26 f605 	smuad	r6, r6, r5
 801270a:	4b32      	ldr	r3, [pc, #200]	@ (80127d4 <D48_GENERIC+0x1dc>)
 801270c:	fb29 6903 	smlad	r9, r9, r3, r6
 8012710:	4b31      	ldr	r3, [pc, #196]	@ (80127d8 <D48_GENERIC+0x1e0>)
 8012712:	fb27 9303 	smlad	r3, r7, r3, r9
 8012716:	9c05      	ldr	r4, [sp, #20]
 8012718:	eb0e 0805 	add.w	r8, lr, r5
 801271c:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 8012720:	b19c      	cbz	r4, 801274a <D48_GENERIC+0x152>
 8012722:	9c01      	ldr	r4, [sp, #4]
 8012724:	9d02      	ldr	r5, [sp, #8]
 8012726:	4454      	add	r4, sl
 8012728:	f8d2 9020 	ldr.w	r9, [r2, #32]
 801272c:	f8cd a008 	str.w	sl, [sp, #8]
 8012730:	1b64      	subs	r4, r4, r5
 8012732:	fba4 ab09 	umull	sl, fp, r4, r9
 8012736:	17e7      	asrs	r7, r4, #31
 8012738:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 801273c:	fb09 bb07 	mla	fp, r9, r7, fp
 8012740:	f14b 0500 	adc.w	r5, fp, #0
 8012744:	006c      	lsls	r4, r5, #1
 8012746:	46a2      	mov	sl, r4
 8012748:	9401      	str	r4, [sp, #4]
 801274a:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 801274c:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8012750:	9d03      	ldr	r5, [sp, #12]
 8012752:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8012756:	fb0e f606 	mul.w	r6, lr, r6
 801275a:	fa1f fe88 	uxth.w	lr, r8
 801275e:	f04f 0800 	mov.w	r8, #0
 8012762:	fbc5 780a 	smlal	r7, r8, r5, sl
 8012766:	4645      	mov	r5, r8
 8012768:	10ac      	asrs	r4, r5, #2
 801276a:	9d04      	ldr	r5, [sp, #16]
 801276c:	f304 040f 	ssat	r4, #16, r4
 8012770:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8012774:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8012776:	4574      	cmp	r4, lr
 8012778:	d912      	bls.n	80127a0 <D48_GENERIC+0x1a8>
 801277a:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 801277c:	b2e5      	uxtb	r5, r4
 801277e:	2c01      	cmp	r4, #1
 8012780:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8012784:	f1c5 0700 	rsb	r7, r5, #0
 8012788:	f47f af56 	bne.w	8012638 <D48_GENERIC+0x40>
 801278c:	9d06      	ldr	r5, [sp, #24]
 801278e:	e9d0 4600 	ldrd	r4, r6, [r0]
 8012792:	3006      	adds	r0, #6
 8012794:	2d00      	cmp	r5, #0
 8012796:	f43f af6b 	beq.w	8012670 <D48_GENERIC+0x78>
 801279a:	ba64      	rev16	r4, r4
 801279c:	ba76      	rev16	r6, r6
 801279e:	e767      	b.n	8012670 <D48_GENERIC+0x78>
 80127a0:	6093      	str	r3, [r2, #8]
 80127a2:	2000      	movs	r0, #0
 80127a4:	9b00      	ldr	r3, [sp, #0]
 80127a6:	f8c2 c01c 	str.w	ip, [r2, #28]
 80127aa:	60d3      	str	r3, [r2, #12]
 80127ac:	9b01      	ldr	r3, [sp, #4]
 80127ae:	6113      	str	r3, [r2, #16]
 80127b0:	9b02      	ldr	r3, [sp, #8]
 80127b2:	6153      	str	r3, [r2, #20]
 80127b4:	9b07      	ldr	r3, [sp, #28]
 80127b6:	6193      	str	r3, [r2, #24]
 80127b8:	b009      	add	sp, #36	@ 0x24
 80127ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127be:	bf00      	nop
 80127c0:	24000000 	.word	0x24000000
 80127c4:	000f000a 	.word	0x000f000a
 80127c8:	00060003 	.word	0x00060003
 80127cc:	00150019 	.word	0x00150019
 80127d0:	00190015 	.word	0x00190015
 80127d4:	00030006 	.word	0x00030006
 80127d8:	000a000f 	.word	0x000a000f

080127dc <D64_GENERIC>:
 80127dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e0:	6913      	ldr	r3, [r2, #16]
 80127e2:	b089      	sub	sp, #36	@ 0x24
 80127e4:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80127e6:	9300      	str	r3, [sp, #0]
 80127e8:	6953      	ldr	r3, [r2, #20]
 80127ea:	9105      	str	r1, [sp, #20]
 80127ec:	9303      	str	r3, [sp, #12]
 80127ee:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 80127f0:	6993      	ldr	r3, [r2, #24]
 80127f2:	69d4      	ldr	r4, [r2, #28]
 80127f4:	9307      	str	r3, [sp, #28]
 80127f6:	9504      	str	r5, [sp, #16]
 80127f8:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 80127fc:	2900      	cmp	r1, #0
 80127fe:	f000 80e8 	beq.w	80129d2 <D64_GENERIC+0x1f6>
 8012802:	6a11      	ldr	r1, [r2, #32]
 8012804:	2500      	movs	r5, #0
 8012806:	46b3      	mov	fp, r6
 8012808:	9302      	str	r3, [sp, #8]
 801280a:	9106      	str	r1, [sp, #24]
 801280c:	4978      	ldr	r1, [pc, #480]	@ (80129f0 <D64_GENERIC+0x214>)
 801280e:	e0cc      	b.n	80129aa <D64_GENERIC+0x1ce>
 8012810:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8012814:	f1ce 0c00 	rsb	ip, lr, #0
 8012818:	f890 9000 	ldrb.w	r9, [r0]
 801281c:	eb00 0708 	add.w	r7, r0, r8
 8012820:	f810 6008 	ldrb.w	r6, [r0, r8]
 8012824:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8012828:	f817 000c 	ldrb.w	r0, [r7, ip]
 801282c:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 8012830:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8012834:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8012838:	ea4f 4800 	mov.w	r8, r0, lsl #16
 801283c:	f817 000c 	ldrb.w	r0, [r7, ip]
 8012840:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8012844:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8012848:	0400      	lsls	r0, r0, #16
 801284a:	4467      	add	r7, ip
 801284c:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8012850:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8012854:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8012858:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 801285c:	444e      	add	r6, r9
 801285e:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8012862:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8012866:	44c2      	add	sl, r8
 8012868:	b2f7      	uxtb	r7, r6
 801286a:	f3c6 2807 	ubfx	r8, r6, #8, #8
 801286e:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8012872:	0e36      	lsrs	r6, r6, #24
 8012874:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8012878:	fa5f fc8a 	uxtb.w	ip, sl
 801287c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8012880:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8012884:	443c      	add	r4, r7
 8012886:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 801288a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801288e:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8012892:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8012896:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801289a:	4b56      	ldr	r3, [pc, #344]	@ (80129f4 <D64_GENERIC+0x218>)
 801289c:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 80128a0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80128a4:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 80128a8:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 80128ac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80128b0:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 80128b4:	f3ca 4407 	ubfx	r4, sl, #16, #8
 80128b8:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80128bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80128c0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80128c4:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80128c8:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 80128cc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80128d0:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 80128d4:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 80128d8:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80128dc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80128e0:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 80128e4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80128e8:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 80128ec:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80128f0:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80128f4:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 80128f8:	fb28 b903 	smlad	r9, r8, r3, fp
 80128fc:	4b3e      	ldr	r3, [pc, #248]	@ (80129f8 <D64_GENERIC+0x21c>)
 80128fe:	fb26 9903 	smlad	r9, r6, r3, r9
 8012902:	4b3e      	ldr	r3, [pc, #248]	@ (80129fc <D64_GENERIC+0x220>)
 8012904:	fb2c 9703 	smlad	r7, ip, r3, r9
 8012908:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
 801290c:	fb2a 7909 	smlad	r9, sl, r9, r7
 8012910:	4f3b      	ldr	r7, [pc, #236]	@ (8012a00 <D64_GENERIC+0x224>)
 8012912:	9b02      	ldr	r3, [sp, #8]
 8012914:	fb28 3307 	smlad	r3, r8, r7, r3
 8012918:	fb2a 3317 	smladx	r3, sl, r7, r3
 801291c:	4f39      	ldr	r7, [pc, #228]	@ (8012a04 <D64_GENERIC+0x228>)
 801291e:	fb26 3307 	smlad	r3, r6, r7, r3
 8012922:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8012926:	f04f 0e01 	mov.w	lr, #1
 801292a:	fb28 f80e 	smuad	r8, r8, lr
 801292e:	4b36      	ldr	r3, [pc, #216]	@ (8012a08 <D64_GENERIC+0x22c>)
 8012930:	fb26 8603 	smlad	r6, r6, r3, r8
 8012934:	4b35      	ldr	r3, [pc, #212]	@ (8012a0c <D64_GENERIC+0x230>)
 8012936:	fb2c 6c03 	smlad	ip, ip, r3, r6
 801293a:	4b35      	ldr	r3, [pc, #212]	@ (8012a10 <D64_GENERIC+0x234>)
 801293c:	fb2a c303 	smlad	r3, sl, r3, ip
 8012940:	9f06      	ldr	r7, [sp, #24]
 8012942:	f5a9 3900 	sub.w	r9, r9, #131072	@ 0x20000
 8012946:	9302      	str	r3, [sp, #8]
 8012948:	b1cf      	cbz	r7, 801297e <D64_GENERIC+0x1a2>
 801294a:	9b00      	ldr	r3, [sp, #0]
 801294c:	444b      	add	r3, r9
 801294e:	461e      	mov	r6, r3
 8012950:	9b03      	ldr	r3, [sp, #12]
 8012952:	f8cd 900c 	str.w	r9, [sp, #12]
 8012956:	1af6      	subs	r6, r6, r3
 8012958:	46b0      	mov	r8, r6
 801295a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801295e:	e9cd 8900 	strd	r8, r9, [sp]
 8012962:	fba6 8907 	umull	r8, r9, r6, r7
 8012966:	9e01      	ldr	r6, [sp, #4]
 8012968:	fb07 9306 	mla	r3, r7, r6, r9
 801296c:	4646      	mov	r6, r8
 801296e:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8012972:	f143 0700 	adc.w	r7, r3, #0
 8012976:	fa07 f30e 	lsl.w	r3, r7, lr
 801297a:	4699      	mov	r9, r3
 801297c:	9300      	str	r3, [sp, #0]
 801297e:	f8b2 c028 	ldrh.w	ip, [r2, #40]	@ 0x28
 8012982:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8012986:	9b04      	ldr	r3, [sp, #16]
 8012988:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801298c:	2700      	movs	r7, #0
 801298e:	fb05 fc0c 	mul.w	ip, r5, ip
 8012992:	3501      	adds	r5, #1
 8012994:	fbc3 6709 	smlal	r6, r7, r3, r9
 8012998:	9b05      	ldr	r3, [sp, #20]
 801299a:	10be      	asrs	r6, r7, #2
 801299c:	f306 060f 	ssat	r6, #16, r6
 80129a0:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 80129a4:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80129a6:	42ae      	cmp	r6, r5
 80129a8:	dd11      	ble.n	80129ce <D64_GENERIC+0x1f2>
 80129aa:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 80129ae:	f1be 0f01 	cmp.w	lr, #1
 80129b2:	f47f af2d 	bne.w	8012810 <D64_GENERIC+0x34>
 80129b6:	6b57      	ldr	r7, [r2, #52]	@ 0x34
 80129b8:	f100 0c08 	add.w	ip, r0, #8
 80129bc:	06bb      	lsls	r3, r7, #26
 80129be:	e9d0 6a00 	ldrd	r6, sl, [r0]
 80129c2:	d513      	bpl.n	80129ec <D64_GENERIC+0x210>
 80129c4:	ba76      	rev16	r6, r6
 80129c6:	fa9a fa9a 	rev16.w	sl, sl
 80129ca:	4660      	mov	r0, ip
 80129cc:	e74c      	b.n	8012868 <D64_GENERIC+0x8c>
 80129ce:	465e      	mov	r6, fp
 80129d0:	9b02      	ldr	r3, [sp, #8]
 80129d2:	6093      	str	r3, [r2, #8]
 80129d4:	2000      	movs	r0, #0
 80129d6:	9b00      	ldr	r3, [sp, #0]
 80129d8:	60d6      	str	r6, [r2, #12]
 80129da:	6113      	str	r3, [r2, #16]
 80129dc:	9b03      	ldr	r3, [sp, #12]
 80129de:	61d4      	str	r4, [r2, #28]
 80129e0:	6153      	str	r3, [r2, #20]
 80129e2:	9b07      	ldr	r3, [sp, #28]
 80129e4:	6193      	str	r3, [r2, #24]
 80129e6:	b009      	add	sp, #36	@ 0x24
 80129e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129ec:	4660      	mov	r0, ip
 80129ee:	e73b      	b.n	8012868 <D64_GENERIC+0x8c>
 80129f0:	24000000 	.word	0x24000000
 80129f4:	001c0015 	.word	0x001c0015
 80129f8:	000f000a 	.word	0x000f000a
 80129fc:	00060003 	.word	0x00060003
 8012a00:	0024002a 	.word	0x0024002a
 8012a04:	002e0030 	.word	0x002e0030
 8012a08:	00030006 	.word	0x00030006
 8012a0c:	000a000f 	.word	0x000a000f
 8012a10:	0015001c 	.word	0x0015001c

08012a14 <D80_GENERIC>:
 8012a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a18:	b08b      	sub	sp, #44	@ 0x2c
 8012a1a:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8012a1c:	9107      	str	r1, [sp, #28]
 8012a1e:	6911      	ldr	r1, [r2, #16]
 8012a20:	9104      	str	r1, [sp, #16]
 8012a22:	6951      	ldr	r1, [r2, #20]
 8012a24:	9105      	str	r1, [sp, #20]
 8012a26:	6991      	ldr	r1, [r2, #24]
 8012a28:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a2a:	69d1      	ldr	r1, [r2, #28]
 8012a2c:	9102      	str	r1, [sp, #8]
 8012a2e:	6891      	ldr	r1, [r2, #8]
 8012a30:	9103      	str	r1, [sp, #12]
 8012a32:	68d1      	ldr	r1, [r2, #12]
 8012a34:	9101      	str	r1, [sp, #4]
 8012a36:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8012a38:	9106      	str	r1, [sp, #24]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	f000 810b 	beq.w	8012c56 <D80_GENERIC+0x242>
 8012a40:	6a13      	ldr	r3, [r2, #32]
 8012a42:	f04f 0800 	mov.w	r8, #0
 8012a46:	f8df c260 	ldr.w	ip, [pc, #608]	@ 8012ca8 <D80_GENERIC+0x294>
 8012a4a:	9308      	str	r3, [sp, #32]
 8012a4c:	9200      	str	r2, [sp, #0]
 8012a4e:	e0ee      	b.n	8012c2e <D80_GENERIC+0x21a>
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	f890 e000 	ldrb.w	lr, [r0]
 8012a56:	b219      	sxth	r1, r3
 8012a58:	425c      	negs	r4, r3
 8012a5a:	f810 9003 	ldrb.w	r9, [r0, r3]
 8012a5e:	004e      	lsls	r6, r1, #1
 8012a60:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8012a64:	4431      	add	r1, r6
 8012a66:	1843      	adds	r3, r0, r1
 8012a68:	f810 b001 	ldrb.w	fp, [r0, r1]
 8012a6c:	1919      	adds	r1, r3, r4
 8012a6e:	5d1b      	ldrb	r3, [r3, r4]
 8012a70:	1948      	adds	r0, r1, r5
 8012a72:	f811 a005 	ldrb.w	sl, [r1, r5]
 8012a76:	041b      	lsls	r3, r3, #16
 8012a78:	1907      	adds	r7, r0, r4
 8012a7a:	5d01      	ldrb	r1, [r0, r4]
 8012a7c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8012a80:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8012a84:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8012a88:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8012a8c:	0409      	lsls	r1, r1, #16
 8012a8e:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8012a92:	eb0b 0905 	add.w	r9, fp, r5
 8012a96:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8012a9a:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8012a9e:	eb09 0b04 	add.w	fp, r9, r4
 8012aa2:	f819 4004 	ldrb.w	r4, [r9, r4]
 8012aa6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8012aaa:	4473      	add	r3, lr
 8012aac:	eb0b 0006 	add.w	r0, fp, r6
 8012ab0:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8012ab4:	4439      	add	r1, r7
 8012ab6:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8012aba:	b2df      	uxtb	r7, r3
 8012abc:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8012ac0:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8012ac4:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 8012ac8:	fa5f fa81 	uxtb.w	sl, r1
 8012acc:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8012ad0:	9c02      	ldr	r4, [sp, #8]
 8012ad2:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 8012ad6:	441c      	add	r4, r3
 8012ad8:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 8012adc:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 8012ae0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012ae4:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8012ae8:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8012aec:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8012af0:	b2ed      	uxtb	r5, r5
 8012af2:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8012af6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8012afa:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8012afe:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8012b02:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8012b06:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8012b0a:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8012b0e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8012b12:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8012b16:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8012b1a:	0e09      	lsrs	r1, r1, #24
 8012b1c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8012b20:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8012b24:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8012b28:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8012b2c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8012b30:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012b34:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8012b38:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8012b3c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8012b40:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8012b44:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8012b48:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8012b4c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8012b50:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8012b54:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8012b58:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8012b5c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8012b60:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8012b64:	9202      	str	r2, [sp, #8]
 8012b66:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8012b6a:	4a43      	ldr	r2, [pc, #268]	@ (8012c78 <D80_GENERIC+0x264>)
 8012b6c:	9f01      	ldr	r7, [sp, #4]
 8012b6e:	fb23 7a02 	smlad	sl, r3, r2, r7
 8012b72:	4a42      	ldr	r2, [pc, #264]	@ (8012c7c <D80_GENERIC+0x268>)
 8012b74:	fb26 aa02 	smlad	sl, r6, r2, sl
 8012b78:	4a41      	ldr	r2, [pc, #260]	@ (8012c80 <D80_GENERIC+0x26c>)
 8012b7a:	fb24 aa02 	smlad	sl, r4, r2, sl
 8012b7e:	4a41      	ldr	r2, [pc, #260]	@ (8012c84 <D80_GENERIC+0x270>)
 8012b80:	fb21 a702 	smlad	r7, r1, r2, sl
 8012b84:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8012b88:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8012b8c:	4a3e      	ldr	r2, [pc, #248]	@ (8012c88 <D80_GENERIC+0x274>)
 8012b8e:	9f03      	ldr	r7, [sp, #12]
 8012b90:	fb23 7e02 	smlad	lr, r3, r2, r7
 8012b94:	4a3d      	ldr	r2, [pc, #244]	@ (8012c8c <D80_GENERIC+0x278>)
 8012b96:	fb26 ee02 	smlad	lr, r6, r2, lr
 8012b9a:	f04f 174b 	mov.w	r7, #4915275	@ 0x4b004b
 8012b9e:	fb24 e707 	smlad	r7, r4, r7, lr
 8012ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8012c90 <D80_GENERIC+0x27c>)
 8012ba4:	fb21 7702 	smlad	r7, r1, r2, r7
 8012ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8012c94 <D80_GENERIC+0x280>)
 8012baa:	fb25 7202 	smlad	r2, r5, r2, r7
 8012bae:	f04f 0901 	mov.w	r9, #1
 8012bb2:	9201      	str	r2, [sp, #4]
 8012bb4:	fb23 f909 	smuad	r9, r3, r9
 8012bb8:	4b37      	ldr	r3, [pc, #220]	@ (8012c98 <D80_GENERIC+0x284>)
 8012bba:	fb26 9603 	smlad	r6, r6, r3, r9
 8012bbe:	4f37      	ldr	r7, [pc, #220]	@ (8012c9c <D80_GENERIC+0x288>)
 8012bc0:	fb24 6407 	smlad	r4, r4, r7, r6
 8012bc4:	4f36      	ldr	r7, [pc, #216]	@ (8012ca0 <D80_GENERIC+0x28c>)
 8012bc6:	fb21 4707 	smlad	r7, r1, r7, r4
 8012bca:	4936      	ldr	r1, [pc, #216]	@ (8012ca4 <D80_GENERIC+0x290>)
 8012bcc:	fb25 7301 	smlad	r3, r5, r1, r7
 8012bd0:	9303      	str	r3, [sp, #12]
 8012bd2:	f5aa 3a7a 	sub.w	sl, sl, #256000	@ 0x3e800
 8012bd6:	9b08      	ldr	r3, [sp, #32]
 8012bd8:	b193      	cbz	r3, 8012c00 <D80_GENERIC+0x1ec>
 8012bda:	9a04      	ldr	r2, [sp, #16]
 8012bdc:	4452      	add	r2, sl
 8012bde:	4614      	mov	r4, r2
 8012be0:	9a05      	ldr	r2, [sp, #20]
 8012be2:	f8cd a014 	str.w	sl, [sp, #20]
 8012be6:	1aa4      	subs	r4, r4, r2
 8012be8:	fba4 1203 	umull	r1, r2, r4, r3
 8012bec:	17e7      	asrs	r7, r4, #31
 8012bee:	f111 4400 	adds.w	r4, r1, #2147483648	@ 0x80000000
 8012bf2:	fb03 2207 	mla	r2, r3, r7, r2
 8012bf6:	f142 0500 	adc.w	r5, r2, #0
 8012bfa:	006b      	lsls	r3, r5, #1
 8012bfc:	469a      	mov	sl, r3
 8012bfe:	9304      	str	r3, [sp, #16]
 8012c00:	9e00      	ldr	r6, [sp, #0]
 8012c02:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8012c06:	9a06      	ldr	r2, [sp, #24]
 8012c08:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8012c0c:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
 8012c0e:	2500      	movs	r5, #0
 8012c10:	fb08 f303 	mul.w	r3, r8, r3
 8012c14:	fbc2 450a 	smlal	r4, r5, r2, sl
 8012c18:	9a07      	ldr	r2, [sp, #28]
 8012c1a:	f108 0801 	add.w	r8, r8, #1
 8012c1e:	10a9      	asrs	r1, r5, #2
 8012c20:	f301 010f 	ssat	r1, #16, r1
 8012c24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8012c28:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 8012c2a:	4543      	cmp	r3, r8
 8012c2c:	dd12      	ble.n	8012c54 <D80_GENERIC+0x240>
 8012c2e:	9b00      	ldr	r3, [sp, #0]
 8012c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	f47f af0c 	bne.w	8012a50 <D80_GENERIC+0x3c>
 8012c38:	9b00      	ldr	r3, [sp, #0]
 8012c3a:	6885      	ldr	r5, [r0, #8]
 8012c3c:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8012c3e:	06b2      	lsls	r2, r6, #26
 8012c40:	e9d0 3100 	ldrd	r3, r1, [r0]
 8012c44:	f100 000a 	add.w	r0, r0, #10
 8012c48:	f57f af35 	bpl.w	8012ab6 <D80_GENERIC+0xa2>
 8012c4c:	ba5b      	rev16	r3, r3
 8012c4e:	ba49      	rev16	r1, r1
 8012c50:	ba6d      	rev16	r5, r5
 8012c52:	e730      	b.n	8012ab6 <D80_GENERIC+0xa2>
 8012c54:	4632      	mov	r2, r6
 8012c56:	9b03      	ldr	r3, [sp, #12]
 8012c58:	2000      	movs	r0, #0
 8012c5a:	6093      	str	r3, [r2, #8]
 8012c5c:	9b01      	ldr	r3, [sp, #4]
 8012c5e:	60d3      	str	r3, [r2, #12]
 8012c60:	9b02      	ldr	r3, [sp, #8]
 8012c62:	61d3      	str	r3, [r2, #28]
 8012c64:	9b04      	ldr	r3, [sp, #16]
 8012c66:	6113      	str	r3, [r2, #16]
 8012c68:	9b05      	ldr	r3, [sp, #20]
 8012c6a:	6153      	str	r3, [r2, #20]
 8012c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c6e:	6193      	str	r3, [r2, #24]
 8012c70:	b00b      	add	sp, #44	@ 0x2c
 8012c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c76:	bf00      	nop
 8012c78:	002d0024 	.word	0x002d0024
 8012c7c:	001c0015 	.word	0x001c0015
 8012c80:	000f000a 	.word	0x000f000a
 8012c84:	00060003 	.word	0x00060003
 8012c88:	0037003f 	.word	0x0037003f
 8012c8c:	00450049 	.word	0x00450049
 8012c90:	00490045 	.word	0x00490045
 8012c94:	003f0037 	.word	0x003f0037
 8012c98:	00030006 	.word	0x00030006
 8012c9c:	000a000f 	.word	0x000a000f
 8012ca0:	0015001c 	.word	0x0015001c
 8012ca4:	0024002d 	.word	0x0024002d
 8012ca8:	24000000 	.word	0x24000000

08012cac <D128_GENERIC>:
 8012cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb0:	b08d      	sub	sp, #52	@ 0x34
 8012cb2:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8012cb4:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 8012cb8:	9109      	str	r1, [sp, #36]	@ 0x24
 8012cba:	6911      	ldr	r1, [r2, #16]
 8012cbc:	9201      	str	r2, [sp, #4]
 8012cbe:	9106      	str	r1, [sp, #24]
 8012cc0:	6951      	ldr	r1, [r2, #20]
 8012cc2:	9107      	str	r1, [sp, #28]
 8012cc4:	6991      	ldr	r1, [r2, #24]
 8012cc6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012cc8:	6891      	ldr	r1, [r2, #8]
 8012cca:	9103      	str	r1, [sp, #12]
 8012ccc:	68d1      	ldr	r1, [r2, #12]
 8012cce:	9102      	str	r1, [sp, #8]
 8012cd0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8012cd2:	9108      	str	r1, [sp, #32]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f000 8183 	beq.w	8012fe0 <D128_GENERIC+0x334>
 8012cda:	2300      	movs	r3, #0
 8012cdc:	6a12      	ldr	r2, [r2, #32]
 8012cde:	4681      	mov	r9, r0
 8012ce0:	920a      	str	r2, [sp, #40]	@ 0x28
 8012ce2:	e9cd a304 	strd	sl, r3, [sp, #16]
 8012ce6:	e165      	b.n	8012fb4 <D128_GENERIC+0x308>
 8012ce8:	b2d2      	uxtb	r2, r2
 8012cea:	f899 b000 	ldrb.w	fp, [r9]
 8012cee:	b213      	sxth	r3, r2
 8012cf0:	4255      	negs	r5, r2
 8012cf2:	f819 0002 	ldrb.w	r0, [r9, r2]
 8012cf6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012cfa:	009f      	lsls	r7, r3, #2
 8012cfc:	eb09 0402 	add.w	r4, r9, r2
 8012d00:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8012d04:	f819 8002 	ldrb.w	r8, [r9, r2]
 8012d08:	443b      	add	r3, r7
 8012d0a:	1962      	adds	r2, r4, r5
 8012d0c:	5d64      	ldrb	r4, [r4, r5]
 8012d0e:	eb02 0c03 	add.w	ip, r2, r3
 8012d12:	0424      	lsls	r4, r4, #16
 8012d14:	5cd3      	ldrb	r3, [r2, r3]
 8012d16:	eb0c 0e05 	add.w	lr, ip, r5
 8012d1a:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 8012d1e:	f81c 2005 	ldrb.w	r2, [ip, r5]
 8012d22:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8012d26:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8012d2a:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 8012d2e:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 8012d32:	eb0c 0e06 	add.w	lr, ip, r6
 8012d36:	f81c a006 	ldrb.w	sl, [ip, r6]
 8012d3a:	0412      	lsls	r2, r2, #16
 8012d3c:	445c      	add	r4, fp
 8012d3e:	eb0e 0c05 	add.w	ip, lr, r5
 8012d42:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8012d46:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8012d4a:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8012d4e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8012d52:	041b      	lsls	r3, r3, #16
 8012d54:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8012d58:	eb00 0b06 	add.w	fp, r0, r6
 8012d5c:	5d80      	ldrb	r0, [r0, r6]
 8012d5e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 8012d62:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8012d66:	eb0b 0a05 	add.w	sl, fp, r5
 8012d6a:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 8012d6e:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 8012d72:	0436      	lsls	r6, r6, #16
 8012d74:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8012d78:	4442      	add	r2, r8
 8012d7a:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 8012d7e:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 8012d82:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8012d86:	44b9      	add	r9, r7
 8012d88:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8012d8c:	4463      	add	r3, ip
 8012d8e:	eb06 0508 	add.w	r5, r6, r8
 8012d92:	b2e7      	uxtb	r7, r4
 8012d94:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8012d98:	499b      	ldr	r1, [pc, #620]	@ (8013008 <D128_GENERIC+0x35c>)
 8012d9a:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8012d9e:	0e24      	lsrs	r4, r4, #24
 8012da0:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 8012da4:	b2d7      	uxtb	r7, r2
 8012da6:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 8012daa:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8012dae:	9904      	ldr	r1, [sp, #16]
 8012db0:	4461      	add	r1, ip
 8012db2:	468c      	mov	ip, r1
 8012db4:	4994      	ldr	r1, [pc, #592]	@ (8013008 <D128_GENERIC+0x35c>)
 8012db6:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 8012dba:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012dbe:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 8012dc2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8012dc6:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 8012dca:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8012dce:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 8012dd2:	0e12      	lsrs	r2, r2, #24
 8012dd4:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 8012dd8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8012ddc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8012de0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8012de4:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 8012de8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8012dec:	b2da      	uxtb	r2, r3
 8012dee:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8012df2:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8012df6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8012dfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8012dfe:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 8012e02:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8012e06:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8012e0a:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 8012e0e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8012e12:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8012e16:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8012e1a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8012e1e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8012e22:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8012e26:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8012e2a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8012e2e:	0e1b      	lsrs	r3, r3, #24
 8012e30:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8012e34:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012e38:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8012e3c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8012e40:	b2eb      	uxtb	r3, r5
 8012e42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8012e46:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8012e4a:	f3cc 0409 	ubfx	r4, ip, #0, #10
 8012e4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012e52:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8012e56:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8012e5a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012e5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012e62:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8012e66:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8012e6a:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 8012e6e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8012e72:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8012e76:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8012e7a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8012e7e:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 8012e82:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8012e86:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8012e8a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8012e8e:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8012e92:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8012e96:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 8012e9a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8012e9e:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 8012ea2:	ea4f 219e 	mov.w	r1, lr, lsr #10
 8012ea6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8012eaa:	9104      	str	r1, [sp, #16]
 8012eac:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8012eb0:	9902      	ldr	r1, [sp, #8]
 8012eb2:	4a56      	ldr	r2, [pc, #344]	@ (801300c <D128_GENERIC+0x360>)
 8012eb4:	fb2b 1202 	smlad	r2, fp, r2, r1
 8012eb8:	4955      	ldr	r1, [pc, #340]	@ (8013010 <D128_GENERIC+0x364>)
 8012eba:	fb28 2201 	smlad	r2, r8, r1, r2
 8012ebe:	4955      	ldr	r1, [pc, #340]	@ (8013014 <D128_GENERIC+0x368>)
 8012ec0:	fb27 2201 	smlad	r2, r7, r1, r2
 8012ec4:	4954      	ldr	r1, [pc, #336]	@ (8013018 <D128_GENERIC+0x36c>)
 8012ec6:	fb26 2201 	smlad	r2, r6, r1, r2
 8012eca:	4954      	ldr	r1, [pc, #336]	@ (801301c <D128_GENERIC+0x370>)
 8012ecc:	fb24 2201 	smlad	r2, r4, r1, r2
 8012ed0:	4953      	ldr	r1, [pc, #332]	@ (8013020 <D128_GENERIC+0x374>)
 8012ed2:	fb20 2201 	smlad	r2, r0, r1, r2
 8012ed6:	4953      	ldr	r1, [pc, #332]	@ (8013024 <D128_GENERIC+0x378>)
 8012ed8:	fb23 2201 	smlad	r2, r3, r1, r2
 8012edc:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8012ee0:	fb25 2a0c 	smlad	sl, r5, ip, r2
 8012ee4:	4950      	ldr	r1, [pc, #320]	@ (8013028 <D128_GENERIC+0x37c>)
 8012ee6:	9a03      	ldr	r2, [sp, #12]
 8012ee8:	fb2b 2c01 	smlad	ip, fp, r1, r2
 8012eec:	4a4f      	ldr	r2, [pc, #316]	@ (801302c <D128_GENERIC+0x380>)
 8012eee:	fb28 ce02 	smlad	lr, r8, r2, ip
 8012ef2:	f8df c150 	ldr.w	ip, [pc, #336]	@ 8013044 <D128_GENERIC+0x398>
 8012ef6:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8012efa:	f8df e14c 	ldr.w	lr, [pc, #332]	@ 8013048 <D128_GENERIC+0x39c>
 8012efe:	fb26 cc0e 	smlad	ip, r6, lr, ip
 8012f02:	f8df e148 	ldr.w	lr, [pc, #328]	@ 801304c <D128_GENERIC+0x3a0>
 8012f06:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8012f0a:	f8df c144 	ldr.w	ip, [pc, #324]	@ 8013050 <D128_GENERIC+0x3a4>
 8012f0e:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8012f12:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8013054 <D128_GENERIC+0x3a8>
 8012f16:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8012f1a:	f8df e13c 	ldr.w	lr, [pc, #316]	@ 8013058 <D128_GENERIC+0x3ac>
 8012f1e:	fb25 c20e 	smlad	r2, r5, lr, ip
 8012f22:	f04f 0c01 	mov.w	ip, #1
 8012f26:	9202      	str	r2, [sp, #8]
 8012f28:	fb2b fb0c 	smuad	fp, fp, ip
 8012f2c:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 801305c <D128_GENERIC+0x3b0>
 8012f30:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8012f34:	f8df c128 	ldr.w	ip, [pc, #296]	@ 8013060 <D128_GENERIC+0x3b4>
 8012f38:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8012f3c:	4f3c      	ldr	r7, [pc, #240]	@ (8013030 <D128_GENERIC+0x384>)
 8012f3e:	fb26 bb07 	smlad	fp, r6, r7, fp
 8012f42:	4f3c      	ldr	r7, [pc, #240]	@ (8013034 <D128_GENERIC+0x388>)
 8012f44:	fb24 bb07 	smlad	fp, r4, r7, fp
 8012f48:	4f3b      	ldr	r7, [pc, #236]	@ (8013038 <D128_GENERIC+0x38c>)
 8012f4a:	fb20 bb07 	smlad	fp, r0, r7, fp
 8012f4e:	4f3b      	ldr	r7, [pc, #236]	@ (801303c <D128_GENERIC+0x390>)
 8012f50:	fb23 bb07 	smlad	fp, r3, r7, fp
 8012f54:	4b3a      	ldr	r3, [pc, #232]	@ (8013040 <D128_GENERIC+0x394>)
 8012f56:	fb25 b303 	smlad	r3, r5, r3, fp
 8012f5a:	9303      	str	r3, [sp, #12]
 8012f5c:	f5aa 1480 	sub.w	r4, sl, #1048576	@ 0x100000
 8012f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f62:	b183      	cbz	r3, 8012f86 <D128_GENERIC+0x2da>
 8012f64:	9a06      	ldr	r2, [sp, #24]
 8012f66:	9907      	ldr	r1, [sp, #28]
 8012f68:	4422      	add	r2, r4
 8012f6a:	9407      	str	r4, [sp, #28]
 8012f6c:	1a52      	subs	r2, r2, r1
 8012f6e:	fba2 0103 	umull	r0, r1, r2, r3
 8012f72:	17d5      	asrs	r5, r2, #31
 8012f74:	f110 4200 	adds.w	r2, r0, #2147483648	@ 0x80000000
 8012f78:	fb03 1105 	mla	r1, r3, r5, r1
 8012f7c:	f141 0300 	adc.w	r3, r1, #0
 8012f80:	005b      	lsls	r3, r3, #1
 8012f82:	461c      	mov	r4, r3
 8012f84:	9306      	str	r3, [sp, #24]
 8012f86:	9d01      	ldr	r5, [sp, #4]
 8012f88:	01e4      	lsls	r4, r4, #7
 8012f8a:	9e05      	ldr	r6, [sp, #20]
 8012f8c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012f90:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8012f92:	2300      	movs	r3, #0
 8012f94:	9908      	ldr	r1, [sp, #32]
 8012f96:	fb06 f000 	mul.w	r0, r6, r0
 8012f9a:	3601      	adds	r6, #1
 8012f9c:	fbc1 2304 	smlal	r2, r3, r1, r4
 8012fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012fa2:	109b      	asrs	r3, r3, #2
 8012fa4:	9605      	str	r6, [sp, #20]
 8012fa6:	f303 030f 	ssat	r3, #16, r3
 8012faa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8012fae:	8ceb      	ldrh	r3, [r5, #38]	@ 0x26
 8012fb0:	42b3      	cmp	r3, r6
 8012fb2:	dd13      	ble.n	8012fdc <D128_GENERIC+0x330>
 8012fb4:	9b01      	ldr	r3, [sp, #4]
 8012fb6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012fb8:	2a01      	cmp	r2, #1
 8012fba:	f47f ae95 	bne.w	8012ce8 <D128_GENERIC+0x3c>
 8012fbe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012fc0:	f109 0610 	add.w	r6, r9, #16
 8012fc4:	0681      	lsls	r1, r0, #26
 8012fc6:	e9d9 4200 	ldrd	r4, r2, [r9]
 8012fca:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 8012fce:	d518      	bpl.n	8013002 <D128_GENERIC+0x356>
 8012fd0:	ba64      	rev16	r4, r4
 8012fd2:	ba52      	rev16	r2, r2
 8012fd4:	ba5b      	rev16	r3, r3
 8012fd6:	ba6d      	rev16	r5, r5
 8012fd8:	46b1      	mov	r9, r6
 8012fda:	e6da      	b.n	8012d92 <D128_GENERIC+0xe6>
 8012fdc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012fe0:	9b01      	ldr	r3, [sp, #4]
 8012fe2:	2000      	movs	r0, #0
 8012fe4:	9903      	ldr	r1, [sp, #12]
 8012fe6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012fe8:	6099      	str	r1, [r3, #8]
 8012fea:	9902      	ldr	r1, [sp, #8]
 8012fec:	f8c3 a01c 	str.w	sl, [r3, #28]
 8012ff0:	60d9      	str	r1, [r3, #12]
 8012ff2:	9906      	ldr	r1, [sp, #24]
 8012ff4:	619a      	str	r2, [r3, #24]
 8012ff6:	6119      	str	r1, [r3, #16]
 8012ff8:	9907      	ldr	r1, [sp, #28]
 8012ffa:	6159      	str	r1, [r3, #20]
 8012ffc:	b00d      	add	sp, #52	@ 0x34
 8012ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013002:	46b1      	mov	r9, r6
 8013004:	e6c5      	b.n	8012d92 <D128_GENERIC+0xe6>
 8013006:	bf00      	nop
 8013008:	24000000 	.word	0x24000000
 801300c:	00780069 	.word	0x00780069
 8013010:	005b004e 	.word	0x005b004e
 8013014:	00420037 	.word	0x00420037
 8013018:	002d0024 	.word	0x002d0024
 801301c:	001c0015 	.word	0x001c0015
 8013020:	000f000a 	.word	0x000f000a
 8013024:	00060003 	.word	0x00060003
 8013028:	00880096 	.word	0x00880096
 801302c:	00a200ac 	.word	0x00a200ac
 8013030:	0015001c 	.word	0x0015001c
 8013034:	0024002d 	.word	0x0024002d
 8013038:	00370042 	.word	0x00370042
 801303c:	004e005b 	.word	0x004e005b
 8013040:	00690078 	.word	0x00690078
 8013044:	00b400ba 	.word	0x00b400ba
 8013048:	00be00c0 	.word	0x00be00c0
 801304c:	00c000be 	.word	0x00c000be
 8013050:	00ba00b4 	.word	0x00ba00b4
 8013054:	00ac00a2 	.word	0x00ac00a2
 8013058:	00960088 	.word	0x00960088
 801305c:	00030006 	.word	0x00030006
 8013060:	000a000f 	.word	0x000a000f

08013064 <D16_1CH_HTONS_VOL_HP>:
 8013064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013068:	6993      	ldr	r3, [r2, #24]
 801306a:	b087      	sub	sp, #28
 801306c:	4682      	mov	sl, r0
 801306e:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8013070:	9304      	str	r3, [sp, #16]
 8013072:	f8d2 b030 	ldr.w	fp, [r2, #48]	@ 0x30
 8013076:	69d3      	ldr	r3, [r2, #28]
 8013078:	f8d2 e020 	ldr.w	lr, [r2, #32]
 801307c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8013080:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8013084:	9403      	str	r4, [sp, #12]
 8013086:	2800      	cmp	r0, #0
 8013088:	d054      	beq.n	8013134 <D16_1CH_HTONS_VOL_HP+0xd0>
 801308a:	f1a1 0902 	sub.w	r9, r1, #2
 801308e:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8013092:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8013140 <D16_1CH_HTONS_VOL_HP+0xdc>
 8013096:	4650      	mov	r0, sl
 8013098:	9101      	str	r1, [sp, #4]
 801309a:	4619      	mov	r1, r3
 801309c:	f8cd b008 	str.w	fp, [sp, #8]
 80130a0:	9205      	str	r2, [sp, #20]
 80130a2:	f850 3b02 	ldr.w	r3, [r0], #2
 80130a6:	ba5b      	rev16	r3, r3
 80130a8:	b2dc      	uxtb	r4, r3
 80130aa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80130ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80130b2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80130b6:	4419      	add	r1, r3
 80130b8:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 80130bc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80130c0:	f3c4 0209 	ubfx	r2, r4, #0, #10
 80130c4:	0aa1      	lsrs	r1, r4, #10
 80130c6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80130ca:	4a1b      	ldr	r2, [pc, #108]	@ (8013138 <D16_1CH_HTONS_VOL_HP+0xd4>)
 80130cc:	fb23 5402 	smlad	r4, r3, r2, r5
 80130d0:	4a1a      	ldr	r2, [pc, #104]	@ (801313c <D16_1CH_HTONS_VOL_HP+0xd8>)
 80130d2:	fb23 f502 	smuad	r5, r3, r2
 80130d6:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 80130da:	f04f 4a00 	mov.w	sl, #2147483648	@ 0x80000000
 80130de:	f04f 0b00 	mov.w	fp, #0
 80130e2:	19a2      	adds	r2, r4, r6
 80130e4:	eba2 020c 	sub.w	r2, r2, ip
 80130e8:	46a4      	mov	ip, r4
 80130ea:	17d7      	asrs	r7, r2, #31
 80130ec:	fba2 230e 	umull	r2, r3, r2, lr
 80130f0:	f112 4600 	adds.w	r6, r2, #2147483648	@ 0x80000000
 80130f4:	fb0e 3307 	mla	r3, lr, r7, r3
 80130f8:	f143 0700 	adc.w	r7, r3, #0
 80130fc:	9b02      	ldr	r3, [sp, #8]
 80130fe:	047a      	lsls	r2, r7, #17
 8013100:	007e      	lsls	r6, r7, #1
 8013102:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8013106:	ea4f 03ab 	mov.w	r3, fp, asr #2
 801310a:	f303 030f 	ssat	r3, #16, r3
 801310e:	f829 3f02 	strh.w	r3, [r9, #2]!
 8013112:	9b01      	ldr	r3, [sp, #4]
 8013114:	4298      	cmp	r0, r3
 8013116:	d1c4      	bne.n	80130a2 <D16_1CH_HTONS_VOL_HP+0x3e>
 8013118:	460b      	mov	r3, r1
 801311a:	9a05      	ldr	r2, [sp, #20]
 801311c:	2000      	movs	r0, #0
 801311e:	9903      	ldr	r1, [sp, #12]
 8013120:	61d3      	str	r3, [r2, #28]
 8013122:	9b04      	ldr	r3, [sp, #16]
 8013124:	6095      	str	r5, [r2, #8]
 8013126:	60d1      	str	r1, [r2, #12]
 8013128:	6193      	str	r3, [r2, #24]
 801312a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 801312e:	b007      	add	sp, #28
 8013130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013134:	4664      	mov	r4, ip
 8013136:	e7f1      	b.n	801311c <D16_1CH_HTONS_VOL_HP+0xb8>
 8013138:	00030001 	.word	0x00030001
 801313c:	00010003 	.word	0x00010003
 8013140:	24000000 	.word	0x24000000

08013144 <D24_1CH_HTONS_VOL_HP>:
 8013144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013148:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 801314a:	b089      	sub	sp, #36	@ 0x24
 801314c:	6993      	ldr	r3, [r2, #24]
 801314e:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8013150:	9604      	str	r6, [sp, #16]
 8013152:	6a16      	ldr	r6, [r2, #32]
 8013154:	9306      	str	r3, [sp, #24]
 8013156:	9505      	str	r5, [sp, #20]
 8013158:	69d3      	ldr	r3, [r2, #28]
 801315a:	9600      	str	r6, [sp, #0]
 801315c:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8013160:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8013164:	2d00      	cmp	r5, #0
 8013166:	f000 8083 	beq.w	8013270 <D24_1CH_HTONS_VOL_HP+0x12c>
 801316a:	9207      	str	r2, [sp, #28]
 801316c:	2600      	movs	r6, #0
 801316e:	4622      	mov	r2, r4
 8013170:	f1a1 0b02 	sub.w	fp, r1, #2
 8013174:	4f3f      	ldr	r7, [pc, #252]	@ (8013274 <D24_1CH_HTONS_VOL_HP+0x130>)
 8013176:	461d      	mov	r5, r3
 8013178:	f8cd a00c 	str.w	sl, [sp, #12]
 801317c:	9c00      	ldr	r4, [sp, #0]
 801317e:	e056      	b.n	801322e <D24_1CH_HTONS_VOL_HP+0xea>
 8013180:	7841      	ldrb	r1, [r0, #1]
 8013182:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8013186:	3002      	adds	r0, #2
 8013188:	4488      	add	r8, r1
 801318a:	fa5f f388 	uxtb.w	r3, r8
 801318e:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8013192:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8013196:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 801319a:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 801319e:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 80131a2:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 80131a6:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80131aa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80131ae:	f3c8 0309 	ubfx	r3, r8, #0, #10
 80131b2:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80131b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80131ba:	492f      	ldr	r1, [pc, #188]	@ (8013278 <D24_1CH_HTONS_VOL_HP+0x134>)
 80131bc:	fb23 e901 	smlad	r9, r3, r1, lr
 80131c0:	492e      	ldr	r1, [pc, #184]	@ (801327c <D24_1CH_HTONS_VOL_HP+0x138>)
 80131c2:	fb23 ce01 	smlad	lr, r3, r1, ip
 80131c6:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 80131ca:	2101      	movs	r1, #1
 80131cc:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 80131d0:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 80131d4:	fb23 f301 	smuad	r3, r3, r1
 80131d8:	f5a9 51d8 	sub.w	r1, r9, #6912	@ 0x1b00
 80131dc:	eb08 0c03 	add.w	ip, r8, r3
 80131e0:	9b03      	ldr	r3, [sp, #12]
 80131e2:	f04f 0a00 	mov.w	sl, #0
 80131e6:	440a      	add	r2, r1
 80131e8:	3601      	adds	r6, #1
 80131ea:	9103      	str	r1, [sp, #12]
 80131ec:	1ad2      	subs	r2, r2, r3
 80131ee:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80131f2:	fba2 2304 	umull	r2, r3, r2, r4
 80131f6:	e9cd 2300 	strd	r2, r3, [sp]
 80131fa:	fb04 3309 	mla	r3, r4, r9, r3
 80131fe:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8013202:	9301      	str	r3, [sp, #4]
 8013204:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013208:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 801320c:	f143 0300 	adc.w	r3, r3, #0
 8013210:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8013214:	005a      	lsls	r2, r3, #1
 8013216:	9b04      	ldr	r3, [sp, #16]
 8013218:	fbc3 9a08 	smlal	r9, sl, r3, r8
 801321c:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8013220:	f303 030f 	ssat	r3, #16, r3
 8013224:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8013228:	9b05      	ldr	r3, [sp, #20]
 801322a:	429e      	cmp	r6, r3
 801322c:	d010      	beq.n	8013250 <D24_1CH_HTONS_VOL_HP+0x10c>
 801322e:	f890 9003 	ldrb.w	r9, [r0, #3]
 8013232:	f016 0f01 	tst.w	r6, #1
 8013236:	7801      	ldrb	r1, [r0, #0]
 8013238:	ea4f 2309 	mov.w	r3, r9, lsl #8
 801323c:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8013240:	d09e      	beq.n	8013180 <D24_1CH_HTONS_VOL_HP+0x3c>
 8013242:	f890 8002 	ldrb.w	r8, [r0, #2]
 8013246:	3004      	adds	r0, #4
 8013248:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 801324c:	4488      	add	r8, r1
 801324e:	e79c      	b.n	801318a <D24_1CH_HTONS_VOL_HP+0x46>
 8013250:	4614      	mov	r4, r2
 8013252:	462b      	mov	r3, r5
 8013254:	9a07      	ldr	r2, [sp, #28]
 8013256:	2000      	movs	r0, #0
 8013258:	61d3      	str	r3, [r2, #28]
 801325a:	9b06      	ldr	r3, [sp, #24]
 801325c:	f8c2 c008 	str.w	ip, [r2, #8]
 8013260:	f8c2 e00c 	str.w	lr, [r2, #12]
 8013264:	6193      	str	r3, [r2, #24]
 8013266:	e9c2 4104 	strd	r4, r1, [r2, #16]
 801326a:	b009      	add	sp, #36	@ 0x24
 801326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013270:	4651      	mov	r1, sl
 8013272:	e7f0      	b.n	8013256 <D24_1CH_HTONS_VOL_HP+0x112>
 8013274:	24000000 	.word	0x24000000
 8013278:	00030001 	.word	0x00030001
 801327c:	00060007 	.word	0x00060007

08013280 <D32_1CH_HTONS_VOL_HP>:
 8013280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013284:	6993      	ldr	r3, [r2, #24]
 8013286:	b087      	sub	sp, #28
 8013288:	4683      	mov	fp, r0
 801328a:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 801328c:	9304      	str	r3, [sp, #16]
 801328e:	69d5      	ldr	r5, [r2, #28]
 8013290:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8013292:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8013296:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 801329a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801329e:	2800      	cmp	r0, #0
 80132a0:	d077      	beq.n	8013392 <D32_1CH_HTONS_VOL_HP+0x112>
 80132a2:	460f      	mov	r7, r1
 80132a4:	46f1      	mov	r9, lr
 80132a6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80132aa:	f8cd 8000 	str.w	r8, [sp]
 80132ae:	4e3a      	ldr	r6, [pc, #232]	@ (8013398 <D32_1CH_HTONS_VOL_HP+0x118>)
 80132b0:	469e      	mov	lr, r3
 80132b2:	46a0      	mov	r8, r4
 80132b4:	9103      	str	r1, [sp, #12]
 80132b6:	9205      	str	r2, [sp, #20]
 80132b8:	f85b 4b04 	ldr.w	r4, [fp], #4
 80132bc:	ba64      	rev16	r4, r4
 80132be:	b2e0      	uxtb	r0, r4
 80132c0:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80132c4:	f3c4 4107 	ubfx	r1, r4, #16, #8
 80132c8:	0e24      	lsrs	r4, r4, #24
 80132ca:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80132ce:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80132d2:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 80132d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80132da:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80132de:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 80132e2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80132e6:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 80132ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80132ee:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80132f2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80132f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80132fa:	f3c5 0009 	ubfx	r0, r5, #0, #10
 80132fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8013302:	4826      	ldr	r0, [pc, #152]	@ (801339c <D32_1CH_HTONS_VOL_HP+0x11c>)
 8013304:	fb23 c400 	smlad	r4, r3, r0, ip
 8013308:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801330c:	fb21 4402 	smlad	r4, r1, r2, r4
 8013310:	4823      	ldr	r0, [pc, #140]	@ (80133a0 <D32_1CH_HTONS_VOL_HP+0x120>)
 8013312:	fb23 ec00 	smlad	ip, r3, r0, lr
 8013316:	4823      	ldr	r0, [pc, #140]	@ (80133a4 <D32_1CH_HTONS_VOL_HP+0x124>)
 8013318:	fb21 cc00 	smlad	ip, r1, r0, ip
 801331c:	2201      	movs	r2, #1
 801331e:	fb23 f302 	smuad	r3, r3, r2
 8013322:	4821      	ldr	r0, [pc, #132]	@ (80133a8 <D32_1CH_HTONS_VOL_HP+0x128>)
 8013324:	fb21 3e00 	smlad	lr, r1, r0, r3
 8013328:	9b00      	ldr	r3, [sp, #0]
 801332a:	f5a4 4480 	sub.w	r4, r4, #16384	@ 0x4000
 801332e:	4423      	add	r3, r4
 8013330:	eba3 0209 	sub.w	r2, r3, r9
 8013334:	46a1      	mov	r9, r4
 8013336:	17d1      	asrs	r1, r2, #31
 8013338:	fba2 230a 	umull	r2, r3, r2, sl
 801333c:	e9cd 2300 	strd	r2, r3, [sp]
 8013340:	fb0a 3301 	mla	r3, sl, r1, r3
 8013344:	9301      	str	r3, [sp, #4]
 8013346:	e9dd 2300 	ldrd	r2, r3, [sp]
 801334a:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 801334e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013352:	f143 0300 	adc.w	r3, r3, #0
 8013356:	0399      	lsls	r1, r3, #14
 8013358:	005b      	lsls	r3, r3, #1
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	2300      	movs	r3, #0
 801335e:	fbc8 2301 	smlal	r2, r3, r8, r1
 8013362:	109b      	asrs	r3, r3, #2
 8013364:	f303 030f 	ssat	r3, #16, r3
 8013368:	f827 3b02 	strh.w	r3, [r7], #2
 801336c:	9b03      	ldr	r3, [sp, #12]
 801336e:	429f      	cmp	r7, r3
 8013370:	d1a2      	bne.n	80132b8 <D32_1CH_HTONS_VOL_HP+0x38>
 8013372:	4673      	mov	r3, lr
 8013374:	f8dd 8000 	ldr.w	r8, [sp]
 8013378:	9a05      	ldr	r2, [sp, #20]
 801337a:	6093      	str	r3, [r2, #8]
 801337c:	2000      	movs	r0, #0
 801337e:	9b04      	ldr	r3, [sp, #16]
 8013380:	f8c2 c00c 	str.w	ip, [r2, #12]
 8013384:	61d5      	str	r5, [r2, #28]
 8013386:	6193      	str	r3, [r2, #24]
 8013388:	e9c2 8404 	strd	r8, r4, [r2, #16]
 801338c:	b007      	add	sp, #28
 801338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013392:	4674      	mov	r4, lr
 8013394:	e7f1      	b.n	801337a <D32_1CH_HTONS_VOL_HP+0xfa>
 8013396:	bf00      	nop
 8013398:	24000000 	.word	0x24000000
 801339c:	00060003 	.word	0x00060003
 80133a0:	000a000c 	.word	0x000a000c
 80133a4:	000c000a 	.word	0x000c000a
 80133a8:	00030006 	.word	0x00030006

080133ac <D48_1CH_HTONS_VOL_HP>:
 80133ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b0:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 80133b2:	b087      	sub	sp, #28
 80133b4:	6993      	ldr	r3, [r2, #24]
 80133b6:	9701      	str	r7, [sp, #4]
 80133b8:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80133ba:	6a17      	ldr	r7, [r2, #32]
 80133bc:	9304      	str	r3, [sp, #16]
 80133be:	69d6      	ldr	r6, [r2, #28]
 80133c0:	9702      	str	r7, [sp, #8]
 80133c2:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 80133c6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 80133ca:	2d00      	cmp	r5, #0
 80133cc:	f000 8093 	beq.w	80134f6 <D48_1CH_HTONS_VOL_HP+0x14a>
 80133d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80133d4:	f1a1 0b02 	sub.w	fp, r1, #2
 80133d8:	46f2      	mov	sl, lr
 80133da:	4f48      	ldr	r7, [pc, #288]	@ (80134fc <D48_1CH_HTONS_VOL_HP+0x150>)
 80133dc:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 80133e0:	469e      	mov	lr, r3
 80133e2:	9205      	str	r2, [sp, #20]
 80133e4:	9103      	str	r1, [sp, #12]
 80133e6:	e9d0 3200 	ldrd	r3, r2, [r0]
 80133ea:	3006      	adds	r0, #6
 80133ec:	ba5b      	rev16	r3, r3
 80133ee:	fa92 f992 	rev16.w	r9, r2
 80133f2:	b2dd      	uxtb	r5, r3
 80133f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80133f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80133fc:	0e1b      	lsrs	r3, r3, #24
 80133fe:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8013402:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8013406:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 801340a:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 801340e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8013412:	fa5f f289 	uxtb.w	r2, r9
 8013416:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 801341a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801341e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8013422:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8013426:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801342a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 801342e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013432:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8013436:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801343a:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 801343e:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8013442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013446:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 801344a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801344e:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8013452:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8013456:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801345a:	4b29      	ldr	r3, [pc, #164]	@ (8013500 <D48_1CH_HTONS_VOL_HP+0x154>)
 801345c:	fb28 c103 	smlad	r1, r8, r3, ip
 8013460:	4b28      	ldr	r3, [pc, #160]	@ (8013504 <D48_1CH_HTONS_VOL_HP+0x158>)
 8013462:	fb25 1103 	smlad	r1, r5, r3, r1
 8013466:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801346a:	fb22 1903 	smlad	r9, r2, r3, r1
 801346e:	4b26      	ldr	r3, [pc, #152]	@ (8013508 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8013470:	fb28 ec03 	smlad	ip, r8, r3, lr
 8013474:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8013478:	fb25 cc03 	smlad	ip, r5, r3, ip
 801347c:	4b23      	ldr	r3, [pc, #140]	@ (801350c <D48_1CH_HTONS_VOL_HP+0x160>)
 801347e:	fb22 cc03 	smlad	ip, r2, r3, ip
 8013482:	2101      	movs	r1, #1
 8013484:	fb28 f801 	smuad	r8, r8, r1
 8013488:	4b21      	ldr	r3, [pc, #132]	@ (8013510 <D48_1CH_HTONS_VOL_HP+0x164>)
 801348a:	fb25 8503 	smlad	r5, r5, r3, r8
 801348e:	4b21      	ldr	r3, [pc, #132]	@ (8013514 <D48_1CH_HTONS_VOL_HP+0x168>)
 8013490:	fb22 5e03 	smlad	lr, r2, r3, r5
 8013494:	f5a9 4158 	sub.w	r1, r9, #55296	@ 0xd800
 8013498:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801349c:	190a      	adds	r2, r1, r4
 801349e:	9c02      	ldr	r4, [sp, #8]
 80134a0:	eba2 020a 	sub.w	r2, r2, sl
 80134a4:	468a      	mov	sl, r1
 80134a6:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80134aa:	fba2 2304 	umull	r2, r3, r2, r4
 80134ae:	fb04 3309 	mla	r3, r4, r9, r3
 80134b2:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 80134b6:	f04f 0900 	mov.w	r9, #0
 80134ba:	f143 0500 	adc.w	r5, r3, #0
 80134be:	9b01      	ldr	r3, [sp, #4]
 80134c0:	032a      	lsls	r2, r5, #12
 80134c2:	006c      	lsls	r4, r5, #1
 80134c4:	fbc3 8902 	smlal	r8, r9, r3, r2
 80134c8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 80134cc:	f303 030f 	ssat	r3, #16, r3
 80134d0:	f82b 3f02 	strh.w	r3, [fp, #2]!
 80134d4:	9b03      	ldr	r3, [sp, #12]
 80134d6:	4283      	cmp	r3, r0
 80134d8:	d185      	bne.n	80133e6 <D48_1CH_HTONS_VOL_HP+0x3a>
 80134da:	4673      	mov	r3, lr
 80134dc:	9a05      	ldr	r2, [sp, #20]
 80134de:	6093      	str	r3, [r2, #8]
 80134e0:	2000      	movs	r0, #0
 80134e2:	9b04      	ldr	r3, [sp, #16]
 80134e4:	f8c2 c00c 	str.w	ip, [r2, #12]
 80134e8:	61d6      	str	r6, [r2, #28]
 80134ea:	6193      	str	r3, [r2, #24]
 80134ec:	e9c2 4104 	strd	r4, r1, [r2, #16]
 80134f0:	b007      	add	sp, #28
 80134f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134f6:	4671      	mov	r1, lr
 80134f8:	e7f1      	b.n	80134de <D48_1CH_HTONS_VOL_HP+0x132>
 80134fa:	bf00      	nop
 80134fc:	24000000 	.word	0x24000000
 8013500:	000f000a 	.word	0x000f000a
 8013504:	00060003 	.word	0x00060003
 8013508:	00150019 	.word	0x00150019
 801350c:	00190015 	.word	0x00190015
 8013510:	00030006 	.word	0x00030006
 8013514:	000a000f 	.word	0x000a000f

08013518 <D64_1CH_HTONS_VOL_HP>:
 8013518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801351e:	b089      	sub	sp, #36	@ 0x24
 8013520:	6993      	ldr	r3, [r2, #24]
 8013522:	4686      	mov	lr, r0
 8013524:	9503      	str	r5, [sp, #12]
 8013526:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8013528:	6a15      	ldr	r5, [r2, #32]
 801352a:	9306      	str	r3, [sp, #24]
 801352c:	69d6      	ldr	r6, [r2, #28]
 801352e:	9504      	str	r5, [sp, #16]
 8013530:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 8013534:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8013538:	2800      	cmp	r0, #0
 801353a:	f000 80a4 	beq.w	8013686 <D64_1CH_HTONS_VOL_HP+0x16e>
 801353e:	460f      	mov	r7, r1
 8013540:	46f1      	mov	r9, lr
 8013542:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8013546:	4d56      	ldr	r5, [pc, #344]	@ (80136a0 <D64_1CH_HTONS_VOL_HP+0x188>)
 8013548:	46a2      	mov	sl, r4
 801354a:	469e      	mov	lr, r3
 801354c:	9105      	str	r1, [sp, #20]
 801354e:	9207      	str	r2, [sp, #28]
 8013550:	f859 1b08 	ldr.w	r1, [r9], #8
 8013554:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8013558:	ba49      	rev16	r1, r1
 801355a:	fa93 fb93 	rev16.w	fp, r3
 801355e:	b2cb      	uxtb	r3, r1
 8013560:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013564:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8013568:	0e09      	lsrs	r1, r1, #24
 801356a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 801356e:	fa5f f38b 	uxtb.w	r3, fp
 8013572:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8013576:	4426      	add	r6, r4
 8013578:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801357c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8013580:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8013584:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8013588:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801358c:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8013590:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8013594:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8013598:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801359c:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 80135a0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80135a4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80135a8:	f3cb 4607 	ubfx	r6, fp, #16, #8
 80135ac:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 80135b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80135b4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80135b8:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 80135bc:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 80135c0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80135c4:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 80135c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80135cc:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80135d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80135d4:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 80135d8:	f3c6 0409 	ubfx	r4, r6, #0, #10
 80135dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80135e0:	f3cb 0009 	ubfx	r0, fp, #0, #10
 80135e4:	ea4f 269b 	mov.w	r6, fp, lsr #10
 80135e8:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 80135ec:	482d      	ldr	r0, [pc, #180]	@ (80136a4 <D64_1CH_HTONS_VOL_HP+0x18c>)
 80135ee:	fb22 cc00 	smlad	ip, r2, r0, ip
 80135f2:	482d      	ldr	r0, [pc, #180]	@ (80136a8 <D64_1CH_HTONS_VOL_HP+0x190>)
 80135f4:	fb21 cc00 	smlad	ip, r1, r0, ip
 80135f8:	482c      	ldr	r0, [pc, #176]	@ (80136ac <D64_1CH_HTONS_VOL_HP+0x194>)
 80135fa:	fb23 cc00 	smlad	ip, r3, r0, ip
 80135fe:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8013602:	fb2b c404 	smlad	r4, fp, r4, ip
 8013606:	482a      	ldr	r0, [pc, #168]	@ (80136b0 <D64_1CH_HTONS_VOL_HP+0x198>)
 8013608:	fb22 ec00 	smlad	ip, r2, r0, lr
 801360c:	fb2b cc10 	smladx	ip, fp, r0, ip
 8013610:	4828      	ldr	r0, [pc, #160]	@ (80136b4 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8013612:	fb21 cc00 	smlad	ip, r1, r0, ip
 8013616:	fb23 cc10 	smladx	ip, r3, r0, ip
 801361a:	f04f 0e01 	mov.w	lr, #1
 801361e:	fb22 f20e 	smuad	r2, r2, lr
 8013622:	4825      	ldr	r0, [pc, #148]	@ (80136b8 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8013624:	fb21 2100 	smlad	r1, r1, r0, r2
 8013628:	4a24      	ldr	r2, [pc, #144]	@ (80136bc <D64_1CH_HTONS_VOL_HP+0x1a4>)
 801362a:	fb23 1302 	smlad	r3, r3, r2, r1
 801362e:	4a24      	ldr	r2, [pc, #144]	@ (80136c0 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8013630:	fb2b 3e02 	smlad	lr, fp, r2, r3
 8013634:	f5a4 3400 	sub.w	r4, r4, #131072	@ 0x20000
 8013638:	eb04 0208 	add.w	r2, r4, r8
 801363c:	eba2 020a 	sub.w	r2, r2, sl
 8013640:	46a2      	mov	sl, r4
 8013642:	4610      	mov	r0, r2
 8013644:	17d1      	asrs	r1, r2, #31
 8013646:	e9cd 0100 	strd	r0, r1, [sp]
 801364a:	9904      	ldr	r1, [sp, #16]
 801364c:	9801      	ldr	r0, [sp, #4]
 801364e:	fba2 2301 	umull	r2, r3, r2, r1
 8013652:	fb01 3300 	mla	r3, r1, r0, r3
 8013656:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 801365a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801365e:	f143 0100 	adc.w	r1, r3, #0
 8013662:	9b03      	ldr	r3, [sp, #12]
 8013664:	02ca      	lsls	r2, r1, #11
 8013666:	ea4f 0841 	mov.w	r8, r1, lsl #1
 801366a:	2100      	movs	r1, #0
 801366c:	fbc3 0102 	smlal	r0, r1, r3, r2
 8013670:	108b      	asrs	r3, r1, #2
 8013672:	f303 030f 	ssat	r3, #16, r3
 8013676:	f827 3b02 	strh.w	r3, [r7], #2
 801367a:	9b05      	ldr	r3, [sp, #20]
 801367c:	429f      	cmp	r7, r3
 801367e:	f47f af67 	bne.w	8013550 <D64_1CH_HTONS_VOL_HP+0x38>
 8013682:	4673      	mov	r3, lr
 8013684:	9a07      	ldr	r2, [sp, #28]
 8013686:	6093      	str	r3, [r2, #8]
 8013688:	2000      	movs	r0, #0
 801368a:	9b06      	ldr	r3, [sp, #24]
 801368c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8013690:	61d6      	str	r6, [r2, #28]
 8013692:	6193      	str	r3, [r2, #24]
 8013694:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8013698:	b009      	add	sp, #36	@ 0x24
 801369a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801369e:	bf00      	nop
 80136a0:	24000000 	.word	0x24000000
 80136a4:	001c0015 	.word	0x001c0015
 80136a8:	000f000a 	.word	0x000f000a
 80136ac:	00060003 	.word	0x00060003
 80136b0:	0024002a 	.word	0x0024002a
 80136b4:	002e0030 	.word	0x002e0030
 80136b8:	00030006 	.word	0x00030006
 80136bc:	000a000f 	.word	0x000a000f
 80136c0:	0015001c 	.word	0x0015001c

080136c4 <D80_1CH_HTONS_VOL_HP>:
 80136c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c8:	6913      	ldr	r3, [r2, #16]
 80136ca:	b089      	sub	sp, #36	@ 0x24
 80136cc:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80136ce:	9301      	str	r3, [sp, #4]
 80136d0:	9603      	str	r6, [sp, #12]
 80136d2:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80136d4:	6a16      	ldr	r6, [r2, #32]
 80136d6:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 80136da:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 80136de:	9306      	str	r3, [sp, #24]
 80136e0:	9604      	str	r6, [sp, #16]
 80136e2:	69d3      	ldr	r3, [r2, #28]
 80136e4:	2c00      	cmp	r4, #0
 80136e6:	f000 80ce 	beq.w	8013886 <D80_1CH_HTONS_VOL_HP+0x1c2>
 80136ea:	3902      	subs	r1, #2
 80136ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80136f0:	4e66      	ldr	r6, [pc, #408]	@ (801388c <D80_1CH_HTONS_VOL_HP+0x1c8>)
 80136f2:	469e      	mov	lr, r3
 80136f4:	9102      	str	r1, [sp, #8]
 80136f6:	46aa      	mov	sl, r5
 80136f8:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 80136fc:	9207      	str	r2, [sp, #28]
 80136fe:	9105      	str	r1, [sp, #20]
 8013700:	6883      	ldr	r3, [r0, #8]
 8013702:	e9d0 4200 	ldrd	r4, r2, [r0]
 8013706:	300a      	adds	r0, #10
 8013708:	ba64      	rev16	r4, r4
 801370a:	ba52      	rev16	r2, r2
 801370c:	fa93 fb93 	rev16.w	fp, r3
 8013710:	b2e5      	uxtb	r5, r4
 8013712:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8013716:	f3c4 4107 	ubfx	r1, r4, #16, #8
 801371a:	0e24      	lsrs	r4, r4, #24
 801371c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8013720:	b2d5      	uxtb	r5, r2
 8013722:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8013726:	44c6      	add	lr, r8
 8013728:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801372c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8013730:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8013734:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8013738:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801373c:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 8013740:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8013744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013748:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 801374c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8013750:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8013754:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8013758:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 801375c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8013760:	0e12      	lsrs	r2, r2, #24
 8013762:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8013766:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 801376a:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801376e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8013772:	fa5f fb8b 	uxtb.w	fp, fp
 8013776:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801377a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801377e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8013782:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013786:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 801378a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801378e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8013792:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8013796:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 801379a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801379e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80137a2:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 80137a6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80137aa:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80137ae:	f3ce 0109 	ubfx	r1, lr, #0, #10
 80137b2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80137b6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 80137ba:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80137be:	4934      	ldr	r1, [pc, #208]	@ (8013890 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 80137c0:	fb23 cc01 	smlad	ip, r3, r1, ip
 80137c4:	4933      	ldr	r1, [pc, #204]	@ (8013894 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 80137c6:	fb24 cc01 	smlad	ip, r4, r1, ip
 80137ca:	4933      	ldr	r1, [pc, #204]	@ (8013898 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80137cc:	fb28 cc01 	smlad	ip, r8, r1, ip
 80137d0:	4932      	ldr	r1, [pc, #200]	@ (801389c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 80137d2:	fb22 cc01 	smlad	ip, r2, r1, ip
 80137d6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80137da:	fb2b c901 	smlad	r9, fp, r1, ip
 80137de:	4930      	ldr	r1, [pc, #192]	@ (80138a0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 80137e0:	fb23 7701 	smlad	r7, r3, r1, r7
 80137e4:	492f      	ldr	r1, [pc, #188]	@ (80138a4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80137e6:	fb24 7701 	smlad	r7, r4, r1, r7
 80137ea:	f04f 1c4b 	mov.w	ip, #4915275	@ 0x4b004b
 80137ee:	fb28 7c0c 	smlad	ip, r8, ip, r7
 80137f2:	492d      	ldr	r1, [pc, #180]	@ (80138a8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80137f4:	fb22 cc01 	smlad	ip, r2, r1, ip
 80137f8:	492c      	ldr	r1, [pc, #176]	@ (80138ac <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80137fa:	fb2b cc01 	smlad	ip, fp, r1, ip
 80137fe:	2101      	movs	r1, #1
 8013800:	fb23 f301 	smuad	r3, r3, r1
 8013804:	492a      	ldr	r1, [pc, #168]	@ (80138b0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8013806:	fb24 3401 	smlad	r4, r4, r1, r3
 801380a:	492a      	ldr	r1, [pc, #168]	@ (80138b4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 801380c:	fb28 4101 	smlad	r1, r8, r1, r4
 8013810:	4f29      	ldr	r7, [pc, #164]	@ (80138b8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8013812:	fb22 1207 	smlad	r2, r2, r7, r1
 8013816:	4f29      	ldr	r7, [pc, #164]	@ (80138bc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8013818:	fb2b 2707 	smlad	r7, fp, r7, r2
 801381c:	f5a9 317a 	sub.w	r1, r9, #256000	@ 0x3e800
 8013820:	9b01      	ldr	r3, [sp, #4]
 8013822:	9c04      	ldr	r4, [sp, #16]
 8013824:	440b      	add	r3, r1
 8013826:	eba3 020a 	sub.w	r2, r3, sl
 801382a:	468a      	mov	sl, r1
 801382c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8013830:	fba2 2304 	umull	r2, r3, r2, r4
 8013834:	fb04 3309 	mla	r3, r4, r9, r3
 8013838:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 801383c:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8013840:	f143 0500 	adc.w	r5, r3, #0
 8013844:	006b      	lsls	r3, r5, #1
 8013846:	02aa      	lsls	r2, r5, #10
 8013848:	2500      	movs	r5, #0
 801384a:	9301      	str	r3, [sp, #4]
 801384c:	9b03      	ldr	r3, [sp, #12]
 801384e:	fbc3 4502 	smlal	r4, r5, r3, r2
 8013852:	9a02      	ldr	r2, [sp, #8]
 8013854:	10ab      	asrs	r3, r5, #2
 8013856:	f303 030f 	ssat	r3, #16, r3
 801385a:	f822 3f02 	strh.w	r3, [r2, #2]!
 801385e:	9b05      	ldr	r3, [sp, #20]
 8013860:	9202      	str	r2, [sp, #8]
 8013862:	4298      	cmp	r0, r3
 8013864:	f47f af4c 	bne.w	8013700 <D80_1CH_HTONS_VOL_HP+0x3c>
 8013868:	4673      	mov	r3, lr
 801386a:	9a07      	ldr	r2, [sp, #28]
 801386c:	61d3      	str	r3, [r2, #28]
 801386e:	2000      	movs	r0, #0
 8013870:	9b01      	ldr	r3, [sp, #4]
 8013872:	6097      	str	r7, [r2, #8]
 8013874:	f8c2 c00c 	str.w	ip, [r2, #12]
 8013878:	e9c2 3104 	strd	r3, r1, [r2, #16]
 801387c:	9b06      	ldr	r3, [sp, #24]
 801387e:	6193      	str	r3, [r2, #24]
 8013880:	b009      	add	sp, #36	@ 0x24
 8013882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013886:	4629      	mov	r1, r5
 8013888:	e7f0      	b.n	801386c <D80_1CH_HTONS_VOL_HP+0x1a8>
 801388a:	bf00      	nop
 801388c:	24000000 	.word	0x24000000
 8013890:	002d0024 	.word	0x002d0024
 8013894:	001c0015 	.word	0x001c0015
 8013898:	000f000a 	.word	0x000f000a
 801389c:	00060003 	.word	0x00060003
 80138a0:	0037003f 	.word	0x0037003f
 80138a4:	00450049 	.word	0x00450049
 80138a8:	00490045 	.word	0x00490045
 80138ac:	003f0037 	.word	0x003f0037
 80138b0:	00030006 	.word	0x00030006
 80138b4:	000a000f 	.word	0x000a000f
 80138b8:	0015001c 	.word	0x0015001c
 80138bc:	0024002d 	.word	0x0024002d

080138c0 <D128_1CH_HTONS_VOL_HP>:
 80138c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c4:	6914      	ldr	r4, [r2, #16]
 80138c6:	b08d      	sub	sp, #52	@ 0x34
 80138c8:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80138ca:	9404      	str	r4, [sp, #16]
 80138cc:	6954      	ldr	r4, [r2, #20]
 80138ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 80138d0:	9405      	str	r4, [sp, #20]
 80138d2:	6994      	ldr	r4, [r2, #24]
 80138d4:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80138d8:	940a      	str	r4, [sp, #40]	@ 0x28
 80138da:	6894      	ldr	r4, [r2, #8]
 80138dc:	9403      	str	r4, [sp, #12]
 80138de:	68d4      	ldr	r4, [r2, #12]
 80138e0:	9402      	str	r4, [sp, #8]
 80138e2:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80138e4:	6a12      	ldr	r2, [r2, #32]
 80138e6:	9407      	str	r4, [sp, #28]
 80138e8:	9208      	str	r2, [sp, #32]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	f000 812e 	beq.w	8013b4c <D128_1CH_HTONS_VOL_HP+0x28c>
 80138f0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80138f4:	f100 0b10 	add.w	fp, r0, #16
 80138f8:	f8df 9290 	ldr.w	r9, [pc, #656]	@ 8013b8c <D128_1CH_HTONS_VOL_HP+0x2cc>
 80138fc:	9106      	str	r1, [sp, #24]
 80138fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8013900:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8013904:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8013908:	ba40      	rev16	r0, r0
 801390a:	ba52      	rev16	r2, r2
 801390c:	ba5b      	rev16	r3, r3
 801390e:	ba76      	rev16	r6, r6
 8013910:	b2c5      	uxtb	r5, r0
 8013912:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8013916:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801391a:	0e00      	lsrs	r0, r0, #24
 801391c:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 8013920:	b2d5      	uxtb	r5, r2
 8013922:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8013926:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801392a:	44bc      	add	ip, r7
 801392c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013930:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8013934:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8013938:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 801393c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8013940:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8013944:	0e12      	lsrs	r2, r2, #24
 8013946:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 801394a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 801394e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8013952:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8013956:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 801395a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 801395e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013962:	b2da      	uxtb	r2, r3
 8013964:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8013968:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801396c:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8013970:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8013974:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8013978:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801397c:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8013980:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013984:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8013988:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801398c:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8013990:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8013994:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8013998:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801399c:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 80139a0:	0e1b      	lsrs	r3, r3, #24
 80139a2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80139a6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80139aa:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 80139ae:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80139b2:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 80139b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80139ba:	b2f3      	uxtb	r3, r6
 80139bc:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 80139c0:	f3c8 0009 	ubfx	r0, r8, #0, #10
 80139c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80139c8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80139cc:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80139d0:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80139d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80139d8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80139dc:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80139e0:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80139e4:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80139e8:	0e36      	lsrs	r6, r6, #24
 80139ea:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 80139ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80139f2:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 80139f6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80139fa:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 80139fe:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013a02:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8013a06:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8013a0a:	9101      	str	r1, [sp, #4]
 8013a0c:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8013a10:	9b02      	ldr	r3, [sp, #8]
 8013a12:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8013a16:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8013a1a:	4611      	mov	r1, r2
 8013a1c:	f3cc 0209 	ubfx	r2, ip, #0, #10
 8013a20:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8013a24:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8013a28:	4a49      	ldr	r2, [pc, #292]	@ (8013b50 <D128_1CH_HTONS_VOL_HP+0x290>)
 8013a2a:	fb2e 3202 	smlad	r2, lr, r2, r3
 8013a2e:	4b49      	ldr	r3, [pc, #292]	@ (8013b54 <D128_1CH_HTONS_VOL_HP+0x294>)
 8013a30:	fb27 2203 	smlad	r2, r7, r3, r2
 8013a34:	4b48      	ldr	r3, [pc, #288]	@ (8013b58 <D128_1CH_HTONS_VOL_HP+0x298>)
 8013a36:	fb25 2203 	smlad	r2, r5, r3, r2
 8013a3a:	4b48      	ldr	r3, [pc, #288]	@ (8013b5c <D128_1CH_HTONS_VOL_HP+0x29c>)
 8013a3c:	fb24 2203 	smlad	r2, r4, r3, r2
 8013a40:	4b47      	ldr	r3, [pc, #284]	@ (8013b60 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8013a42:	fb20 2803 	smlad	r8, r0, r3, r2
 8013a46:	4b47      	ldr	r3, [pc, #284]	@ (8013b64 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8013a48:	9a01      	ldr	r2, [sp, #4]
 8013a4a:	fb22 8203 	smlad	r2, r2, r3, r8
 8013a4e:	4b46      	ldr	r3, [pc, #280]	@ (8013b68 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8013a50:	9102      	str	r1, [sp, #8]
 8013a52:	fb21 2203 	smlad	r2, r1, r3, r2
 8013a56:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 8013a5a:	fb26 2308 	smlad	r3, r6, r8, r2
 8013a5e:	4619      	mov	r1, r3
 8013a60:	9a03      	ldr	r2, [sp, #12]
 8013a62:	4b42      	ldr	r3, [pc, #264]	@ (8013b6c <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8013a64:	fb2e 2803 	smlad	r8, lr, r3, r2
 8013a68:	4b41      	ldr	r3, [pc, #260]	@ (8013b70 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8013a6a:	fb27 8a03 	smlad	sl, r7, r3, r8
 8013a6e:	f8df 8120 	ldr.w	r8, [pc, #288]	@ 8013b90 <D128_1CH_HTONS_VOL_HP+0x2d0>
 8013a72:	fb25 a808 	smlad	r8, r5, r8, sl
 8013a76:	f8df a11c 	ldr.w	sl, [pc, #284]	@ 8013b94 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8013a7a:	fb24 880a 	smlad	r8, r4, sl, r8
 8013a7e:	f8df a118 	ldr.w	sl, [pc, #280]	@ 8013b98 <D128_1CH_HTONS_VOL_HP+0x2d8>
 8013a82:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8013a86:	f8df 8114 	ldr.w	r8, [pc, #276]	@ 8013b9c <D128_1CH_HTONS_VOL_HP+0x2dc>
 8013a8a:	9b01      	ldr	r3, [sp, #4]
 8013a8c:	fb23 aa08 	smlad	sl, r3, r8, sl
 8013a90:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8013ba0 <D128_1CH_HTONS_VOL_HP+0x2e0>
 8013a94:	9a02      	ldr	r2, [sp, #8]
 8013a96:	fb22 a808 	smlad	r8, r2, r8, sl
 8013a9a:	f8df a108 	ldr.w	sl, [pc, #264]	@ 8013ba4 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8013a9e:	fb26 830a 	smlad	r3, r6, sl, r8
 8013aa2:	f04f 0801 	mov.w	r8, #1
 8013aa6:	9302      	str	r3, [sp, #8]
 8013aa8:	fb2e fe08 	smuad	lr, lr, r8
 8013aac:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8013ba8 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8013ab0:	fb27 ee08 	smlad	lr, r7, r8, lr
 8013ab4:	4f2f      	ldr	r7, [pc, #188]	@ (8013b74 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8013ab6:	fb25 ee07 	smlad	lr, r5, r7, lr
 8013aba:	4f2f      	ldr	r7, [pc, #188]	@ (8013b78 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8013abc:	fb24 ee07 	smlad	lr, r4, r7, lr
 8013ac0:	4f2e      	ldr	r7, [pc, #184]	@ (8013b7c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8013ac2:	fb20 ee07 	smlad	lr, r0, r7, lr
 8013ac6:	4f2e      	ldr	r7, [pc, #184]	@ (8013b80 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8013ac8:	9b01      	ldr	r3, [sp, #4]
 8013aca:	fb23 ee07 	smlad	lr, r3, r7, lr
 8013ace:	4f2d      	ldr	r7, [pc, #180]	@ (8013b84 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8013ad0:	fb22 e707 	smlad	r7, r2, r7, lr
 8013ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8013b88 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8013ad6:	fb26 7303 	smlad	r3, r6, r3, r7
 8013ada:	f5a1 1680 	sub.w	r6, r1, #1048576	@ 0x100000
 8013ade:	9303      	str	r3, [sp, #12]
 8013ae0:	9b04      	ldr	r3, [sp, #16]
 8013ae2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8013ae6:	9f08      	ldr	r7, [sp, #32]
 8013ae8:	2100      	movs	r1, #0
 8013aea:	4433      	add	r3, r6
 8013aec:	f10b 0b10 	add.w	fp, fp, #16
 8013af0:	461a      	mov	r2, r3
 8013af2:	9b05      	ldr	r3, [sp, #20]
 8013af4:	9605      	str	r6, [sp, #20]
 8013af6:	1ad2      	subs	r2, r2, r3
 8013af8:	17d5      	asrs	r5, r2, #31
 8013afa:	fba2 2307 	umull	r2, r3, r2, r7
 8013afe:	1814      	adds	r4, r2, r0
 8013b00:	fb07 3305 	mla	r3, r7, r5, r3
 8013b04:	eb43 0501 	adc.w	r5, r3, r1
 8013b08:	006b      	lsls	r3, r5, #1
 8013b0a:	022a      	lsls	r2, r5, #8
 8013b0c:	9304      	str	r3, [sp, #16]
 8013b0e:	9b07      	ldr	r3, [sp, #28]
 8013b10:	fbc3 0102 	smlal	r0, r1, r3, r2
 8013b14:	9a06      	ldr	r2, [sp, #24]
 8013b16:	108b      	asrs	r3, r1, #2
 8013b18:	f303 030f 	ssat	r3, #16, r3
 8013b1c:	f822 3b02 	strh.w	r3, [r2], #2
 8013b20:	4613      	mov	r3, r2
 8013b22:	9206      	str	r2, [sp, #24]
 8013b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b26:	4293      	cmp	r3, r2
 8013b28:	f47f aeea 	bne.w	8013900 <D128_1CH_HTONS_VOL_HP+0x40>
 8013b2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013b2e:	2000      	movs	r0, #0
 8013b30:	9903      	ldr	r1, [sp, #12]
 8013b32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013b34:	6099      	str	r1, [r3, #8]
 8013b36:	9902      	ldr	r1, [sp, #8]
 8013b38:	f8c3 c01c 	str.w	ip, [r3, #28]
 8013b3c:	60d9      	str	r1, [r3, #12]
 8013b3e:	9904      	ldr	r1, [sp, #16]
 8013b40:	619a      	str	r2, [r3, #24]
 8013b42:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8013b46:	b00d      	add	sp, #52	@ 0x34
 8013b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4c:	9e05      	ldr	r6, [sp, #20]
 8013b4e:	e7ed      	b.n	8013b2c <D128_1CH_HTONS_VOL_HP+0x26c>
 8013b50:	00780069 	.word	0x00780069
 8013b54:	005b004e 	.word	0x005b004e
 8013b58:	00420037 	.word	0x00420037
 8013b5c:	002d0024 	.word	0x002d0024
 8013b60:	001c0015 	.word	0x001c0015
 8013b64:	000f000a 	.word	0x000f000a
 8013b68:	00060003 	.word	0x00060003
 8013b6c:	00880096 	.word	0x00880096
 8013b70:	00a200ac 	.word	0x00a200ac
 8013b74:	000a000f 	.word	0x000a000f
 8013b78:	0015001c 	.word	0x0015001c
 8013b7c:	0024002d 	.word	0x0024002d
 8013b80:	00370042 	.word	0x00370042
 8013b84:	004e005b 	.word	0x004e005b
 8013b88:	00690078 	.word	0x00690078
 8013b8c:	24000000 	.word	0x24000000
 8013b90:	00b400ba 	.word	0x00b400ba
 8013b94:	00be00c0 	.word	0x00be00c0
 8013b98:	00c000be 	.word	0x00c000be
 8013b9c:	00ba00b4 	.word	0x00ba00b4
 8013ba0:	00ac00a2 	.word	0x00ac00a2
 8013ba4:	00960088 	.word	0x00960088
 8013ba8:	00030006 	.word	0x00030006

08013bac <PDM_Filter_Init>:
 8013bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bae:	2240      	movs	r2, #64	@ 0x40
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	4604      	mov	r4, r0
 8013bb4:	300c      	adds	r0, #12
 8013bb6:	f001 fbd1 	bl	801535c <memset>
 8013bba:	4a56      	ldr	r2, [pc, #344]	@ (8013d14 <PDM_Filter_Init+0x168>)
 8013bbc:	4856      	ldr	r0, [pc, #344]	@ (8013d18 <PDM_Filter_Init+0x16c>)
 8013bbe:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 8013bc2:	6813      	ldr	r3, [r2, #0]
 8013bc4:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8013bc8:	f023 0301 	bic.w	r3, r3, #1
 8013bcc:	6013      	str	r3, [r2, #0]
 8013bce:	6803      	ldr	r3, [r0, #0]
 8013bd0:	400b      	ands	r3, r1
 8013bd2:	42ab      	cmp	r3, r5
 8013bd4:	d040      	beq.n	8013c58 <PDM_Filter_Init+0xac>
 8013bd6:	6803      	ldr	r3, [r0, #0]
 8013bd8:	f24c 2270 	movw	r2, #49776	@ 0xc270
 8013bdc:	4019      	ands	r1, r3
 8013bde:	4291      	cmp	r1, r2
 8013be0:	d03a      	beq.n	8013c58 <PDM_Filter_Init+0xac>
 8013be2:	4b4e      	ldr	r3, [pc, #312]	@ (8013d1c <PDM_Filter_Init+0x170>)
 8013be4:	2101      	movs	r1, #1
 8013be6:	461a      	mov	r2, r3
 8013be8:	6019      	str	r1, [r3, #0]
 8013bea:	6813      	ldr	r3, [r2, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d1fc      	bne.n	8013bea <PDM_Filter_Init+0x3e>
 8013bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8013d20 <PDM_Filter_Init+0x174>)
 8013bf2:	494c      	ldr	r1, [pc, #304]	@ (8013d24 <PDM_Filter_Init+0x178>)
 8013bf4:	4a4c      	ldr	r2, [pc, #304]	@ (8013d28 <PDM_Filter_Init+0x17c>)
 8013bf6:	6019      	str	r1, [r3, #0]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	8820      	ldrh	r0, [r4, #0]
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	8961      	ldrh	r1, [r4, #10]
 8013c00:	f04f 0300 	mov.w	r3, #0
 8013c04:	8922      	ldrh	r2, [r4, #8]
 8013c06:	bf14      	ite	ne
 8013c08:	2500      	movne	r5, #0
 8013c0a:	4d47      	ldreq	r5, [pc, #284]	@ (8013d28 <PDM_Filter_Init+0x17c>)
 8013c0c:	2801      	cmp	r0, #1
 8013c0e:	61a3      	str	r3, [r4, #24]
 8013c10:	6465      	str	r5, [r4, #68]	@ 0x44
 8013c12:	60e3      	str	r3, [r4, #12]
 8013c14:	6263      	str	r3, [r4, #36]	@ 0x24
 8013c16:	6423      	str	r3, [r4, #64]	@ 0x40
 8013c18:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8013c1a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8013c1c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8013c20:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013c24:	d936      	bls.n	8013c94 <PDM_Filter_Init+0xe8>
 8013c26:	2003      	movs	r0, #3
 8013c28:	2302      	movs	r3, #2
 8013c2a:	8862      	ldrh	r2, [r4, #2]
 8013c2c:	2a01      	cmp	r2, #1
 8013c2e:	d92e      	bls.n	8013c8e <PDM_Filter_Init+0xe2>
 8013c30:	2140      	movs	r1, #64	@ 0x40
 8013c32:	2300      	movs	r3, #0
 8013c34:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013c36:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8013c3a:	d101      	bne.n	8013c40 <PDM_Filter_Init+0x94>
 8013c3c:	460b      	mov	r3, r1
 8013c3e:	6421      	str	r1, [r4, #64]	@ 0x40
 8013c40:	6862      	ldr	r2, [r4, #4]
 8013c42:	b11a      	cbz	r2, 8013c4c <PDM_Filter_Init+0xa0>
 8013c44:	f043 0310 	orr.w	r3, r3, #16
 8013c48:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8013c4a:	6423      	str	r3, [r4, #64]	@ 0x40
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	8722      	strh	r2, [r4, #56]	@ 0x38
 8013c50:	b908      	cbnz	r0, 8013c56 <PDM_Filter_Init+0xaa>
 8013c52:	3380      	adds	r3, #128	@ 0x80
 8013c54:	6423      	str	r3, [r4, #64]	@ 0x40
 8013c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c58:	4b34      	ldr	r3, [pc, #208]	@ (8013d2c <PDM_Filter_Init+0x180>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d1c0      	bne.n	8013be2 <PDM_Filter_Init+0x36>
 8013c60:	4a33      	ldr	r2, [pc, #204]	@ (8013d30 <PDM_Filter_Init+0x184>)
 8013c62:	6813      	ldr	r3, [r2, #0]
 8013c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013c68:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8013c6c:	d006      	beq.n	8013c7c <PDM_Filter_Init+0xd0>
 8013c6e:	6813      	ldr	r3, [r2, #0]
 8013c70:	f240 4283 	movw	r2, #1155	@ 0x483
 8013c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013c78:	4293      	cmp	r3, r2
 8013c7a:	d1b2      	bne.n	8013be2 <PDM_Filter_Init+0x36>
 8013c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8013d34 <PDM_Filter_Init+0x188>)
 8013c7e:	2101      	movs	r1, #1
 8013c80:	461a      	mov	r2, r3
 8013c82:	6019      	str	r1, [r3, #0]
 8013c84:	6813      	ldr	r3, [r2, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1fc      	bne.n	8013c84 <PDM_Filter_Init+0xd8>
 8013c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8013d38 <PDM_Filter_Init+0x18c>)
 8013c8c:	e7b1      	b.n	8013bf2 <PDM_Filter_Init+0x46>
 8013c8e:	d03a      	beq.n	8013d06 <PDM_Filter_Init+0x15a>
 8013c90:	4618      	mov	r0, r3
 8013c92:	e7cd      	b.n	8013c30 <PDM_Filter_Init+0x84>
 8013c94:	4d29      	ldr	r5, [pc, #164]	@ (8013d3c <PDM_Filter_Init+0x190>)
 8013c96:	782a      	ldrb	r2, [r5, #0]
 8013c98:	d01b      	beq.n	8013cd2 <PDM_Filter_Init+0x126>
 8013c9a:	2a01      	cmp	r2, #1
 8013c9c:	d001      	beq.n	8013ca2 <PDM_Filter_Init+0xf6>
 8013c9e:	2001      	movs	r0, #1
 8013ca0:	e7c3      	b.n	8013c2a <PDM_Filter_Init+0x7e>
 8013ca2:	4927      	ldr	r1, [pc, #156]	@ (8013d40 <PDM_Filter_Init+0x194>)
 8013ca4:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8013d48 <PDM_Filter_Init+0x19c>
 8013ca8:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 8013cac:	4e25      	ldr	r6, [pc, #148]	@ (8013d44 <PDM_Filter_Init+0x198>)
 8013cae:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013cb2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8013cb6:	ea02 0006 	and.w	r0, r2, r6
 8013cba:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8013cbe:	428f      	cmp	r7, r1
 8013cc0:	ea43 0300 	orr.w	r3, r3, r0
 8013cc4:	4413      	add	r3, r2
 8013cc6:	600b      	str	r3, [r1, #0]
 8013cc8:	d1f1      	bne.n	8013cae <PDM_Filter_Init+0x102>
 8013cca:	2300      	movs	r3, #0
 8013ccc:	2001      	movs	r0, #1
 8013cce:	702b      	strb	r3, [r5, #0]
 8013cd0:	e7ab      	b.n	8013c2a <PDM_Filter_Init+0x7e>
 8013cd2:	2a00      	cmp	r2, #0
 8013cd4:	d1a9      	bne.n	8013c2a <PDM_Filter_Init+0x7e>
 8013cd6:	491a      	ldr	r1, [pc, #104]	@ (8013d40 <PDM_Filter_Init+0x194>)
 8013cd8:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 8013d48 <PDM_Filter_Init+0x19c>
 8013cdc:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 8013ce0:	4e18      	ldr	r6, [pc, #96]	@ (8013d44 <PDM_Filter_Init+0x198>)
 8013ce2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013ce6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8013cea:	ea02 0006 	and.w	r0, r2, r6
 8013cee:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8013cf2:	428f      	cmp	r7, r1
 8013cf4:	ea43 0300 	orr.w	r3, r3, r0
 8013cf8:	4413      	add	r3, r2
 8013cfa:	600b      	str	r3, [r1, #0]
 8013cfc:	d1f1      	bne.n	8013ce2 <PDM_Filter_Init+0x136>
 8013cfe:	2001      	movs	r0, #1
 8013d00:	2300      	movs	r3, #0
 8013d02:	7028      	strb	r0, [r5, #0]
 8013d04:	e791      	b.n	8013c2a <PDM_Filter_Init+0x7e>
 8013d06:	2220      	movs	r2, #32
 8013d08:	4618      	mov	r0, r3
 8013d0a:	2160      	movs	r1, #96	@ 0x60
 8013d0c:	6422      	str	r2, [r4, #64]	@ 0x40
 8013d0e:	4613      	mov	r3, r2
 8013d10:	e790      	b.n	8013c34 <PDM_Filter_Init+0x88>
 8013d12:	bf00      	nop
 8013d14:	e0002000 	.word	0xe0002000
 8013d18:	e000ed00 	.word	0xe000ed00
 8013d1c:	40023008 	.word	0x40023008
 8013d20:	40023000 	.word	0x40023000
 8013d24:	f407a5c2 	.word	0xf407a5c2
 8013d28:	b5e8b5cd 	.word	0xb5e8b5cd
 8013d2c:	e0042000 	.word	0xe0042000
 8013d30:	5c001000 	.word	0x5c001000
 8013d34:	58024c08 	.word	0x58024c08
 8013d38:	58024c00 	.word	0x58024c00
 8013d3c:	240005bc 	.word	0x240005bc
 8013d40:	23fffffc 	.word	0x23fffffc
 8013d44:	000ffc00 	.word	0x000ffc00
 8013d48:	3ff00000 	.word	0x3ff00000

08013d4c <PDM_Filter_setConfig>:
 8013d4c:	4b67      	ldr	r3, [pc, #412]	@ (8013eec <PDM_Filter_setConfig+0x1a0>)
 8013d4e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d128      	bne.n	8013da6 <PDM_Filter_setConfig+0x5a>
 8013d54:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8013d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d58:	880e      	ldrh	r6, [r1, #0]
 8013d5a:	460d      	mov	r5, r1
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	f422 7180 	bic.w	r1, r2, #256	@ 0x100
 8013d62:	1e73      	subs	r3, r6, #1
 8013d64:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8013d68:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 8013d6c:	2b06      	cmp	r3, #6
 8013d6e:	ed2d 8b02 	vpush	{d8}
 8013d72:	6421      	str	r1, [r4, #64]	@ 0x40
 8013d74:	b083      	sub	sp, #12
 8013d76:	d820      	bhi.n	8013dba <PDM_Filter_setConfig+0x6e>
 8013d78:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013d7a:	42b3      	cmp	r3, r6
 8013d7c:	d03d      	beq.n	8013dfa <PDM_Filter_setConfig+0xae>
 8013d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8013ef0 <PDM_Filter_setConfig+0x1a4>)
 8013d80:	4013      	ands	r3, r2
 8013d82:	4333      	orrs	r3, r6
 8013d84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8013d88:	6423      	str	r3, [r4, #64]	@ 0x40
 8013d8a:	f003 030f 	and.w	r3, r3, #15
 8013d8e:	2a70      	cmp	r2, #112	@ 0x70
 8013d90:	f103 33ff 	add.w	r3, r3, #4294967295
 8013d94:	d009      	beq.n	8013daa <PDM_Filter_setConfig+0x5e>
 8013d96:	2b06      	cmp	r3, #6
 8013d98:	d824      	bhi.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013d9a:	e8df f003 	tbb	[pc, r3]
 8013d9e:	878a      	.short	0x878a
 8013da0:	7b7e8184 	.word	0x7b7e8184
 8013da4:	78          	.byte	0x78
 8013da5:	00          	.byte	0x00
 8013da6:	2004      	movs	r0, #4
 8013da8:	4770      	bx	lr
 8013daa:	2b06      	cmp	r3, #6
 8013dac:	d81a      	bhi.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013dae:	e8df f003 	tbb	[pc, r3]
 8013db2:	8f92      	.short	0x8f92
 8013db4:	8617898c 	.word	0x8617898c
 8013db8:	83          	.byte	0x83
 8013db9:	00          	.byte	0x00
 8013dba:	4287      	cmp	r7, r0
 8013dbc:	f000 808e 	beq.w	8013edc <PDM_Filter_setConfig+0x190>
 8013dc0:	f117 0f0c 	cmn.w	r7, #12
 8013dc4:	f04f 0008 	mov.w	r0, #8
 8013dc8:	da11      	bge.n	8013dee <PDM_Filter_setConfig+0xa2>
 8013dca:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8013dce:	3040      	adds	r0, #64	@ 0x40
 8013dd0:	80ab      	strh	r3, [r5, #4]
 8013dd2:	886b      	ldrh	r3, [r5, #2]
 8013dd4:	8626      	strh	r6, [r4, #48]	@ 0x30
 8013dd6:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013dd8:	b003      	add	sp, #12
 8013dda:	ecbd 8b02 	vpop	{d8}
 8013dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013de0:	4b44      	ldr	r3, [pc, #272]	@ (8013ef4 <PDM_Filter_setConfig+0x1a8>)
 8013de2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013de4:	f117 0f0c 	cmn.w	r7, #12
 8013de8:	f04f 0000 	mov.w	r0, #0
 8013dec:	dbed      	blt.n	8013dca <PDM_Filter_setConfig+0x7e>
 8013dee:	2f33      	cmp	r7, #51	@ 0x33
 8013df0:	dd10      	ble.n	8013e14 <PDM_Filter_setConfig+0xc8>
 8013df2:	2333      	movs	r3, #51	@ 0x33
 8013df4:	3040      	adds	r0, #64	@ 0x40
 8013df6:	80ab      	strh	r3, [r5, #4]
 8013df8:	e7eb      	b.n	8013dd2 <PDM_Filter_setConfig+0x86>
 8013dfa:	4287      	cmp	r7, r0
 8013dfc:	d1f2      	bne.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013dfe:	886b      	ldrh	r3, [r5, #2]
 8013e00:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013e02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e04:	2000      	movs	r0, #0
 8013e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013e0a:	6423      	str	r3, [r4, #64]	@ 0x40
 8013e0c:	b003      	add	sp, #12
 8013e0e:	ecbd 8b02 	vpop	{d8}
 8013e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e16:	f003 030f 	and.w	r3, r3, #15
 8013e1a:	3b01      	subs	r3, #1
 8013e1c:	2b06      	cmp	r3, #6
 8013e1e:	d831      	bhi.n	8013e84 <PDM_Filter_setConfig+0x138>
 8013e20:	4a35      	ldr	r2, [pc, #212]	@ (8013ef8 <PDM_Filter_setConfig+0x1ac>)
 8013e22:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8013e26:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8013efc <PDM_Filter_setConfig+0x1b0>
 8013e2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013e2e:	9001      	str	r0, [sp, #4]
 8013e30:	edd3 7a07 	vldr	s15, [r3, #28]
 8013e34:	ed93 8a00 	vldr	s16, [r3]
 8013e38:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013e3c:	f001 fb5c 	bl	80154f8 <powf>
 8013e40:	eef0 8a40 	vmov.f32	s17, s0
 8013e44:	9801      	ldr	r0, [sp, #4]
 8013e46:	ee07 7a90 	vmov	s15, r7
 8013e4a:	ee28 8a28 	vmul.f32	s16, s16, s17
 8013e4e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8013e52:	9001      	str	r0, [sp, #4]
 8013e54:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013e58:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8013f00 <PDM_Filter_setConfig+0x1b4>
 8013e5c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013e60:	f001 fb4a 	bl	80154f8 <powf>
 8013e64:	ee28 8a00 	vmul.f32	s16, s16, s0
 8013e68:	886b      	ldrh	r3, [r5, #2]
 8013e6a:	9801      	ldr	r0, [sp, #4]
 8013e6c:	feb8 8a48 	vrinta.f32	s16, s16
 8013e70:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8013e74:	8727      	strh	r7, [r4, #56]	@ 0x38
 8013e76:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013e78:	8626      	strh	r6, [r4, #48]	@ 0x30
 8013e7a:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	d0bf      	beq.n	8013e02 <PDM_Filter_setConfig+0xb6>
 8013e82:	e7a9      	b.n	8013dd8 <PDM_Filter_setConfig+0x8c>
 8013e84:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8013f04 <PDM_Filter_setConfig+0x1b8>
 8013e88:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8013f08 <PDM_Filter_setConfig+0x1bc>
 8013e8c:	e7db      	b.n	8013e46 <PDM_Filter_setConfig+0xfa>
 8013e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8013f0c <PDM_Filter_setConfig+0x1c0>)
 8013e90:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013e92:	e7a7      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013e94:	4b1e      	ldr	r3, [pc, #120]	@ (8013f10 <PDM_Filter_setConfig+0x1c4>)
 8013e96:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013e98:	e7a4      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8013f14 <PDM_Filter_setConfig+0x1c8>)
 8013e9c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013e9e:	e7a1      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8013f18 <PDM_Filter_setConfig+0x1cc>)
 8013ea2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013ea4:	e79e      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8013f1c <PDM_Filter_setConfig+0x1d0>)
 8013ea8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013eaa:	e79b      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013eac:	4b1c      	ldr	r3, [pc, #112]	@ (8013f20 <PDM_Filter_setConfig+0x1d4>)
 8013eae:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013eb0:	e798      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8013f24 <PDM_Filter_setConfig+0x1d8>)
 8013eb4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013eb6:	e795      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8013f28 <PDM_Filter_setConfig+0x1dc>)
 8013eba:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013ebc:	e792      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8013f2c <PDM_Filter_setConfig+0x1e0>)
 8013ec0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013ec2:	e78f      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8013f30 <PDM_Filter_setConfig+0x1e4>)
 8013ec6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013ec8:	e78c      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013eca:	4b1a      	ldr	r3, [pc, #104]	@ (8013f34 <PDM_Filter_setConfig+0x1e8>)
 8013ecc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013ece:	e789      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013ed0:	4b19      	ldr	r3, [pc, #100]	@ (8013f38 <PDM_Filter_setConfig+0x1ec>)
 8013ed2:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013ed4:	e786      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013ed6:	4b19      	ldr	r3, [pc, #100]	@ (8013f3c <PDM_Filter_setConfig+0x1f0>)
 8013ed8:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013eda:	e783      	b.n	8013de4 <PDM_Filter_setConfig+0x98>
 8013edc:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013ede:	42b3      	cmp	r3, r6
 8013ee0:	f47f af6e 	bne.w	8013dc0 <PDM_Filter_setConfig+0x74>
 8013ee4:	886b      	ldrh	r3, [r5, #2]
 8013ee6:	2008      	movs	r0, #8
 8013ee8:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013eea:	e775      	b.n	8013dd8 <PDM_Filter_setConfig+0x8c>
 8013eec:	b5e8b5cd 	.word	0xb5e8b5cd
 8013ef0:	fffffef0 	.word	0xfffffef0
 8013ef4:	08013065 	.word	0x08013065
 8013ef8:	08015980 	.word	0x08015980
 8013efc:	42000000 	.word	0x42000000
 8013f00:	3d4ccccd 	.word	0x3d4ccccd
 8013f04:	4f800000 	.word	0x4f800000
 8013f08:	00000000 	.word	0x00000000
 8013f0c:	08012471 	.word	0x08012471
 8013f10:	080122f9 	.word	0x080122f9
 8013f14:	080121e9 	.word	0x080121e9
 8013f18:	08012cad 	.word	0x08012cad
 8013f1c:	08012a15 	.word	0x08012a15
 8013f20:	080127dd 	.word	0x080127dd
 8013f24:	080125f9 	.word	0x080125f9
 8013f28:	08013281 	.word	0x08013281
 8013f2c:	08013145 	.word	0x08013145
 8013f30:	080138c1 	.word	0x080138c1
 8013f34:	080136c5 	.word	0x080136c5
 8013f38:	08013519 	.word	0x08013519
 8013f3c:	080133ad 	.word	0x080133ad

08013f40 <arm_rfft_32_fast_init_f32>:
 8013f40:	b180      	cbz	r0, 8013f64 <arm_rfft_32_fast_init_f32+0x24>
 8013f42:	4603      	mov	r3, r0
 8013f44:	2220      	movs	r2, #32
 8013f46:	2010      	movs	r0, #16
 8013f48:	4908      	ldr	r1, [pc, #32]	@ (8013f6c <arm_rfft_32_fast_init_f32+0x2c>)
 8013f4a:	b430      	push	{r4, r5}
 8013f4c:	2514      	movs	r5, #20
 8013f4e:	4c08      	ldr	r4, [pc, #32]	@ (8013f70 <arm_rfft_32_fast_init_f32+0x30>)
 8013f50:	821a      	strh	r2, [r3, #16]
 8013f52:	4a08      	ldr	r2, [pc, #32]	@ (8013f74 <arm_rfft_32_fast_init_f32+0x34>)
 8013f54:	8018      	strh	r0, [r3, #0]
 8013f56:	2000      	movs	r0, #0
 8013f58:	819d      	strh	r5, [r3, #12]
 8013f5a:	615a      	str	r2, [r3, #20]
 8013f5c:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8013f60:	bc30      	pop	{r4, r5}
 8013f62:	4770      	bx	lr
 8013f64:	f04f 30ff 	mov.w	r0, #4294967295
 8013f68:	4770      	bx	lr
 8013f6a:	bf00      	nop
 8013f6c:	0801e684 	.word	0x0801e684
 8013f70:	08019548 	.word	0x08019548
 8013f74:	08027404 	.word	0x08027404

08013f78 <arm_rfft_64_fast_init_f32>:
 8013f78:	b180      	cbz	r0, 8013f9c <arm_rfft_64_fast_init_f32+0x24>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	2240      	movs	r2, #64	@ 0x40
 8013f7e:	2020      	movs	r0, #32
 8013f80:	4908      	ldr	r1, [pc, #32]	@ (8013fa4 <arm_rfft_64_fast_init_f32+0x2c>)
 8013f82:	b430      	push	{r4, r5}
 8013f84:	2530      	movs	r5, #48	@ 0x30
 8013f86:	4c08      	ldr	r4, [pc, #32]	@ (8013fa8 <arm_rfft_64_fast_init_f32+0x30>)
 8013f88:	821a      	strh	r2, [r3, #16]
 8013f8a:	4a08      	ldr	r2, [pc, #32]	@ (8013fac <arm_rfft_64_fast_init_f32+0x34>)
 8013f8c:	8018      	strh	r0, [r3, #0]
 8013f8e:	2000      	movs	r0, #0
 8013f90:	819d      	strh	r5, [r3, #12]
 8013f92:	615a      	str	r2, [r3, #20]
 8013f94:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8013f98:	bc30      	pop	{r4, r5}
 8013f9a:	4770      	bx	lr
 8013f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8013fa0:	4770      	bx	lr
 8013fa2:	bf00      	nop
 8013fa4:	08022f04 	.word	0x08022f04
 8013fa8:	0801b6a0 	.word	0x0801b6a0
 8013fac:	0802bc84 	.word	0x0802bc84

08013fb0 <arm_rfft_256_fast_init_f32>:
 8013fb0:	b188      	cbz	r0, 8013fd6 <arm_rfft_256_fast_init_f32+0x26>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013fb8:	2080      	movs	r0, #128	@ 0x80
 8013fba:	4908      	ldr	r1, [pc, #32]	@ (8013fdc <arm_rfft_256_fast_init_f32+0x2c>)
 8013fbc:	b430      	push	{r4, r5}
 8013fbe:	25d0      	movs	r5, #208	@ 0xd0
 8013fc0:	4c07      	ldr	r4, [pc, #28]	@ (8013fe0 <arm_rfft_256_fast_init_f32+0x30>)
 8013fc2:	821a      	strh	r2, [r3, #16]
 8013fc4:	4a07      	ldr	r2, [pc, #28]	@ (8013fe4 <arm_rfft_256_fast_init_f32+0x34>)
 8013fc6:	8018      	strh	r0, [r3, #0]
 8013fc8:	2000      	movs	r0, #0
 8013fca:	819d      	strh	r5, [r3, #12]
 8013fcc:	615a      	str	r2, [r3, #20]
 8013fce:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8013fd2:	bc30      	pop	{r4, r5}
 8013fd4:	4770      	bx	lr
 8013fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8013fda:	4770      	bx	lr
 8013fdc:	0801e284 	.word	0x0801e284
 8013fe0:	080193a8 	.word	0x080193a8
 8013fe4:	08027004 	.word	0x08027004

08013fe8 <arm_rfft_512_fast_init_f32>:
 8013fe8:	b198      	cbz	r0, 8014012 <arm_rfft_512_fast_init_f32+0x2a>
 8013fea:	4603      	mov	r3, r0
 8013fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ff0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8013ff4:	4908      	ldr	r1, [pc, #32]	@ (8014018 <arm_rfft_512_fast_init_f32+0x30>)
 8013ff6:	b430      	push	{r4, r5}
 8013ff8:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8013ffc:	4c07      	ldr	r4, [pc, #28]	@ (801401c <arm_rfft_512_fast_init_f32+0x34>)
 8013ffe:	821a      	strh	r2, [r3, #16]
 8014000:	4a07      	ldr	r2, [pc, #28]	@ (8014020 <arm_rfft_512_fast_init_f32+0x38>)
 8014002:	8018      	strh	r0, [r3, #0]
 8014004:	2000      	movs	r0, #0
 8014006:	819d      	strh	r5, [r3, #12]
 8014008:	615a      	str	r2, [r3, #20]
 801400a:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801400e:	bc30      	pop	{r4, r5}
 8014010:	4770      	bx	lr
 8014012:	f04f 30ff 	mov.w	r0, #4294967295
 8014016:	4770      	bx	lr
 8014018:	08022704 	.word	0x08022704
 801401c:	0801b330 	.word	0x0801b330
 8014020:	0802b484 	.word	0x0802b484

08014024 <arm_rfft_1024_fast_init_f32>:
 8014024:	b198      	cbz	r0, 801404e <arm_rfft_1024_fast_init_f32+0x2a>
 8014026:	4603      	mov	r3, r0
 8014028:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801402c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014030:	4908      	ldr	r1, [pc, #32]	@ (8014054 <arm_rfft_1024_fast_init_f32+0x30>)
 8014032:	b430      	push	{r4, r5}
 8014034:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8014038:	4c07      	ldr	r4, [pc, #28]	@ (8014058 <arm_rfft_1024_fast_init_f32+0x34>)
 801403a:	821a      	strh	r2, [r3, #16]
 801403c:	4a07      	ldr	r2, [pc, #28]	@ (801405c <arm_rfft_1024_fast_init_f32+0x38>)
 801403e:	8018      	strh	r0, [r3, #0]
 8014040:	2000      	movs	r0, #0
 8014042:	819d      	strh	r5, [r3, #12]
 8014044:	615a      	str	r2, [r3, #20]
 8014046:	e9c3 1401 	strd	r1, r4, [r3, #4]
 801404a:	bc30      	pop	{r4, r5}
 801404c:	4770      	bx	lr
 801404e:	f04f 30ff 	mov.w	r0, #4294967295
 8014052:	4770      	bx	lr
 8014054:	08023004 	.word	0x08023004
 8014058:	0801b700 	.word	0x0801b700
 801405c:	08024004 	.word	0x08024004

08014060 <arm_rfft_2048_fast_init_f32>:
 8014060:	b198      	cbz	r0, 801408a <arm_rfft_2048_fast_init_f32+0x2a>
 8014062:	4603      	mov	r3, r0
 8014064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014068:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801406c:	4908      	ldr	r1, [pc, #32]	@ (8014090 <arm_rfft_2048_fast_init_f32+0x30>)
 801406e:	b430      	push	{r4, r5}
 8014070:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8014074:	4c07      	ldr	r4, [pc, #28]	@ (8014094 <arm_rfft_2048_fast_init_f32+0x34>)
 8014076:	821a      	strh	r2, [r3, #16]
 8014078:	4a07      	ldr	r2, [pc, #28]	@ (8014098 <arm_rfft_2048_fast_init_f32+0x38>)
 801407a:	8018      	strh	r0, [r3, #0]
 801407c:	2000      	movs	r0, #0
 801407e:	819d      	strh	r5, [r3, #12]
 8014080:	615a      	str	r2, [r3, #20]
 8014082:	e9c3 1401 	strd	r1, r4, [r3, #4]
 8014086:	bc30      	pop	{r4, r5}
 8014088:	4770      	bx	lr
 801408a:	f04f 30ff 	mov.w	r0, #4294967295
 801408e:	4770      	bx	lr
 8014090:	0801c284 	.word	0x0801c284
 8014094:	08018598 	.word	0x08018598
 8014098:	08025004 	.word	0x08025004

0801409c <arm_rfft_4096_fast_init_f32>:
 801409c:	b198      	cbz	r0, 80140c6 <arm_rfft_4096_fast_init_f32+0x2a>
 801409e:	4603      	mov	r3, r0
 80140a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80140a4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80140a8:	4908      	ldr	r1, [pc, #32]	@ (80140cc <arm_rfft_4096_fast_init_f32+0x30>)
 80140aa:	b430      	push	{r4, r5}
 80140ac:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 80140b0:	4c07      	ldr	r4, [pc, #28]	@ (80140d0 <arm_rfft_4096_fast_init_f32+0x34>)
 80140b2:	821a      	strh	r2, [r3, #16]
 80140b4:	4a07      	ldr	r2, [pc, #28]	@ (80140d4 <arm_rfft_4096_fast_init_f32+0x38>)
 80140b6:	8018      	strh	r0, [r3, #0]
 80140b8:	2000      	movs	r0, #0
 80140ba:	819d      	strh	r5, [r3, #12]
 80140bc:	615a      	str	r2, [r3, #20]
 80140be:	e9c3 1401 	strd	r1, r4, [r3, #4]
 80140c2:	bc30      	pop	{r4, r5}
 80140c4:	4770      	bx	lr
 80140c6:	f04f 30ff 	mov.w	r0, #4294967295
 80140ca:	4770      	bx	lr
 80140cc:	0801e704 	.word	0x0801e704
 80140d0:	08019570 	.word	0x08019570
 80140d4:	08027484 	.word	0x08027484

080140d8 <arm_rfft_fast_init_f32>:
 80140d8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80140dc:	d01f      	beq.n	801411e <arm_rfft_fast_init_f32+0x46>
 80140de:	d90b      	bls.n	80140f8 <arm_rfft_fast_init_f32+0x20>
 80140e0:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80140e4:	d019      	beq.n	801411a <arm_rfft_fast_init_f32+0x42>
 80140e6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80140ea:	d012      	beq.n	8014112 <arm_rfft_fast_init_f32+0x3a>
 80140ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80140f0:	d00d      	beq.n	801410e <arm_rfft_fast_init_f32+0x36>
 80140f2:	f04f 30ff 	mov.w	r0, #4294967295
 80140f6:	4770      	bx	lr
 80140f8:	2940      	cmp	r1, #64	@ 0x40
 80140fa:	d00c      	beq.n	8014116 <arm_rfft_fast_init_f32+0x3e>
 80140fc:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8014100:	d003      	beq.n	801410a <arm_rfft_fast_init_f32+0x32>
 8014102:	2920      	cmp	r1, #32
 8014104:	d1f5      	bne.n	80140f2 <arm_rfft_fast_init_f32+0x1a>
 8014106:	4b07      	ldr	r3, [pc, #28]	@ (8014124 <arm_rfft_fast_init_f32+0x4c>)
 8014108:	4718      	bx	r3
 801410a:	4b07      	ldr	r3, [pc, #28]	@ (8014128 <arm_rfft_fast_init_f32+0x50>)
 801410c:	4718      	bx	r3
 801410e:	4b07      	ldr	r3, [pc, #28]	@ (801412c <arm_rfft_fast_init_f32+0x54>)
 8014110:	4718      	bx	r3
 8014112:	4b07      	ldr	r3, [pc, #28]	@ (8014130 <arm_rfft_fast_init_f32+0x58>)
 8014114:	4718      	bx	r3
 8014116:	4b07      	ldr	r3, [pc, #28]	@ (8014134 <arm_rfft_fast_init_f32+0x5c>)
 8014118:	e7f6      	b.n	8014108 <arm_rfft_fast_init_f32+0x30>
 801411a:	4b07      	ldr	r3, [pc, #28]	@ (8014138 <arm_rfft_fast_init_f32+0x60>)
 801411c:	e7f4      	b.n	8014108 <arm_rfft_fast_init_f32+0x30>
 801411e:	4b07      	ldr	r3, [pc, #28]	@ (801413c <arm_rfft_fast_init_f32+0x64>)
 8014120:	e7f2      	b.n	8014108 <arm_rfft_fast_init_f32+0x30>
 8014122:	bf00      	nop
 8014124:	08013f41 	.word	0x08013f41
 8014128:	08013fb1 	.word	0x08013fb1
 801412c:	08014025 	.word	0x08014025
 8014130:	0801409d 	.word	0x0801409d
 8014134:	08013f79 	.word	0x08013f79
 8014138:	08014061 	.word	0x08014061
 801413c:	08013fe9 	.word	0x08013fe9

08014140 <stage_rfft_f32>:
 8014140:	b470      	push	{r4, r5, r6}
 8014142:	edd1 7a00 	vldr	s15, [r1]
 8014146:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801414a:	ed91 7a01 	vldr	s14, [r1, #4]
 801414e:	f101 0510 	add.w	r5, r1, #16
 8014152:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014156:	8806      	ldrh	r6, [r0, #0]
 8014158:	ee37 7a07 	vadd.f32	s14, s14, s14
 801415c:	6943      	ldr	r3, [r0, #20]
 801415e:	1e70      	subs	r0, r6, #1
 8014160:	eeb0 4a46 	vmov.f32	s8, s12
 8014164:	f102 0410 	add.w	r4, r2, #16
 8014168:	3310      	adds	r3, #16
 801416a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801416e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014176:	3908      	subs	r1, #8
 8014178:	ee26 7a86 	vmul.f32	s14, s13, s12
 801417c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014180:	ed82 7a00 	vstr	s14, [r2]
 8014184:	edc2 7a01 	vstr	s15, [r2, #4]
 8014188:	ed15 6a02 	vldr	s12, [r5, #-8]
 801418c:	3801      	subs	r0, #1
 801418e:	ed91 7a02 	vldr	s14, [r1, #8]
 8014192:	f105 0508 	add.w	r5, r5, #8
 8014196:	ed53 6a02 	vldr	s13, [r3, #-8]
 801419a:	f1a1 0108 	sub.w	r1, r1, #8
 801419e:	ee77 5a46 	vsub.f32	s11, s14, s12
 80141a2:	edd1 4a05 	vldr	s9, [r1, #20]
 80141a6:	ed55 7a03 	vldr	s15, [r5, #-12]
 80141aa:	ee37 7a06 	vadd.f32	s14, s14, s12
 80141ae:	ed13 6a01 	vldr	s12, [r3, #-4]
 80141b2:	f104 0408 	add.w	r4, r4, #8
 80141b6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80141ba:	f103 0308 	add.w	r3, r3, #8
 80141be:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80141c2:	ee66 5a25 	vmul.f32	s11, s12, s11
 80141c6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80141ca:	ee37 7a23 	vadd.f32	s14, s14, s7
 80141ce:	ee66 6a85 	vmul.f32	s13, s13, s10
 80141d2:	ee26 6a05 	vmul.f32	s12, s12, s10
 80141d6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80141da:	ee37 7a06 	vadd.f32	s14, s14, s12
 80141de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80141e2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80141e6:	ee67 7a84 	vmul.f32	s15, s15, s8
 80141ea:	ed04 7a04 	vstr	s14, [r4, #-16]
 80141ee:	ed44 7a03 	vstr	s15, [r4, #-12]
 80141f2:	d1c9      	bne.n	8014188 <stage_rfft_f32+0x48>
 80141f4:	bc70      	pop	{r4, r5, r6}
 80141f6:	4770      	bx	lr

080141f8 <merge_rfft_f32>:
 80141f8:	b410      	push	{r4}
 80141fa:	edd1 7a00 	vldr	s15, [r1]
 80141fe:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8014202:	edd1 6a01 	vldr	s13, [r1, #4]
 8014206:	8804      	ldrh	r4, [r0, #0]
 8014208:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801420c:	6940      	ldr	r0, [r0, #20]
 801420e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014212:	3c01      	subs	r4, #1
 8014214:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014218:	ee67 7a84 	vmul.f32	s15, s15, s8
 801421c:	ed82 7a00 	vstr	s14, [r2]
 8014220:	edc2 7a01 	vstr	s15, [r2, #4]
 8014224:	b3dc      	cbz	r4, 801429e <merge_rfft_f32+0xa6>
 8014226:	00e3      	lsls	r3, r4, #3
 8014228:	3010      	adds	r0, #16
 801422a:	3210      	adds	r2, #16
 801422c:	3b08      	subs	r3, #8
 801422e:	440b      	add	r3, r1
 8014230:	3110      	adds	r1, #16
 8014232:	ed11 6a02 	vldr	s12, [r1, #-8]
 8014236:	3c01      	subs	r4, #1
 8014238:	ed93 7a02 	vldr	s14, [r3, #8]
 801423c:	f101 0108 	add.w	r1, r1, #8
 8014240:	ed50 6a02 	vldr	s13, [r0, #-8]
 8014244:	f1a3 0308 	sub.w	r3, r3, #8
 8014248:	ee76 5a47 	vsub.f32	s11, s12, s14
 801424c:	edd3 4a05 	vldr	s9, [r3, #20]
 8014250:	ed51 7a03 	vldr	s15, [r1, #-12]
 8014254:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014258:	ed10 6a01 	vldr	s12, [r0, #-4]
 801425c:	f102 0208 	add.w	r2, r2, #8
 8014260:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8014264:	f100 0008 	add.w	r0, r0, #8
 8014268:	ee34 5aa7 	vadd.f32	s10, s9, s15
 801426c:	ee66 5a25 	vmul.f32	s11, s12, s11
 8014270:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8014274:	ee37 7a63 	vsub.f32	s14, s14, s7
 8014278:	ee66 6a85 	vmul.f32	s13, s13, s10
 801427c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8014280:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8014284:	ee37 7a46 	vsub.f32	s14, s14, s12
 8014288:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801428c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014290:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014294:	ed02 7a04 	vstr	s14, [r2, #-16]
 8014298:	ed42 7a03 	vstr	s15, [r2, #-12]
 801429c:	d1c9      	bne.n	8014232 <merge_rfft_f32+0x3a>
 801429e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142a2:	4770      	bx	lr

080142a4 <arm_rfft_fast_f32>:
 80142a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a8:	8a05      	ldrh	r5, [r0, #16]
 80142aa:	4604      	mov	r4, r0
 80142ac:	4617      	mov	r7, r2
 80142ae:	461e      	mov	r6, r3
 80142b0:	086d      	lsrs	r5, r5, #1
 80142b2:	8005      	strh	r5, [r0, #0]
 80142b4:	b14b      	cbz	r3, 80142ca <arm_rfft_fast_f32+0x26>
 80142b6:	f7ff ff9f 	bl	80141f8 <merge_rfft_f32>
 80142ba:	4632      	mov	r2, r6
 80142bc:	4639      	mov	r1, r7
 80142be:	4620      	mov	r0, r4
 80142c0:	2301      	movs	r3, #1
 80142c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142c6:	f000 bb35 	b.w	8014934 <arm_cfft_f32>
 80142ca:	4688      	mov	r8, r1
 80142cc:	461a      	mov	r2, r3
 80142ce:	2301      	movs	r3, #1
 80142d0:	f000 fb30 	bl	8014934 <arm_cfft_f32>
 80142d4:	463a      	mov	r2, r7
 80142d6:	4641      	mov	r1, r8
 80142d8:	4620      	mov	r0, r4
 80142da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142de:	f7ff bf2f 	b.w	8014140 <stage_rfft_f32>
 80142e2:	bf00      	nop

080142e4 <arm_cfft_radix8by2_f32>:
 80142e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142e8:	4607      	mov	r7, r0
 80142ea:	4608      	mov	r0, r1
 80142ec:	ed2d 8b06 	vpush	{d8-d10}
 80142f0:	f8b7 c000 	ldrh.w	ip, [r7]
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80142fa:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80142fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8014302:	f000 80ac 	beq.w	801445e <arm_cfft_radix8by2_f32+0x17a>
 8014306:	008c      	lsls	r4, r1, #2
 8014308:	f100 0310 	add.w	r3, r0, #16
 801430c:	3210      	adds	r2, #16
 801430e:	f108 0610 	add.w	r6, r8, #16
 8014312:	3410      	adds	r4, #16
 8014314:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8014318:	1905      	adds	r5, r0, r4
 801431a:	4444      	add	r4, r8
 801431c:	ed16 7a04 	vldr	s14, [r6, #-16]
 8014320:	3310      	adds	r3, #16
 8014322:	ed53 4a08 	vldr	s9, [r3, #-32]	@ 0xffffffe0
 8014326:	3510      	adds	r5, #16
 8014328:	ed56 0a03 	vldr	s1, [r6, #-12]
 801432c:	3210      	adds	r2, #16
 801432e:	ee74 9a87 	vadd.f32	s19, s9, s14
 8014332:	ed56 7a02 	vldr	s15, [r6, #-8]
 8014336:	ed56 2a01 	vldr	s5, [r6, #-4]
 801433a:	ee74 4ac7 	vsub.f32	s9, s9, s14
 801433e:	ed54 5a04 	vldr	s11, [r4, #-16]
 8014342:	3610      	adds	r6, #16
 8014344:	ed14 5a03 	vldr	s10, [r4, #-12]
 8014348:	3410      	adds	r4, #16
 801434a:	ed14 3a06 	vldr	s6, [r4, #-24]	@ 0xffffffe8
 801434e:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8014352:	ed55 6a08 	vldr	s13, [r5, #-32]	@ 0xffffffe0
 8014356:	ed55 3a06 	vldr	s7, [r5, #-24]	@ 0xffffffe8
 801435a:	ed15 4a05 	vldr	s8, [r5, #-20]	@ 0xffffffec
 801435e:	ee36 9aa5 	vadd.f32	s18, s13, s11
 8014362:	ed14 6a05 	vldr	s12, [r4, #-20]	@ 0xffffffec
 8014366:	ee33 8a83 	vadd.f32	s16, s7, s6
 801436a:	ed13 7a07 	vldr	s14, [r3, #-28]	@ 0xffffffe4
 801436e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8014372:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8014376:	ee34 0a06 	vadd.f32	s0, s8, s12
 801437a:	ed15 1a07 	vldr	s2, [r5, #-28]	@ 0xffffffe4
 801437e:	ee77 aa20 	vadd.f32	s21, s14, s1
 8014382:	ed43 9a08 	vstr	s19, [r3, #-32]	@ 0xffffffe0
 8014386:	ee31 aaa7 	vadd.f32	s20, s3, s15
 801438a:	ee72 9a22 	vadd.f32	s19, s4, s5
 801438e:	ee71 8a05 	vadd.f32	s17, s2, s10
 8014392:	ed43 aa07 	vstr	s21, [r3, #-28]	@ 0xffffffe4
 8014396:	ee37 7a60 	vsub.f32	s14, s14, s1
 801439a:	ed03 aa06 	vstr	s20, [r3, #-24]	@ 0xffffffe8
 801439e:	ee35 5a41 	vsub.f32	s10, s10, s2
 80143a2:	ed43 9a05 	vstr	s19, [r3, #-20]	@ 0xffffffec
 80143a6:	ee36 6a44 	vsub.f32	s12, s12, s8
 80143aa:	ed05 9a08 	vstr	s18, [r5, #-32]	@ 0xffffffe0
 80143ae:	ed45 8a07 	vstr	s17, [r5, #-28]	@ 0xffffffe4
 80143b2:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80143b6:	ed05 8a06 	vstr	s16, [r5, #-24]	@ 0xffffffe8
 80143ba:	ee72 7a62 	vsub.f32	s15, s4, s5
 80143be:	ed05 0a05 	vstr	s0, [r5, #-20]	@ 0xffffffec
 80143c2:	ee73 2a63 	vsub.f32	s5, s6, s7
 80143c6:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 80143ca:	4563      	cmp	r3, ip
 80143cc:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 80143d0:	ee24 3a84 	vmul.f32	s6, s9, s8
 80143d4:	ee27 2a26 	vmul.f32	s4, s14, s13
 80143d8:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80143dc:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80143e0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80143e4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80143e8:	ee65 6a26 	vmul.f32	s13, s10, s13
 80143ec:	ee25 5a04 	vmul.f32	s10, s10, s8
 80143f0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80143f4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80143f8:	ee33 4a02 	vadd.f32	s8, s6, s4
 80143fc:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8014400:	ed06 7a07 	vstr	s14, [r6, #-28]	@ 0xffffffe4
 8014404:	ed06 4a08 	vstr	s8, [r6, #-32]	@ 0xffffffe0
 8014408:	ed04 5a08 	vstr	s10, [r4, #-32]	@ 0xffffffe0
 801440c:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 8014410:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8014414:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8014418:	ee61 4aa6 	vmul.f32	s9, s3, s13
 801441c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8014420:	ee61 5a87 	vmul.f32	s11, s3, s14
 8014424:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014428:	ee22 5a87 	vmul.f32	s10, s5, s14
 801442c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8014430:	ee26 6a26 	vmul.f32	s12, s12, s13
 8014434:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8014438:	ee74 4a84 	vadd.f32	s9, s9, s8
 801443c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014440:	ee35 6a46 	vsub.f32	s12, s10, s12
 8014444:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014448:	ed46 4a06 	vstr	s9, [r6, #-24]	@ 0xffffffe8
 801444c:	ed46 7a05 	vstr	s15, [r6, #-20]	@ 0xffffffec
 8014450:	ed04 6a06 	vstr	s12, [r4, #-24]	@ 0xffffffe8
 8014454:	ed04 7a05 	vstr	s14, [r4, #-20]	@ 0xffffffec
 8014458:	f47f af60 	bne.w	801431c <arm_cfft_radix8by2_f32+0x38>
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	b28c      	uxth	r4, r1
 8014460:	2302      	movs	r3, #2
 8014462:	4621      	mov	r1, r4
 8014464:	f000 fcb8 	bl	8014dd8 <arm_radix8_butterfly_f32>
 8014468:	4621      	mov	r1, r4
 801446a:	687a      	ldr	r2, [r7, #4]
 801446c:	4640      	mov	r0, r8
 801446e:	2302      	movs	r3, #2
 8014470:	ecbd 8b06 	vpop	{d8-d10}
 8014474:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014478:	f000 bcae 	b.w	8014dd8 <arm_radix8_butterfly_f32>

0801447c <arm_cfft_radix8by4_f32>:
 801447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014480:	ed2d 8b04 	vpush	{d8-d9}
 8014484:	8804      	ldrh	r4, [r0, #0]
 8014486:	b08d      	sub	sp, #52	@ 0x34
 8014488:	6842      	ldr	r2, [r0, #4]
 801448a:	460d      	mov	r5, r1
 801448c:	0864      	lsrs	r4, r4, #1
 801448e:	edd1 7a00 	vldr	s15, [r1]
 8014492:	edd1 5a01 	vldr	s11, [r1, #4]
 8014496:	00a3      	lsls	r3, r4, #2
 8014498:	18ce      	adds	r6, r1, r3
 801449a:	18f7      	adds	r7, r6, r3
 801449c:	ed96 7a00 	vldr	s14, [r6]
 80144a0:	ed96 4a01 	vldr	s8, [r6, #4]
 80144a4:	ed97 6a00 	vldr	s12, [r7]
 80144a8:	edd7 4a01 	vldr	s9, [r7, #4]
 80144ac:	ee77 6a86 	vadd.f32	s13, s15, s12
 80144b0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80144b4:	ee35 6aa4 	vadd.f32	s12, s11, s9
 80144b8:	ee77 2a26 	vadd.f32	s5, s14, s13
 80144bc:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80144c0:	ee74 3a27 	vadd.f32	s7, s8, s15
 80144c4:	ee76 4a44 	vsub.f32	s9, s12, s8
 80144c8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80144cc:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80144d0:	ee35 4ac7 	vsub.f32	s8, s11, s14
 80144d4:	ee37 7a25 	vadd.f32	s14, s14, s11
 80144d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80144dc:	0860      	lsrs	r0, r4, #1
 80144de:	f102 0408 	add.w	r4, r2, #8
 80144e2:	9405      	str	r4, [sp, #20]
 80144e4:	f102 0410 	add.w	r4, r2, #16
 80144e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80144ea:	f1a0 0902 	sub.w	r9, r0, #2
 80144ee:	9403      	str	r4, [sp, #12]
 80144f0:	18fc      	adds	r4, r7, r3
 80144f2:	f102 0018 	add.w	r0, r2, #24
 80144f6:	ed94 5a00 	vldr	s10, [r4]
 80144fa:	ed94 3a01 	vldr	s6, [r4, #4]
 80144fe:	ee72 2a85 	vadd.f32	s5, s5, s10
 8014502:	9004      	str	r0, [sp, #16]
 8014504:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8014508:	4620      	mov	r0, r4
 801450a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801450e:	9408      	str	r4, [sp, #32]
 8014510:	ee12 ca90 	vmov	ip, s5
 8014514:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8014518:	ee77 7a83 	vadd.f32	s15, s15, s6
 801451c:	f845 cb08 	str.w	ip, [r5], #8
 8014520:	ee13 ca90 	vmov	ip, s7
 8014524:	ed96 2a01 	vldr	s4, [r6, #4]
 8014528:	ee74 4a05 	vadd.f32	s9, s8, s10
 801452c:	edd4 2a01 	vldr	s5, [r4, #4]
 8014530:	ee37 7a45 	vsub.f32	s14, s14, s10
 8014534:	ee36 6a02 	vadd.f32	s12, s12, s4
 8014538:	9500      	str	r5, [sp, #0]
 801453a:	460d      	mov	r5, r1
 801453c:	ee36 6a22 	vadd.f32	s12, s12, s5
 8014540:	ed81 6a01 	vstr	s12, [r1, #4]
 8014544:	4631      	mov	r1, r6
 8014546:	f841 cb08 	str.w	ip, [r1], #8
 801454a:	ee16 ca90 	vmov	ip, s13
 801454e:	9106      	str	r1, [sp, #24]
 8014550:	4639      	mov	r1, r7
 8014552:	edc6 4a01 	vstr	s9, [r6, #4]
 8014556:	f841 cb08 	str.w	ip, [r1], #8
 801455a:	9102      	str	r1, [sp, #8]
 801455c:	ee17 1a90 	vmov	r1, s15
 8014560:	edc7 5a01 	vstr	s11, [r7, #4]
 8014564:	f840 1b08 	str.w	r1, [r0], #8
 8014568:	ea5f 0159 	movs.w	r1, r9, lsr #1
 801456c:	9001      	str	r0, [sp, #4]
 801456e:	ed84 7a01 	vstr	s14, [r4, #4]
 8014572:	9107      	str	r1, [sp, #28]
 8014574:	f000 8135 	beq.w	80147e2 <arm_cfft_radix8by4_f32+0x366>
 8014578:	3b0c      	subs	r3, #12
 801457a:	f102 0920 	add.w	r9, r2, #32
 801457e:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8014582:	4622      	mov	r2, r4
 8014584:	468b      	mov	fp, r1
 8014586:	f105 0e10 	add.w	lr, r5, #16
 801458a:	4423      	add	r3, r4
 801458c:	f1a6 0c0c 	sub.w	ip, r6, #12
 8014590:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8014594:	f106 0010 	add.w	r0, r6, #16
 8014598:	f1a7 010c 	sub.w	r1, r7, #12
 801459c:	f107 0510 	add.w	r5, r7, #16
 80145a0:	3c0c      	subs	r4, #12
 80145a2:	3210      	adds	r2, #16
 80145a4:	ed15 7a02 	vldr	s14, [r5, #-8]
 80145a8:	f1bb 0b01 	subs.w	fp, fp, #1
 80145ac:	ed5e 7a02 	vldr	s15, [lr, #-8]
 80145b0:	f1ac 0c08 	sub.w	ip, ip, #8
 80145b4:	ed50 6a02 	vldr	s13, [r0, #-8]
 80145b8:	f10e 0e08 	add.w	lr, lr, #8
 80145bc:	ee77 1a87 	vadd.f32	s3, s15, s14
 80145c0:	ed52 4a02 	vldr	s9, [r2, #-8]
 80145c4:	ed55 5a01 	vldr	s11, [r5, #-4]
 80145c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80145cc:	ed1e 7a03 	vldr	s14, [lr, #-12]
 80145d0:	f10a 0a08 	add.w	sl, sl, #8
 80145d4:	ee36 6aa1 	vadd.f32	s12, s13, s3
 80145d8:	ed10 3a01 	vldr	s6, [r0, #-4]
 80145dc:	ee37 4a25 	vadd.f32	s8, s14, s11
 80145e0:	ed52 3a01 	vldr	s7, [r2, #-4]
 80145e4:	ee37 7a65 	vsub.f32	s14, s14, s11
 80145e8:	f100 0008 	add.w	r0, r0, #8
 80145ec:	ee36 6a24 	vadd.f32	s12, s12, s9
 80145f0:	f1a1 0108 	sub.w	r1, r1, #8
 80145f4:	ee73 2a27 	vadd.f32	s5, s6, s15
 80145f8:	f109 0910 	add.w	r9, r9, #16
 80145fc:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8014600:	f105 0508 	add.w	r5, r5, #8
 8014604:	ed0e 6a04 	vstr	s12, [lr, #-16]
 8014608:	ee37 5a66 	vsub.f32	s10, s14, s13
 801460c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8014610:	ee71 1ae6 	vsub.f32	s3, s3, s13
 8014614:	ed12 6a01 	vldr	s12, [r2, #-4]
 8014618:	ee36 7a87 	vadd.f32	s14, s13, s14
 801461c:	ee74 5a25 	vadd.f32	s11, s8, s11
 8014620:	f1a4 0408 	sub.w	r4, r4, #8
 8014624:	ee34 4a43 	vsub.f32	s8, s8, s6
 8014628:	f108 0818 	add.w	r8, r8, #24
 801462c:	ee32 0ae3 	vsub.f32	s0, s5, s7
 8014630:	f102 0208 	add.w	r2, r2, #8
 8014634:	ee75 5a86 	vadd.f32	s11, s11, s12
 8014638:	f1a3 0308 	sub.w	r3, r3, #8
 801463c:	ee34 6a63 	vsub.f32	s12, s8, s7
 8014640:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8014644:	ed4e 5a03 	vstr	s11, [lr, #-12]
 8014648:	ee35 5a24 	vadd.f32	s10, s10, s9
 801464c:	ed94 4a04 	vldr	s8, [r4, #16]
 8014650:	ee71 1ae4 	vsub.f32	s3, s3, s9
 8014654:	ed9c 3a04 	vldr	s6, [ip, #16]
 8014658:	ee37 7a64 	vsub.f32	s14, s14, s9
 801465c:	edd1 7a04 	vldr	s15, [r1, #16]
 8014660:	ee73 6a04 	vadd.f32	s13, s6, s8
 8014664:	ed93 8a04 	vldr	s16, [r3, #16]
 8014668:	edd4 5a03 	vldr	s11, [r4, #12]
 801466c:	ee33 3a44 	vsub.f32	s6, s6, s8
 8014670:	ed9c 2a03 	vldr	s4, [ip, #12]
 8014674:	ee77 8ac8 	vsub.f32	s17, s15, s16
 8014678:	ee77 0aa6 	vadd.f32	s1, s15, s13
 801467c:	ed91 1a03 	vldr	s2, [r1, #12]
 8014680:	ee32 4a25 	vadd.f32	s8, s4, s11
 8014684:	edd3 2a03 	vldr	s5, [r3, #12]
 8014688:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801468c:	ee70 0a88 	vadd.f32	s1, s1, s16
 8014690:	ee73 4a41 	vsub.f32	s9, s6, s2
 8014694:	ee32 2a65 	vsub.f32	s4, s4, s11
 8014698:	edcc 0a04 	vstr	s1, [ip, #16]
 801469c:	ee74 0a41 	vsub.f32	s1, s8, s2
 80146a0:	edd1 6a03 	vldr	s13, [r1, #12]
 80146a4:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80146a8:	ed93 9a03 	vldr	s18, [r3, #12]
 80146ac:	ee78 5a82 	vadd.f32	s11, s17, s4
 80146b0:	ee34 4a26 	vadd.f32	s8, s8, s13
 80146b4:	ee70 0ae2 	vsub.f32	s1, s1, s5
 80146b8:	ee72 2ac1 	vsub.f32	s5, s5, s2
 80146bc:	ee34 4a09 	vadd.f32	s8, s8, s18
 80146c0:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80146c4:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80146c8:	ed8c 4a03 	vstr	s8, [ip, #12]
 80146cc:	ee38 2ac2 	vsub.f32	s4, s17, s4
 80146d0:	ed1a 1a03 	vldr	s2, [sl, #-12]
 80146d4:	ed1a 4a04 	vldr	s8, [sl, #-16]
 80146d8:	ee60 2a01 	vmul.f32	s5, s0, s2
 80146dc:	ee64 6a81 	vmul.f32	s13, s9, s2
 80146e0:	ee20 8a04 	vmul.f32	s16, s0, s8
 80146e4:	ee64 4a84 	vmul.f32	s9, s9, s8
 80146e8:	ee25 0a01 	vmul.f32	s0, s10, s2
 80146ec:	ee25 5a04 	vmul.f32	s10, s10, s8
 80146f0:	ee25 4a84 	vmul.f32	s8, s11, s8
 80146f4:	ee65 5a81 	vmul.f32	s11, s11, s2
 80146f8:	ee35 5a62 	vsub.f32	s10, s10, s5
 80146fc:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8014700:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8014704:	ee38 1a00 	vadd.f32	s2, s16, s0
 8014708:	ed00 5a03 	vstr	s10, [r0, #-12]
 801470c:	ed00 1a04 	vstr	s2, [r0, #-16]
 8014710:	ed81 4a04 	vstr	s8, [r1, #16]
 8014714:	edc1 5a03 	vstr	s11, [r1, #12]
 8014718:	ed19 5a08 	vldr	s10, [r9, #-32]	@ 0xffffffe0
 801471c:	ed59 5a07 	vldr	s11, [r9, #-28]	@ 0xffffffe4
 8014720:	ee67 4ac5 	vnmul.f32	s9, s15, s10
 8014724:	ee66 2a25 	vmul.f32	s5, s12, s11
 8014728:	ee67 6aa5 	vmul.f32	s13, s15, s11
 801472c:	ee21 4a85 	vmul.f32	s8, s3, s10
 8014730:	ee60 7a85 	vmul.f32	s15, s1, s10
 8014734:	ee61 1aa5 	vmul.f32	s3, s3, s11
 8014738:	ee26 6a05 	vmul.f32	s12, s12, s10
 801473c:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8014740:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8014744:	ee34 5a22 	vadd.f32	s10, s8, s5
 8014748:	ee36 6a61 	vsub.f32	s12, s12, s3
 801474c:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014750:	ed05 5a04 	vstr	s10, [r5, #-16]
 8014754:	ed05 6a03 	vstr	s12, [r5, #-12]
 8014758:	edc4 5a04 	vstr	s11, [r4, #16]
 801475c:	edc4 6a03 	vstr	s13, [r4, #12]
 8014760:	ed58 2a0c 	vldr	s5, [r8, #-48]	@ 0xffffffd0
 8014764:	ed58 7a0b 	vldr	s15, [r8, #-44]	@ 0xffffffd4
 8014768:	ee23 6aa2 	vmul.f32	s12, s7, s5
 801476c:	ee67 5a27 	vmul.f32	s11, s14, s15
 8014770:	ee63 6a27 	vmul.f32	s13, s6, s15
 8014774:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8014778:	ee27 7a22 	vmul.f32	s14, s14, s5
 801477c:	ee62 7a27 	vmul.f32	s15, s4, s15
 8014780:	ee23 3a22 	vmul.f32	s6, s6, s5
 8014784:	ee22 2a22 	vmul.f32	s4, s4, s5
 8014788:	ee36 6a25 	vadd.f32	s12, s12, s11
 801478c:	ee37 7a63 	vsub.f32	s14, s14, s7
 8014790:	ee36 2ac2 	vsub.f32	s4, s13, s4
 8014794:	ee77 7a83 	vadd.f32	s15, s15, s6
 8014798:	ed02 6a04 	vstr	s12, [r2, #-16]
 801479c:	ed02 7a03 	vstr	s14, [r2, #-12]
 80147a0:	ed83 2a04 	vstr	s4, [r3, #16]
 80147a4:	edc3 7a03 	vstr	s15, [r3, #12]
 80147a8:	f47f aefc 	bne.w	80145a4 <arm_cfft_radix8by4_f32+0x128>
 80147ac:	9907      	ldr	r1, [sp, #28]
 80147ae:	9803      	ldr	r0, [sp, #12]
 80147b0:	00cb      	lsls	r3, r1, #3
 80147b2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80147b6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80147ba:	9103      	str	r1, [sp, #12]
 80147bc:	9900      	ldr	r1, [sp, #0]
 80147be:	4419      	add	r1, r3
 80147c0:	9100      	str	r1, [sp, #0]
 80147c2:	9905      	ldr	r1, [sp, #20]
 80147c4:	4419      	add	r1, r3
 80147c6:	9105      	str	r1, [sp, #20]
 80147c8:	9906      	ldr	r1, [sp, #24]
 80147ca:	4419      	add	r1, r3
 80147cc:	9106      	str	r1, [sp, #24]
 80147ce:	9902      	ldr	r1, [sp, #8]
 80147d0:	4419      	add	r1, r3
 80147d2:	9102      	str	r1, [sp, #8]
 80147d4:	9901      	ldr	r1, [sp, #4]
 80147d6:	4419      	add	r1, r3
 80147d8:	9b04      	ldr	r3, [sp, #16]
 80147da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147de:	9101      	str	r1, [sp, #4]
 80147e0:	9304      	str	r3, [sp, #16]
 80147e2:	9b00      	ldr	r3, [sp, #0]
 80147e4:	9902      	ldr	r1, [sp, #8]
 80147e6:	ed93 7a00 	vldr	s14, [r3]
 80147ea:	edd1 7a00 	vldr	s15, [r1]
 80147ee:	9a06      	ldr	r2, [sp, #24]
 80147f0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80147f4:	9d01      	ldr	r5, [sp, #4]
 80147f6:	edd2 6a00 	vldr	s13, [r2]
 80147fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80147fe:	9b02      	ldr	r3, [sp, #8]
 8014800:	ee76 3a86 	vadd.f32	s7, s13, s12
 8014804:	ed95 3a00 	vldr	s6, [r5]
 8014808:	ed93 5a01 	vldr	s10, [r3, #4]
 801480c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8014810:	9b00      	ldr	r3, [sp, #0]
 8014812:	ee73 3a83 	vadd.f32	s7, s7, s6
 8014816:	edd5 2a01 	vldr	s5, [r5, #4]
 801481a:	ed93 4a01 	vldr	s8, [r3, #4]
 801481e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8014822:	9b00      	ldr	r3, [sp, #0]
 8014824:	ee74 5a05 	vadd.f32	s11, s8, s10
 8014828:	edd2 7a01 	vldr	s15, [r2, #4]
 801482c:	edc3 3a00 	vstr	s7, [r3]
 8014830:	ee34 4a45 	vsub.f32	s8, s8, s10
 8014834:	edd2 3a01 	vldr	s7, [r2, #4]
 8014838:	ee77 4a87 	vadd.f32	s9, s15, s14
 801483c:	ed95 2a01 	vldr	s4, [r5, #4]
 8014840:	ee75 3aa3 	vadd.f32	s7, s11, s7
 8014844:	9d05      	ldr	r5, [sp, #20]
 8014846:	ee34 5a66 	vsub.f32	s10, s8, s13
 801484a:	9b00      	ldr	r3, [sp, #0]
 801484c:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8014850:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8014854:	ee73 3a82 	vadd.f32	s7, s7, s4
 8014858:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801485a:	ee35 5a03 	vadd.f32	s10, s10, s6
 801485e:	4621      	mov	r1, r4
 8014860:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8014864:	edc3 3a01 	vstr	s7, [r3, #4]
 8014868:	ee77 7a67 	vsub.f32	s15, s14, s15
 801486c:	edd5 3a00 	vldr	s7, [r5]
 8014870:	ee76 6a84 	vadd.f32	s13, s13, s8
 8014874:	ed95 7a01 	vldr	s14, [r5, #4]
 8014878:	ee75 5ae2 	vsub.f32	s11, s11, s5
 801487c:	ee24 4aa3 	vmul.f32	s8, s9, s7
 8014880:	2304      	movs	r3, #4
 8014882:	ee64 4a87 	vmul.f32	s9, s9, s14
 8014886:	ee25 7a07 	vmul.f32	s14, s10, s14
 801488a:	ee25 5a23 	vmul.f32	s10, s10, s7
 801488e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8014892:	ee34 7a07 	vadd.f32	s14, s8, s14
 8014896:	ee35 5a64 	vsub.f32	s10, s10, s9
 801489a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801489e:	ed82 7a00 	vstr	s14, [r2]
 80148a2:	ed82 5a01 	vstr	s10, [r2, #4]
 80148a6:	9a03      	ldr	r2, [sp, #12]
 80148a8:	edd2 4a01 	vldr	s9, [r2, #4]
 80148ac:	ed92 7a00 	vldr	s14, [r2]
 80148b0:	9a02      	ldr	r2, [sp, #8]
 80148b2:	ee26 5a07 	vmul.f32	s10, s12, s14
 80148b6:	ee26 6a24 	vmul.f32	s12, s12, s9
 80148ba:	ee25 7a87 	vmul.f32	s14, s11, s14
 80148be:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80148c2:	ee37 6a46 	vsub.f32	s12, s14, s12
 80148c6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80148ca:	edc2 5a00 	vstr	s11, [r2]
 80148ce:	ed82 6a01 	vstr	s12, [r2, #4]
 80148d2:	9a04      	ldr	r2, [sp, #16]
 80148d4:	9d01      	ldr	r5, [sp, #4]
 80148d6:	edd2 5a01 	vldr	s11, [r2, #4]
 80148da:	ed92 7a00 	vldr	s14, [r2]
 80148de:	ee27 6a87 	vmul.f32	s12, s15, s14
 80148e2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80148e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80148ea:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80148ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80148f2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80148f6:	edc5 7a01 	vstr	s15, [r5, #4]
 80148fa:	edc5 6a00 	vstr	s13, [r5]
 80148fe:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014900:	686a      	ldr	r2, [r5, #4]
 8014902:	f000 fa69 	bl	8014dd8 <arm_radix8_butterfly_f32>
 8014906:	4630      	mov	r0, r6
 8014908:	4621      	mov	r1, r4
 801490a:	686a      	ldr	r2, [r5, #4]
 801490c:	2304      	movs	r3, #4
 801490e:	f000 fa63 	bl	8014dd8 <arm_radix8_butterfly_f32>
 8014912:	4638      	mov	r0, r7
 8014914:	4621      	mov	r1, r4
 8014916:	686a      	ldr	r2, [r5, #4]
 8014918:	2304      	movs	r3, #4
 801491a:	f000 fa5d 	bl	8014dd8 <arm_radix8_butterfly_f32>
 801491e:	4621      	mov	r1, r4
 8014920:	686a      	ldr	r2, [r5, #4]
 8014922:	2304      	movs	r3, #4
 8014924:	9808      	ldr	r0, [sp, #32]
 8014926:	b00d      	add	sp, #52	@ 0x34
 8014928:	ecbd 8b04 	vpop	{d8-d9}
 801492c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014930:	f000 ba52 	b.w	8014dd8 <arm_radix8_butterfly_f32>

08014934 <arm_cfft_f32>:
 8014934:	2a01      	cmp	r2, #1
 8014936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801493a:	4606      	mov	r6, r0
 801493c:	4617      	mov	r7, r2
 801493e:	460c      	mov	r4, r1
 8014940:	4698      	mov	r8, r3
 8014942:	8805      	ldrh	r5, [r0, #0]
 8014944:	d055      	beq.n	80149f2 <arm_cfft_f32+0xbe>
 8014946:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 801494a:	d061      	beq.n	8014a10 <arm_cfft_f32+0xdc>
 801494c:	d916      	bls.n	801497c <arm_cfft_f32+0x48>
 801494e:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8014952:	d01a      	beq.n	801498a <arm_cfft_f32+0x56>
 8014954:	d946      	bls.n	80149e4 <arm_cfft_f32+0xb0>
 8014956:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 801495a:	d059      	beq.n	8014a10 <arm_cfft_f32+0xdc>
 801495c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8014960:	d105      	bne.n	801496e <arm_cfft_f32+0x3a>
 8014962:	2301      	movs	r3, #1
 8014964:	6872      	ldr	r2, [r6, #4]
 8014966:	4629      	mov	r1, r5
 8014968:	4620      	mov	r0, r4
 801496a:	f000 fa35 	bl	8014dd8 <arm_radix8_butterfly_f32>
 801496e:	f1b8 0f00 	cmp.w	r8, #0
 8014972:	d111      	bne.n	8014998 <arm_cfft_f32+0x64>
 8014974:	2f01      	cmp	r7, #1
 8014976:	d016      	beq.n	80149a6 <arm_cfft_f32+0x72>
 8014978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801497c:	2d20      	cmp	r5, #32
 801497e:	d047      	beq.n	8014a10 <arm_cfft_f32+0xdc>
 8014980:	d934      	bls.n	80149ec <arm_cfft_f32+0xb8>
 8014982:	2d40      	cmp	r5, #64	@ 0x40
 8014984:	d0ed      	beq.n	8014962 <arm_cfft_f32+0x2e>
 8014986:	2d80      	cmp	r5, #128	@ 0x80
 8014988:	d1f1      	bne.n	801496e <arm_cfft_f32+0x3a>
 801498a:	4621      	mov	r1, r4
 801498c:	4630      	mov	r0, r6
 801498e:	f7ff fca9 	bl	80142e4 <arm_cfft_radix8by2_f32>
 8014992:	f1b8 0f00 	cmp.w	r8, #0
 8014996:	d0ed      	beq.n	8014974 <arm_cfft_f32+0x40>
 8014998:	68b2      	ldr	r2, [r6, #8]
 801499a:	4620      	mov	r0, r4
 801499c:	89b1      	ldrh	r1, [r6, #12]
 801499e:	f000 f83f 	bl	8014a20 <arm_bitreversal_32>
 80149a2:	2f01      	cmp	r7, #1
 80149a4:	d1e8      	bne.n	8014978 <arm_cfft_f32+0x44>
 80149a6:	ee07 5a90 	vmov	s15, r5
 80149aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80149ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80149b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80149b6:	2d00      	cmp	r5, #0
 80149b8:	d0de      	beq.n	8014978 <arm_cfft_f32+0x44>
 80149ba:	f104 0108 	add.w	r1, r4, #8
 80149be:	2300      	movs	r3, #0
 80149c0:	ed11 7a02 	vldr	s14, [r1, #-8]
 80149c4:	3301      	adds	r3, #1
 80149c6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80149ca:	3108      	adds	r1, #8
 80149cc:	429d      	cmp	r5, r3
 80149ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 80149d2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80149d6:	ed01 7a04 	vstr	s14, [r1, #-16]
 80149da:	ed41 7a03 	vstr	s15, [r1, #-12]
 80149de:	d1ef      	bne.n	80149c0 <arm_cfft_f32+0x8c>
 80149e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149e4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80149e8:	d0bb      	beq.n	8014962 <arm_cfft_f32+0x2e>
 80149ea:	e7c0      	b.n	801496e <arm_cfft_f32+0x3a>
 80149ec:	2d10      	cmp	r5, #16
 80149ee:	d0cc      	beq.n	801498a <arm_cfft_f32+0x56>
 80149f0:	e7bd      	b.n	801496e <arm_cfft_f32+0x3a>
 80149f2:	b195      	cbz	r5, 8014a1a <arm_cfft_f32+0xe6>
 80149f4:	f101 030c 	add.w	r3, r1, #12
 80149f8:	2200      	movs	r2, #0
 80149fa:	ed53 7a02 	vldr	s15, [r3, #-8]
 80149fe:	3201      	adds	r2, #1
 8014a00:	3308      	adds	r3, #8
 8014a02:	eef1 7a67 	vneg.f32	s15, s15
 8014a06:	4295      	cmp	r5, r2
 8014a08:	ed43 7a04 	vstr	s15, [r3, #-16]
 8014a0c:	d1f5      	bne.n	80149fa <arm_cfft_f32+0xc6>
 8014a0e:	e79a      	b.n	8014946 <arm_cfft_f32+0x12>
 8014a10:	4621      	mov	r1, r4
 8014a12:	4630      	mov	r0, r6
 8014a14:	f7ff fd32 	bl	801447c <arm_cfft_radix8by4_f32>
 8014a18:	e7a9      	b.n	801496e <arm_cfft_f32+0x3a>
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d0ac      	beq.n	8014978 <arm_cfft_f32+0x44>
 8014a1e:	e7bb      	b.n	8014998 <arm_cfft_f32+0x64>

08014a20 <arm_bitreversal_32>:
 8014a20:	b321      	cbz	r1, 8014a6c <arm_bitreversal_32+0x4c>
 8014a22:	f102 0c02 	add.w	ip, r2, #2
 8014a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a2a:	4690      	mov	r8, r2
 8014a2c:	2500      	movs	r5, #0
 8014a2e:	f838 4015 	ldrh.w	r4, [r8, r5, lsl #1]
 8014a32:	f83c 3015 	ldrh.w	r3, [ip, r5, lsl #1]
 8014a36:	3502      	adds	r5, #2
 8014a38:	08a4      	lsrs	r4, r4, #2
 8014a3a:	089b      	lsrs	r3, r3, #2
 8014a3c:	428d      	cmp	r5, r1
 8014a3e:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8014a42:	f850 e024 	ldr.w	lr, [r0, r4, lsl #2]
 8014a46:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8014a4a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8014a4e:	f107 0704 	add.w	r7, r7, #4
 8014a52:	f106 0604 	add.w	r6, r6, #4
 8014a56:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8014a5a:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 8014a5e:	59c4      	ldr	r4, [r0, r7]
 8014a60:	5983      	ldr	r3, [r0, r6]
 8014a62:	51c3      	str	r3, [r0, r7]
 8014a64:	5184      	str	r4, [r0, r6]
 8014a66:	d3e2      	bcc.n	8014a2e <arm_bitreversal_32+0xe>
 8014a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a6c:	4770      	bx	lr
 8014a6e:	bf00      	nop

08014a70 <arm_cmplx_mag_f32>:
 8014a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a74:	0897      	lsrs	r7, r2, #2
 8014a76:	ed2d 8b02 	vpush	{d8}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	d077      	beq.n	8014b6e <arm_cmplx_mag_f32+0xfe>
 8014a7e:	f100 0420 	add.w	r4, r0, #32
 8014a82:	f101 0510 	add.w	r5, r1, #16
 8014a86:	463e      	mov	r6, r7
 8014a88:	f04f 0800 	mov.w	r8, #0
 8014a8c:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8014a90:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8014a94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014a98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014a9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014aa0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa8:	f2c0 80c1 	blt.w	8014c2e <arm_cmplx_mag_f32+0x1be>
 8014aac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014ab0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab8:	f100 80d4 	bmi.w	8014c64 <arm_cmplx_mag_f32+0x1f4>
 8014abc:	ed05 8a04 	vstr	s16, [r5, #-16]
 8014ac0:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8014ac4:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8014ac8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014ad0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ad4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014adc:	f2c0 80a4 	blt.w	8014c28 <arm_cmplx_mag_f32+0x1b8>
 8014ae0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014ae4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aec:	f100 80a8 	bmi.w	8014c40 <arm_cmplx_mag_f32+0x1d0>
 8014af0:	ed05 8a03 	vstr	s16, [r5, #-12]
 8014af4:	ed14 0a04 	vldr	s0, [r4, #-16]
 8014af8:	ed54 7a03 	vldr	s15, [r4, #-12]
 8014afc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014b00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014b04:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b10:	f2c0 8087 	blt.w	8014c22 <arm_cmplx_mag_f32+0x1b2>
 8014b14:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014b18:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b20:	f100 8097 	bmi.w	8014c52 <arm_cmplx_mag_f32+0x1e2>
 8014b24:	ed05 8a02 	vstr	s16, [r5, #-8]
 8014b28:	ed14 0a02 	vldr	s0, [r4, #-8]
 8014b2c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8014b30:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014b34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014b38:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b44:	db6a      	blt.n	8014c1c <arm_cmplx_mag_f32+0x1ac>
 8014b46:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014b4a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b52:	f100 8090 	bmi.w	8014c76 <arm_cmplx_mag_f32+0x206>
 8014b56:	ed05 8a01 	vstr	s16, [r5, #-4]
 8014b5a:	3e01      	subs	r6, #1
 8014b5c:	f104 0420 	add.w	r4, r4, #32
 8014b60:	f105 0510 	add.w	r5, r5, #16
 8014b64:	d192      	bne.n	8014a8c <arm_cmplx_mag_f32+0x1c>
 8014b66:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8014b6a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8014b6e:	f012 0203 	ands.w	r2, r2, #3
 8014b72:	d04e      	beq.n	8014c12 <arm_cmplx_mag_f32+0x1a2>
 8014b74:	ed90 0a00 	vldr	s0, [r0]
 8014b78:	2300      	movs	r3, #0
 8014b7a:	edd0 7a01 	vldr	s15, [r0, #4]
 8014b7e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014b82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014b86:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014b8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b92:	db4f      	blt.n	8014c34 <arm_cmplx_mag_f32+0x1c4>
 8014b94:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014b98:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba0:	d472      	bmi.n	8014c88 <arm_cmplx_mag_f32+0x218>
 8014ba2:	ed81 8a00 	vstr	s16, [r1]
 8014ba6:	3a01      	subs	r2, #1
 8014ba8:	d033      	beq.n	8014c12 <arm_cmplx_mag_f32+0x1a2>
 8014baa:	ed90 0a02 	vldr	s0, [r0, #8]
 8014bae:	2300      	movs	r3, #0
 8014bb0:	edd0 7a03 	vldr	s15, [r0, #12]
 8014bb4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014bb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014bbc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014bc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bc8:	db36      	blt.n	8014c38 <arm_cmplx_mag_f32+0x1c8>
 8014bca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014bce:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd6:	d460      	bmi.n	8014c9a <arm_cmplx_mag_f32+0x22a>
 8014bd8:	ed81 8a01 	vstr	s16, [r1, #4]
 8014bdc:	2a01      	cmp	r2, #1
 8014bde:	d018      	beq.n	8014c12 <arm_cmplx_mag_f32+0x1a2>
 8014be0:	ed90 0a04 	vldr	s0, [r0, #16]
 8014be4:	2300      	movs	r3, #0
 8014be6:	edd0 7a05 	vldr	s15, [r0, #20]
 8014bea:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014bee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014bf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014bf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bfe:	db1d      	blt.n	8014c3c <arm_cmplx_mag_f32+0x1cc>
 8014c00:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014c04:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8014c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c0c:	d44e      	bmi.n	8014cac <arm_cmplx_mag_f32+0x23c>
 8014c0e:	ed81 8a02 	vstr	s16, [r1, #8]
 8014c12:	b004      	add	sp, #16
 8014c14:	ecbd 8b02 	vpop	{d8}
 8014c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c1c:	f845 8c04 	str.w	r8, [r5, #-4]
 8014c20:	e79b      	b.n	8014b5a <arm_cmplx_mag_f32+0xea>
 8014c22:	f845 8c08 	str.w	r8, [r5, #-8]
 8014c26:	e77f      	b.n	8014b28 <arm_cmplx_mag_f32+0xb8>
 8014c28:	f845 8c0c 	str.w	r8, [r5, #-12]
 8014c2c:	e762      	b.n	8014af4 <arm_cmplx_mag_f32+0x84>
 8014c2e:	f845 8c10 	str.w	r8, [r5, #-16]
 8014c32:	e745      	b.n	8014ac0 <arm_cmplx_mag_f32+0x50>
 8014c34:	600b      	str	r3, [r1, #0]
 8014c36:	e7b6      	b.n	8014ba6 <arm_cmplx_mag_f32+0x136>
 8014c38:	604b      	str	r3, [r1, #4]
 8014c3a:	e7cf      	b.n	8014bdc <arm_cmplx_mag_f32+0x16c>
 8014c3c:	608b      	str	r3, [r1, #8]
 8014c3e:	e7e8      	b.n	8014c12 <arm_cmplx_mag_f32+0x1a2>
 8014c40:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014c44:	9001      	str	r0, [sp, #4]
 8014c46:	f000 fbbb 	bl	80153c0 <sqrtf>
 8014c4a:	9801      	ldr	r0, [sp, #4]
 8014c4c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014c50:	e74e      	b.n	8014af0 <arm_cmplx_mag_f32+0x80>
 8014c52:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014c56:	9001      	str	r0, [sp, #4]
 8014c58:	f000 fbb2 	bl	80153c0 <sqrtf>
 8014c5c:	9801      	ldr	r0, [sp, #4]
 8014c5e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014c62:	e75f      	b.n	8014b24 <arm_cmplx_mag_f32+0xb4>
 8014c64:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014c68:	9001      	str	r0, [sp, #4]
 8014c6a:	f000 fba9 	bl	80153c0 <sqrtf>
 8014c6e:	9801      	ldr	r0, [sp, #4]
 8014c70:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014c74:	e722      	b.n	8014abc <arm_cmplx_mag_f32+0x4c>
 8014c76:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014c7a:	9001      	str	r0, [sp, #4]
 8014c7c:	f000 fba0 	bl	80153c0 <sqrtf>
 8014c80:	9801      	ldr	r0, [sp, #4]
 8014c82:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014c86:	e766      	b.n	8014b56 <arm_cmplx_mag_f32+0xe6>
 8014c88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c8c:	9201      	str	r2, [sp, #4]
 8014c8e:	f000 fb97 	bl	80153c0 <sqrtf>
 8014c92:	9903      	ldr	r1, [sp, #12]
 8014c94:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8014c98:	e783      	b.n	8014ba2 <arm_cmplx_mag_f32+0x132>
 8014c9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c9e:	9201      	str	r2, [sp, #4]
 8014ca0:	f000 fb8e 	bl	80153c0 <sqrtf>
 8014ca4:	9903      	ldr	r1, [sp, #12]
 8014ca6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8014caa:	e795      	b.n	8014bd8 <arm_cmplx_mag_f32+0x168>
 8014cac:	9101      	str	r1, [sp, #4]
 8014cae:	f000 fb87 	bl	80153c0 <sqrtf>
 8014cb2:	9901      	ldr	r1, [sp, #4]
 8014cb4:	e7ab      	b.n	8014c0e <arm_cmplx_mag_f32+0x19e>
 8014cb6:	bf00      	nop

08014cb8 <arm_sin_f32>:
 8014cb8:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8014d38 <arm_sin_f32+0x80>
 8014cbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014cc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014cc4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ccc:	d504      	bpl.n	8014cd8 <arm_sin_f32+0x20>
 8014cce:	ee17 3a90 	vmov	r3, s15
 8014cd2:	3b01      	subs	r3, #1
 8014cd4:	ee07 3a90 	vmov	s15, r3
 8014cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cdc:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8014d3c <arm_sin_f32+0x84>
 8014ce0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014ce4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014ce8:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8014cec:	ee17 3a10 	vmov	r3, s14
 8014cf0:	b29b      	uxth	r3, r3
 8014cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014cf6:	d21a      	bcs.n	8014d2e <arm_sin_f32+0x76>
 8014cf8:	ee07 3a10 	vmov	s14, r3
 8014cfc:	1c59      	adds	r1, r3, #1
 8014cfe:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8014d02:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014d06:	4a0e      	ldr	r2, [pc, #56]	@ (8014d40 <arm_sin_f32+0x88>)
 8014d08:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014d0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d10:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014d14:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014d18:	edd3 6a00 	vldr	s13, [r3]
 8014d1c:	ed92 7a00 	vldr	s14, [r2]
 8014d20:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014d2c:	4770      	bx	lr
 8014d2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014d32:	2101      	movs	r1, #1
 8014d34:	2300      	movs	r3, #0
 8014d36:	e7e6      	b.n	8014d06 <arm_sin_f32+0x4e>
 8014d38:	3e22f983 	.word	0x3e22f983
 8014d3c:	44000000 	.word	0x44000000
 8014d40:	0801ba80 	.word	0x0801ba80

08014d44 <arm_cos_f32>:
 8014d44:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8014dcc <arm_cos_f32+0x88>
 8014d48:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8014d4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d50:	ee30 0a07 	vadd.f32	s0, s0, s14
 8014d54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014d58:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d60:	d504      	bpl.n	8014d6c <arm_cos_f32+0x28>
 8014d62:	ee17 3a90 	vmov	r3, s15
 8014d66:	3b01      	subs	r3, #1
 8014d68:	ee07 3a90 	vmov	s15, r3
 8014d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d70:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8014dd0 <arm_cos_f32+0x8c>
 8014d74:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014d78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014d7c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8014d80:	ee17 3a10 	vmov	r3, s14
 8014d84:	b29b      	uxth	r3, r3
 8014d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d8a:	d21a      	bcs.n	8014dc2 <arm_cos_f32+0x7e>
 8014d8c:	ee07 3a10 	vmov	s14, r3
 8014d90:	1c59      	adds	r1, r3, #1
 8014d92:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8014d96:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014d9a:	4a0e      	ldr	r2, [pc, #56]	@ (8014dd4 <arm_cos_f32+0x90>)
 8014d9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014da0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014da4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014da8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014dac:	edd3 6a00 	vldr	s13, [r3]
 8014db0:	ed92 7a00 	vldr	s14, [r2]
 8014db4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014dbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014dc0:	4770      	bx	lr
 8014dc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014dc6:	2101      	movs	r1, #1
 8014dc8:	2300      	movs	r3, #0
 8014dca:	e7e6      	b.n	8014d9a <arm_cos_f32+0x56>
 8014dcc:	3e22f983 	.word	0x3e22f983
 8014dd0:	44000000 	.word	0x44000000
 8014dd4:	0801ba80 	.word	0x0801ba80

08014dd8 <arm_radix8_butterfly_f32>:
 8014dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ddc:	ed2d 8b10 	vpush	{d8-d15}
 8014de0:	b095      	sub	sp, #84	@ 0x54
 8014de2:	468a      	mov	sl, r1
 8014de4:	468b      	mov	fp, r1
 8014de6:	eddf 8abb 	vldr	s17, [pc, #748]	@ 80150d4 <arm_radix8_butterfly_f32+0x2fc>
 8014dea:	9012      	str	r0, [sp, #72]	@ 0x48
 8014dec:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8014df0:	4603      	mov	r3, r0
 8014df2:	3304      	adds	r3, #4
 8014df4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014df6:	ea4f 02db 	mov.w	r2, fp, lsr #3
 8014dfa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014dfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8014e00:	f8dd c04c 	ldr.w	ip, [sp, #76]	@ 0x4c
 8014e04:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8014e08:	920f      	str	r2, [sp, #60]	@ 0x3c
 8014e0a:	9303      	str	r3, [sp, #12]
 8014e0c:	0153      	lsls	r3, r2, #5
 8014e0e:	0114      	lsls	r4, r2, #4
 8014e10:	eba9 0002 	sub.w	r0, r9, r2
 8014e14:	18ce      	adds	r6, r1, r3
 8014e16:	9302      	str	r3, [sp, #8]
 8014e18:	0097      	lsls	r7, r2, #2
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	eb06 0509 	add.w	r5, r6, r9
 8014e20:	9004      	str	r0, [sp, #16]
 8014e22:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8014e26:	1bd2      	subs	r2, r2, r7
 8014e28:	eb05 0109 	add.w	r1, r5, r9
 8014e2c:	441f      	add	r7, r3
 8014e2e:	9405      	str	r4, [sp, #20]
 8014e30:	f109 0004 	add.w	r0, r9, #4
 8014e34:	9101      	str	r1, [sp, #4]
 8014e36:	1d21      	adds	r1, r4, #4
 8014e38:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014e3a:	f04f 0e00 	mov.w	lr, #0
 8014e3e:	9c01      	ldr	r4, [sp, #4]
 8014e40:	4418      	add	r0, r3
 8014e42:	4419      	add	r1, r3
 8014e44:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8014e48:	9b02      	ldr	r3, [sp, #8]
 8014e4a:	00fc      	lsls	r4, r7, #3
 8014e4c:	18d7      	adds	r7, r2, r3
 8014e4e:	9b04      	ldr	r3, [sp, #16]
 8014e50:	9406      	str	r4, [sp, #24]
 8014e52:	00db      	lsls	r3, r3, #3
 8014e54:	9c01      	ldr	r4, [sp, #4]
 8014e56:	9307      	str	r3, [sp, #28]
 8014e58:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8014e5c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014e60:	9304      	str	r3, [sp, #16]
 8014e62:	9b03      	ldr	r3, [sp, #12]
 8014e64:	edd6 6a00 	vldr	s13, [r6]
 8014e68:	44de      	add	lr, fp
 8014e6a:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8014e6e:	ed94 7a00 	vldr	s14, [r4]
 8014e72:	45f2      	cmp	sl, lr
 8014e74:	ed10 6a01 	vldr	s12, [r0, #-4]
 8014e78:	ee37 2aa6 	vadd.f32	s4, s15, s13
 8014e7c:	edd5 2a00 	vldr	s5, [r5]
 8014e80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014e84:	edd7 3a00 	vldr	s7, [r7]
 8014e88:	ed11 5a01 	vldr	s10, [r1, #-4]
 8014e8c:	ee36 3a22 	vadd.f32	s6, s12, s5
 8014e90:	edd2 6a00 	vldr	s13, [r2]
 8014e94:	ee75 5a07 	vadd.f32	s11, s10, s14
 8014e98:	ee36 4aa3 	vadd.f32	s8, s13, s7
 8014e9c:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8014ea0:	ee72 4a25 	vadd.f32	s9, s4, s11
 8014ea4:	ee73 3a04 	vadd.f32	s7, s6, s8
 8014ea8:	ee35 5a47 	vsub.f32	s10, s10, s14
 8014eac:	ee36 7a62 	vsub.f32	s14, s12, s5
 8014eb0:	ee32 2a65 	vsub.f32	s4, s4, s11
 8014eb4:	ee74 5aa3 	vadd.f32	s11, s9, s7
 8014eb8:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8014ebc:	ee37 6a66 	vsub.f32	s12, s14, s13
 8014ec0:	ed4c 5a01 	vstr	s11, [ip, #-4]
 8014ec4:	ee33 3a44 	vsub.f32	s6, s6, s8
 8014ec8:	edc6 4a00 	vstr	s9, [r6]
 8014ecc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014ed0:	ed97 4a01 	vldr	s8, [r7, #4]
 8014ed4:	ee66 6a28 	vmul.f32	s13, s12, s17
 8014ed8:	edd0 5a00 	vldr	s11, [r0]
 8014edc:	ed95 6a01 	vldr	s12, [r5, #4]
 8014ee0:	ee27 7a28 	vmul.f32	s14, s14, s17
 8014ee4:	edd2 3a01 	vldr	s7, [r2, #4]
 8014ee8:	ee77 2aa6 	vadd.f32	s5, s15, s13
 8014eec:	ee75 4ac6 	vsub.f32	s9, s11, s12
 8014ef0:	ed96 1a01 	vldr	s2, [r6, #4]
 8014ef4:	ee33 0ac4 	vsub.f32	s0, s7, s8
 8014ef8:	edd4 0a01 	vldr	s1, [r4, #4]
 8014efc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014f00:	eddc 6a00 	vldr	s13, [ip]
 8014f04:	ee75 5a86 	vadd.f32	s11, s11, s12
 8014f08:	ed91 6a00 	vldr	s12, [r1]
 8014f0c:	ee73 3a84 	vadd.f32	s7, s7, s8
 8014f10:	ee74 1a80 	vadd.f32	s3, s9, s0
 8014f14:	ee36 4a81 	vadd.f32	s8, s13, s2
 8014f18:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8014f1c:	ee76 6ac1 	vsub.f32	s13, s13, s2
 8014f20:	ee36 1a20 	vadd.f32	s2, s12, s1
 8014f24:	ee61 1aa8 	vmul.f32	s3, s3, s17
 8014f28:	ee36 6a60 	vsub.f32	s12, s12, s1
 8014f2c:	ee64 4aa8 	vmul.f32	s9, s9, s17
 8014f30:	ee75 0aa3 	vadd.f32	s1, s11, s7
 8014f34:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8014f38:	ee74 3a01 	vadd.f32	s7, s8, s2
 8014f3c:	ee34 4a41 	vsub.f32	s8, s8, s2
 8014f40:	ee36 1a21 	vadd.f32	s2, s12, s3
 8014f44:	ee33 0aa0 	vadd.f32	s0, s7, s1
 8014f48:	ee36 6a61 	vsub.f32	s12, s12, s3
 8014f4c:	ee73 3ae0 	vsub.f32	s7, s7, s1
 8014f50:	ee76 1aa4 	vadd.f32	s3, s13, s9
 8014f54:	ed8c 0a00 	vstr	s0, [ip]
 8014f58:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014f5c:	449c      	add	ip, r3
 8014f5e:	ee75 4a07 	vadd.f32	s9, s10, s14
 8014f62:	edc6 3a01 	vstr	s7, [r6, #4]
 8014f66:	ee35 7a47 	vsub.f32	s14, s10, s14
 8014f6a:	441e      	add	r6, r3
 8014f6c:	ee32 5a25 	vadd.f32	s10, s4, s11
 8014f70:	ee72 5a65 	vsub.f32	s11, s4, s11
 8014f74:	ee72 3a81 	vadd.f32	s7, s5, s2
 8014f78:	ed01 5a01 	vstr	s10, [r1, #-4]
 8014f7c:	ee34 2a43 	vsub.f32	s4, s8, s6
 8014f80:	edc4 5a00 	vstr	s11, [r4]
 8014f84:	ee37 5a86 	vadd.f32	s10, s15, s12
 8014f88:	ee71 5ae4 	vsub.f32	s11, s3, s9
 8014f8c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014f90:	ed81 2a00 	vstr	s4, [r1]
 8014f94:	ee36 6ac7 	vsub.f32	s12, s13, s14
 8014f98:	4419      	add	r1, r3
 8014f9a:	ee33 4a04 	vadd.f32	s8, s6, s8
 8014f9e:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8014fa2:	ee74 4aa1 	vadd.f32	s9, s9, s3
 8014fa6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014faa:	ed84 4a01 	vstr	s8, [r4, #4]
 8014fae:	ed40 3a01 	vstr	s7, [r0, #-4]
 8014fb2:	441c      	add	r4, r3
 8014fb4:	edc7 2a00 	vstr	s5, [r7]
 8014fb8:	ed85 5a00 	vstr	s10, [r5]
 8014fbc:	edc2 7a00 	vstr	s15, [r2]
 8014fc0:	edc0 5a00 	vstr	s11, [r0]
 8014fc4:	4418      	add	r0, r3
 8014fc6:	edc7 4a01 	vstr	s9, [r7, #4]
 8014fca:	441f      	add	r7, r3
 8014fcc:	ed85 6a01 	vstr	s12, [r5, #4]
 8014fd0:	441d      	add	r5, r3
 8014fd2:	ed82 7a01 	vstr	s14, [r2, #4]
 8014fd6:	441a      	add	r2, r3
 8014fd8:	f63f af44 	bhi.w	8014e64 <arm_radix8_butterfly_f32+0x8c>
 8014fdc:	469c      	mov	ip, r3
 8014fde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fe0:	2b07      	cmp	r3, #7
 8014fe2:	f240 81b6 	bls.w	8015352 <arm_radix8_butterfly_f32+0x57a>
 8014fe6:	9a02      	ldr	r2, [sp, #8]
 8014fe8:	f109 0608 	add.w	r6, r9, #8
 8014fec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014fee:	f108 0408 	add.w	r4, r8, #8
 8014ff2:	3208      	adds	r2, #8
 8014ff4:	9f06      	ldr	r7, [sp, #24]
 8014ff6:	9d04      	ldr	r5, [sp, #16]
 8014ff8:	189a      	adds	r2, r3, r2
 8014ffa:	3708      	adds	r7, #8
 8014ffc:	3508      	adds	r5, #8
 8014ffe:	9807      	ldr	r0, [sp, #28]
 8015000:	920c      	str	r2, [sp, #48]	@ 0x30
 8015002:	199a      	adds	r2, r3, r6
 8015004:	9905      	ldr	r1, [sp, #20]
 8015006:	3008      	adds	r0, #8
 8015008:	920b      	str	r2, [sp, #44]	@ 0x2c
 801500a:	19da      	adds	r2, r3, r7
 801500c:	310c      	adds	r1, #12
 801500e:	920a      	str	r2, [sp, #40]	@ 0x28
 8015010:	195a      	adds	r2, r3, r5
 8015012:	9209      	str	r2, [sp, #36]	@ 0x24
 8015014:	191a      	adds	r2, r3, r4
 8015016:	9208      	str	r2, [sp, #32]
 8015018:	181a      	adds	r2, r3, r0
 801501a:	9207      	str	r2, [sp, #28]
 801501c:	185a      	adds	r2, r3, r1
 801501e:	330c      	adds	r3, #12
 8015020:	9205      	str	r2, [sp, #20]
 8015022:	9306      	str	r3, [sp, #24]
 8015024:	2301      	movs	r3, #1
 8015026:	9304      	str	r3, [sp, #16]
 8015028:	2300      	movs	r3, #0
 801502a:	930d      	str	r3, [sp, #52]	@ 0x34
 801502c:	4663      	mov	r3, ip
 801502e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015030:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015032:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015036:	440a      	add	r2, r1
 8015038:	9f06      	ldr	r7, [sp, #24]
 801503a:	9e07      	ldr	r6, [sp, #28]
 801503c:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8015040:	920d      	str	r2, [sp, #52]	@ 0x34
 8015042:	eba2 0e82 	sub.w	lr, r2, r2, lsl #2
 8015046:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015048:	9d08      	ldr	r5, [sp, #32]
 801504a:	4442      	add	r2, r8
 801504c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801504e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015050:	eb02 0108 	add.w	r1, r2, r8
 8015054:	ed92 ea00 	vldr	s28, [r2]
 8015058:	eb01 0208 	add.w	r2, r1, r8
 801505c:	edd1 da00 	vldr	s27, [r1]
 8015060:	eb02 0108 	add.w	r1, r2, r8
 8015064:	ed92 da00 	vldr	s26, [r2]
 8015068:	eb01 0208 	add.w	r2, r1, r8
 801506c:	edd1 ca00 	vldr	s25, [r1]
 8015070:	eb02 0108 	add.w	r1, r2, r8
 8015074:	ed92 ca00 	vldr	s24, [r2]
 8015078:	eb01 0208 	add.w	r2, r1, r8
 801507c:	edd1 ba00 	vldr	s23, [r1]
 8015080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015082:	eb02 1e0e 	add.w	lr, r2, lr, lsl #4
 8015086:	ed92 ba00 	vldr	s22, [r2]
 801508a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801508c:	eb0e 0908 	add.w	r9, lr, r8
 8015090:	910e      	str	r1, [sp, #56]	@ 0x38
 8015092:	9201      	str	r2, [sp, #4]
 8015094:	eb09 0208 	add.w	r2, r9, r8
 8015098:	ed99 aa01 	vldr	s20, [r9, #4]
 801509c:	edde aa01 	vldr	s21, [lr, #4]
 80150a0:	eb02 0908 	add.w	r9, r2, r8
 80150a4:	edd2 9a01 	vldr	s19, [r2, #4]
 80150a8:	f8dd e010 	ldr.w	lr, [sp, #16]
 80150ac:	eb09 0208 	add.w	r2, r9, r8
 80150b0:	ed99 9a01 	vldr	s18, [r9, #4]
 80150b4:	eb02 0908 	add.w	r9, r2, r8
 80150b8:	ed92 8a01 	vldr	s16, [r2, #4]
 80150bc:	9a01      	ldr	r2, [sp, #4]
 80150be:	edd9 7a01 	vldr	s15, [r9, #4]
 80150c2:	44c8      	add	r8, r9
 80150c4:	edcd 7a02 	vstr	s15, [sp, #8]
 80150c8:	edd8 7a01 	vldr	s15, [r8, #4]
 80150cc:	edcd 7a03 	vstr	s15, [sp, #12]
 80150d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80150d2:	e001      	b.n	80150d8 <arm_radix8_butterfly_f32+0x300>
 80150d4:	3f3504f3 	.word	0x3f3504f3
 80150d8:	ed92 7a00 	vldr	s14, [r2]
 80150dc:	44de      	add	lr, fp
 80150de:	ed17 1a01 	vldr	s2, [r7, #-4]
 80150e2:	ed90 5a00 	vldr	s10, [r0]
 80150e6:	45f2      	cmp	sl, lr
 80150e8:	ed1c fa01 	vldr	s30, [ip, #-4]
 80150ec:	ee31 3a07 	vadd.f32	s6, s2, s14
 80150f0:	edd6 5a00 	vldr	s11, [r6]
 80150f4:	ee31 1a47 	vsub.f32	s2, s2, s14
 80150f8:	edd4 7a00 	vldr	s15, [r4]
 80150fc:	ed95 7a00 	vldr	s14, [r5]
 8015100:	ed91 4a00 	vldr	s8, [r1]
 8015104:	ee3f 6a27 	vadd.f32	s12, s30, s15
 8015108:	ee77 6a25 	vadd.f32	s13, s14, s11
 801510c:	edd7 ea00 	vldr	s29, [r7]
 8015110:	ee74 fa05 	vadd.f32	s31, s8, s10
 8015114:	ee73 1a06 	vadd.f32	s3, s6, s12
 8015118:	ee34 4a45 	vsub.f32	s8, s8, s10
 801511c:	ee3f 5aa6 	vadd.f32	s10, s31, s13
 8015120:	ee37 7a65 	vsub.f32	s14, s14, s11
 8015124:	ee33 3a46 	vsub.f32	s6, s6, s12
 8015128:	ee31 6a85 	vadd.f32	s12, s3, s10
 801512c:	ee7f 7a67 	vsub.f32	s15, s30, s15
 8015130:	ee34 fa07 	vadd.f32	s30, s8, s14
 8015134:	ed07 6a01 	vstr	s12, [r7, #-4]
 8015138:	ee34 4a47 	vsub.f32	s8, s8, s14
 801513c:	edd5 3a01 	vldr	s7, [r5, #4]
 8015140:	ee7f fae6 	vsub.f32	s31, s31, s13
 8015144:	ed90 7a01 	vldr	s14, [r0, #4]
 8015148:	ee2f fa28 	vmul.f32	s30, s30, s17
 801514c:	edd1 5a01 	vldr	s11, [r1, #4]
 8015150:	ee24 4a28 	vmul.f32	s8, s8, s17
 8015154:	ed96 6a01 	vldr	s12, [r6, #4]
 8015158:	ee31 5ac5 	vsub.f32	s10, s3, s10
 801515c:	ee75 0ac7 	vsub.f32	s1, s11, s14
 8015160:	edd2 6a01 	vldr	s13, [r2, #4]
 8015164:	ee73 2ac6 	vsub.f32	s5, s7, s12
 8015168:	edd4 4a01 	vldr	s9, [r4, #4]
 801516c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8015170:	ed9c 7a00 	vldr	s14, [ip]
 8015174:	ee37 2a8f 	vadd.f32	s4, s15, s30
 8015178:	ee33 6a86 	vadd.f32	s12, s7, s12
 801517c:	ee37 facf 	vsub.f32	s30, s15, s30
 8015180:	ee7e 3aa6 	vadd.f32	s7, s29, s13
 8015184:	ee70 7ae2 	vsub.f32	s15, s1, s5
 8015188:	ee7e eae6 	vsub.f32	s29, s29, s13
 801518c:	ee70 2aa2 	vadd.f32	s5, s1, s5
 8015190:	ee77 6a24 	vadd.f32	s13, s14, s9
 8015194:	ee75 0a86 	vadd.f32	s1, s11, s12
 8015198:	ee37 7a64 	vsub.f32	s14, s14, s9
 801519c:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80151a0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80151a4:	ee62 2aa8 	vmul.f32	s5, s5, s17
 80151a8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80151ac:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80151b0:	ee7e 5aa7 	vadd.f32	s11, s29, s15
 80151b4:	ee77 4a22 	vadd.f32	s9, s14, s5
 80151b8:	ee7e eae7 	vsub.f32	s29, s29, s15
 80151bc:	ee77 7a62 	vsub.f32	s15, s14, s5
 80151c0:	ee71 2a04 	vadd.f32	s5, s2, s8
 80151c4:	ee31 7a44 	vsub.f32	s14, s2, s8
 80151c8:	ee30 1a60 	vsub.f32	s2, s0, s1
 80151cc:	ee73 1a06 	vadd.f32	s3, s6, s12
 80151d0:	ee33 6a46 	vsub.f32	s12, s6, s12
 80151d4:	ee33 3aef 	vsub.f32	s6, s7, s31
 80151d8:	ee7f 6aa3 	vadd.f32	s13, s31, s7
 80151dc:	ee3e 4acf 	vsub.f32	s8, s29, s30
 80151e0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80151e4:	ee72 5a25 	vadd.f32	s11, s4, s11
 80151e8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80151ec:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80151f0:	ee77 2a27 	vadd.f32	s5, s14, s15
 80151f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80151f8:	ee7f 7a2e 	vadd.f32	s15, s30, s29
 80151fc:	ee2c fa85 	vmul.f32	s30, s25, s10
 8015200:	ee69 ea01 	vmul.f32	s29, s18, s2
 8015204:	ee29 5a05 	vmul.f32	s10, s18, s10
 8015208:	ee2c 1a81 	vmul.f32	s2, s25, s2
 801520c:	ee6d faa1 	vmul.f32	s31, s27, s3
 8015210:	ee70 0a20 	vadd.f32	s1, s0, s1
 8015214:	ee6a 1a21 	vmul.f32	s3, s20, s3
 8015218:	ee2a 0a03 	vmul.f32	s0, s20, s6
 801521c:	ee2d 3a83 	vmul.f32	s6, s27, s6
 8015220:	edc7 0a00 	vstr	s1, [r7]
 8015224:	ee7f ea2e 	vadd.f32	s29, s30, s29
 8015228:	441f      	add	r7, r3
 801522a:	ee2a faa3 	vmul.f32	s30, s21, s7
 801522e:	ee31 5a45 	vsub.f32	s10, s2, s10
 8015232:	ee6e 3a23 	vmul.f32	s7, s28, s7
 8015236:	edc2 ea00 	vstr	s29, [r2]
 801523a:	ee3f 0a80 	vadd.f32	s0, s31, s0
 801523e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8015242:	ed82 5a01 	vstr	s10, [r2, #4]
 8015246:	ee6e 0a02 	vmul.f32	s1, s28, s4
 801524a:	edcd 3a01 	vstr	s7, [sp, #4]
 801524e:	ed9d 5a03 	vldr	s10, [sp, #12]
 8015252:	ee6b ea86 	vmul.f32	s29, s23, s12
 8015256:	eddd 3a02 	vldr	s7, [sp, #8]
 801525a:	ee6b fa24 	vmul.f32	s31, s22, s9
 801525e:	ed0c 0a01 	vstr	s0, [ip, #-4]
 8015262:	ee65 4a24 	vmul.f32	s9, s10, s9
 8015266:	ed8c 3a00 	vstr	s6, [ip]
 801526a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801526e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8015272:	eddd 3a01 	vldr	s7, [sp, #4]
 8015276:	ee25 5a25 	vmul.f32	s10, s10, s11
 801527a:	441a      	add	r2, r3
 801527c:	ee2c 0a22 	vmul.f32	s0, s24, s5
 8015280:	449c      	add	ip, r3
 8015282:	ee68 1a04 	vmul.f32	s3, s16, s8
 8015286:	ee70 0a8f 	vadd.f32	s1, s1, s30
 801528a:	ee2d 3a07 	vmul.f32	s6, s26, s14
 801528e:	ee29 faa7 	vmul.f32	s30, s19, s15
 8015292:	ee2a 2a82 	vmul.f32	s4, s21, s4
 8015296:	ee6b 6aa6 	vmul.f32	s13, s23, s13
 801529a:	ee6b 5a25 	vmul.f32	s11, s22, s11
 801529e:	ee68 2a22 	vmul.f32	s5, s16, s5
 80152a2:	ee2c 4a04 	vmul.f32	s8, s24, s8
 80152a6:	ee29 7a87 	vmul.f32	s14, s19, s14
 80152aa:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80152ae:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80152b2:	ee7e ea81 	vadd.f32	s29, s29, s2
 80152b6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80152ba:	ee3f 5a85 	vadd.f32	s10, s31, s10
 80152be:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80152c2:	edc4 ea00 	vstr	s29, [r4]
 80152c6:	ee30 0a21 	vadd.f32	s0, s0, s3
 80152ca:	ed84 6a01 	vstr	s12, [r4, #4]
 80152ce:	ee74 2a62 	vsub.f32	s5, s8, s5
 80152d2:	edc1 0a00 	vstr	s1, [r1]
 80152d6:	ee33 3a0f 	vadd.f32	s6, s6, s30
 80152da:	edc1 3a01 	vstr	s7, [r1, #4]
 80152de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80152e2:	ed86 5a00 	vstr	s10, [r6]
 80152e6:	edc6 4a01 	vstr	s9, [r6, #4]
 80152ea:	4419      	add	r1, r3
 80152ec:	ed80 0a00 	vstr	s0, [r0]
 80152f0:	441c      	add	r4, r3
 80152f2:	edc0 2a01 	vstr	s5, [r0, #4]
 80152f6:	441e      	add	r6, r3
 80152f8:	ed85 3a00 	vstr	s6, [r5]
 80152fc:	4418      	add	r0, r3
 80152fe:	ed85 7a01 	vstr	s14, [r5, #4]
 8015302:	441d      	add	r5, r3
 8015304:	f63f aee8 	bhi.w	80150d8 <arm_radix8_butterfly_f32+0x300>
 8015308:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801530a:	9a04      	ldr	r2, [sp, #16]
 801530c:	3108      	adds	r1, #8
 801530e:	3201      	adds	r2, #1
 8015310:	910c      	str	r1, [sp, #48]	@ 0x30
 8015312:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015314:	9204      	str	r2, [sp, #16]
 8015316:	3108      	adds	r1, #8
 8015318:	910b      	str	r1, [sp, #44]	@ 0x2c
 801531a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801531c:	3108      	adds	r1, #8
 801531e:	910a      	str	r1, [sp, #40]	@ 0x28
 8015320:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015322:	3108      	adds	r1, #8
 8015324:	9109      	str	r1, [sp, #36]	@ 0x24
 8015326:	9908      	ldr	r1, [sp, #32]
 8015328:	3108      	adds	r1, #8
 801532a:	9108      	str	r1, [sp, #32]
 801532c:	9907      	ldr	r1, [sp, #28]
 801532e:	3108      	adds	r1, #8
 8015330:	9107      	str	r1, [sp, #28]
 8015332:	9906      	ldr	r1, [sp, #24]
 8015334:	3108      	adds	r1, #8
 8015336:	9106      	str	r1, [sp, #24]
 8015338:	9905      	ldr	r1, [sp, #20]
 801533a:	3108      	adds	r1, #8
 801533c:	9105      	str	r1, [sp, #20]
 801533e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015340:	4291      	cmp	r1, r2
 8015342:	f47f ae74 	bne.w	801502e <arm_radix8_butterfly_f32+0x256>
 8015346:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015348:	468b      	mov	fp, r1
 801534a:	00db      	lsls	r3, r3, #3
 801534c:	b29b      	uxth	r3, r3
 801534e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015350:	e551      	b.n	8014df6 <arm_radix8_butterfly_f32+0x1e>
 8015352:	b015      	add	sp, #84	@ 0x54
 8015354:	ecbd 8b10 	vpop	{d8-d15}
 8015358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801535c <memset>:
 801535c:	4402      	add	r2, r0
 801535e:	4603      	mov	r3, r0
 8015360:	4293      	cmp	r3, r2
 8015362:	d100      	bne.n	8015366 <memset+0xa>
 8015364:	4770      	bx	lr
 8015366:	f803 1b01 	strb.w	r1, [r3], #1
 801536a:	e7f9      	b.n	8015360 <memset+0x4>

0801536c <__errno>:
 801536c:	4b01      	ldr	r3, [pc, #4]	@ (8015374 <__errno+0x8>)
 801536e:	6818      	ldr	r0, [r3, #0]
 8015370:	4770      	bx	lr
 8015372:	bf00      	nop
 8015374:	24000544 	.word	0x24000544

08015378 <__libc_init_array>:
 8015378:	b570      	push	{r4, r5, r6, lr}
 801537a:	4d0d      	ldr	r5, [pc, #52]	@ (80153b0 <__libc_init_array+0x38>)
 801537c:	4c0d      	ldr	r4, [pc, #52]	@ (80153b4 <__libc_init_array+0x3c>)
 801537e:	1b64      	subs	r4, r4, r5
 8015380:	10a4      	asrs	r4, r4, #2
 8015382:	2600      	movs	r6, #0
 8015384:	42a6      	cmp	r6, r4
 8015386:	d109      	bne.n	801539c <__libc_init_array+0x24>
 8015388:	4d0b      	ldr	r5, [pc, #44]	@ (80153b8 <__libc_init_array+0x40>)
 801538a:	4c0c      	ldr	r4, [pc, #48]	@ (80153bc <__libc_init_array+0x44>)
 801538c:	f000 fa64 	bl	8015858 <_init>
 8015390:	1b64      	subs	r4, r4, r5
 8015392:	10a4      	asrs	r4, r4, #2
 8015394:	2600      	movs	r6, #0
 8015396:	42a6      	cmp	r6, r4
 8015398:	d105      	bne.n	80153a6 <__libc_init_array+0x2e>
 801539a:	bd70      	pop	{r4, r5, r6, pc}
 801539c:	f855 3b04 	ldr.w	r3, [r5], #4
 80153a0:	4798      	blx	r3
 80153a2:	3601      	adds	r6, #1
 80153a4:	e7ee      	b.n	8015384 <__libc_init_array+0xc>
 80153a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80153aa:	4798      	blx	r3
 80153ac:	3601      	adds	r6, #1
 80153ae:	e7f2      	b.n	8015396 <__libc_init_array+0x1e>
 80153b0:	0802c118 	.word	0x0802c118
 80153b4:	0802c118 	.word	0x0802c118
 80153b8:	0802c118 	.word	0x0802c118
 80153bc:	0802c11c 	.word	0x0802c11c

080153c0 <sqrtf>:
 80153c0:	b508      	push	{r3, lr}
 80153c2:	ed2d 8b02 	vpush	{d8}
 80153c6:	eeb0 8a40 	vmov.f32	s16, s0
 80153ca:	f000 fa42 	bl	8015852 <__ieee754_sqrtf>
 80153ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80153d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d6:	d60c      	bvs.n	80153f2 <sqrtf+0x32>
 80153d8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80153f8 <sqrtf+0x38>
 80153dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80153e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e4:	d505      	bpl.n	80153f2 <sqrtf+0x32>
 80153e6:	f7ff ffc1 	bl	801536c <__errno>
 80153ea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80153ee:	2321      	movs	r3, #33	@ 0x21
 80153f0:	6003      	str	r3, [r0, #0]
 80153f2:	ecbd 8b02 	vpop	{d8}
 80153f6:	bd08      	pop	{r3, pc}
 80153f8:	00000000 	.word	0x00000000

080153fc <logf>:
 80153fc:	ee10 3a10 	vmov	r3, s0
 8015400:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8015404:	b410      	push	{r4}
 8015406:	d055      	beq.n	80154b4 <logf+0xb8>
 8015408:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 801540c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8015410:	d31a      	bcc.n	8015448 <logf+0x4c>
 8015412:	005a      	lsls	r2, r3, #1
 8015414:	d104      	bne.n	8015420 <logf+0x24>
 8015416:	f85d 4b04 	ldr.w	r4, [sp], #4
 801541a:	2001      	movs	r0, #1
 801541c:	f000 b9f8 	b.w	8015810 <__math_divzerof>
 8015420:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8015424:	d043      	beq.n	80154ae <logf+0xb2>
 8015426:	2b00      	cmp	r3, #0
 8015428:	db02      	blt.n	8015430 <logf+0x34>
 801542a:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 801542e:	d303      	bcc.n	8015438 <logf+0x3c>
 8015430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015434:	f000 b9fe 	b.w	8015834 <__math_invalidf>
 8015438:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80154bc <logf+0xc0>
 801543c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015440:	ee10 3a10 	vmov	r3, s0
 8015444:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 8015448:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 801544c:	491c      	ldr	r1, [pc, #112]	@ (80154c0 <logf+0xc4>)
 801544e:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 8015452:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 8015456:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801545a:	0dd4      	lsrs	r4, r2, #23
 801545c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8015460:	05e4      	lsls	r4, r4, #23
 8015462:	ed90 5b00 	vldr	d5, [r0]
 8015466:	1b1b      	subs	r3, r3, r4
 8015468:	ee07 3a90 	vmov	s15, r3
 801546c:	ed90 6b02 	vldr	d6, [r0, #8]
 8015470:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015474:	15d2      	asrs	r2, r2, #23
 8015476:	eea5 0b07 	vfma.f64	d0, d5, d7
 801547a:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 801547e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8015482:	ee07 2a90 	vmov	s15, r2
 8015486:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801548a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801548e:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 8015492:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 8015496:	eea5 7b00 	vfma.f64	d7, d5, d0
 801549a:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 801549e:	ee30 0b06 	vadd.f64	d0, d0, d6
 80154a2:	eea5 7b04 	vfma.f64	d7, d5, d4
 80154a6:	eea4 0b07 	vfma.f64	d0, d4, d7
 80154aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80154ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154b2:	4770      	bx	lr
 80154b4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80154c4 <logf+0xc8>
 80154b8:	e7f9      	b.n	80154ae <logf+0xb2>
 80154ba:	bf00      	nop
 80154bc:	4b000000 	.word	0x4b000000
 80154c0:	0802bd88 	.word	0x0802bd88
 80154c4:	00000000 	.word	0x00000000

080154c8 <checkint>:
 80154c8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80154cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80154ce:	d910      	bls.n	80154f2 <checkint+0x2a>
 80154d0:	2b96      	cmp	r3, #150	@ 0x96
 80154d2:	d80c      	bhi.n	80154ee <checkint+0x26>
 80154d4:	2201      	movs	r2, #1
 80154d6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80154da:	fa02 f303 	lsl.w	r3, r2, r3
 80154de:	1e5a      	subs	r2, r3, #1
 80154e0:	4202      	tst	r2, r0
 80154e2:	d106      	bne.n	80154f2 <checkint+0x2a>
 80154e4:	4203      	tst	r3, r0
 80154e6:	bf14      	ite	ne
 80154e8:	2001      	movne	r0, #1
 80154ea:	2002      	moveq	r0, #2
 80154ec:	4770      	bx	lr
 80154ee:	2002      	movs	r0, #2
 80154f0:	4770      	bx	lr
 80154f2:	2000      	movs	r0, #0
 80154f4:	4770      	bx	lr
	...

080154f8 <powf>:
 80154f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80154fa:	ee10 1a10 	vmov	r1, s0
 80154fe:	ee10 4a90 	vmov	r4, s1
 8015502:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 8015506:	0063      	lsls	r3, r4, #1
 8015508:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 801550c:	eef0 7a40 	vmov.f32	s15, s0
 8015510:	eeb0 7a60 	vmov.f32	s14, s1
 8015514:	f103 30ff 	add.w	r0, r3, #4294967295
 8015518:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 801551c:	d252      	bcs.n	80155c4 <powf+0xcc>
 801551e:	4290      	cmp	r0, r2
 8015520:	d258      	bcs.n	80155d4 <powf+0xdc>
 8015522:	2000      	movs	r0, #0
 8015524:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8015528:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 801552c:	4a9e      	ldr	r2, [pc, #632]	@ (80157a8 <powf+0x2b0>)
 801552e:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8015532:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8015536:	f36f 0316 	bfc	r3, #0, #23
 801553a:	1ac9      	subs	r1, r1, r3
 801553c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8015540:	ee07 1a90 	vmov	s15, r1
 8015544:	ed94 5b02 	vldr	d5, [r4, #8]
 8015548:	ed94 4b00 	vldr	d4, [r4]
 801554c:	15db      	asrs	r3, r3, #23
 801554e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8015552:	ee07 3a90 	vmov	s15, r3
 8015556:	eea4 2b06 	vfma.f64	d2, d4, d6
 801555a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 801555e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8015562:	ee24 0b04 	vmul.f64	d0, d4, d4
 8015566:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801556a:	ee36 6b05 	vadd.f64	d6, d6, d5
 801556e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8015572:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8015576:	eea2 1b05 	vfma.f64	d1, d2, d5
 801557a:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 801557e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8015582:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8015586:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801558a:	eea2 6b03 	vfma.f64	d6, d2, d3
 801558e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8015592:	eea1 6b00 	vfma.f64	d6, d1, d0
 8015596:	ee27 7b06 	vmul.f64	d7, d7, d6
 801559a:	ee17 3a90 	vmov	r3, s15
 801559e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80155a2:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 80155a6:	429a      	cmp	r2, r3
 80155a8:	f0c0 8098 	bcc.w	80156dc <powf+0x1e4>
 80155ac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8015788 <powf+0x290>
 80155b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80155b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155b8:	dd79      	ble.n	80156ae <powf+0x1b6>
 80155ba:	b003      	add	sp, #12
 80155bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155c0:	f000 b920 	b.w	8015804 <__math_oflowf>
 80155c4:	4290      	cmp	r0, r2
 80155c6:	d330      	bcc.n	801562a <powf+0x132>
 80155c8:	b12b      	cbz	r3, 80155d6 <powf+0xde>
 80155ca:	0049      	lsls	r1, r1, #1
 80155cc:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 80155d0:	d808      	bhi.n	80155e4 <powf+0xec>
 80155d2:	e015      	b.n	8015600 <powf+0x108>
 80155d4:	b953      	cbnz	r3, 80155ec <powf+0xf4>
 80155d6:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 80155da:	0049      	lsls	r1, r1, #1
 80155dc:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 80155e0:	f240 80ca 	bls.w	8015778 <powf+0x280>
 80155e4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80155e8:	b003      	add	sp, #12
 80155ea:	bd30      	pop	{r4, r5, pc}
 80155ec:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80155f0:	d105      	bne.n	80155fe <powf+0x106>
 80155f2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80155f6:	0064      	lsls	r4, r4, #1
 80155f8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80155fc:	e7f0      	b.n	80155e0 <powf+0xe8>
 80155fe:	0049      	lsls	r1, r1, #1
 8015600:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8015604:	d1ee      	bne.n	80155e4 <powf+0xec>
 8015606:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 801560a:	f000 80b5 	beq.w	8015778 <powf+0x280>
 801560e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8015612:	ea6f 0404 	mvn.w	r4, r4
 8015616:	bf34      	ite	cc
 8015618:	2100      	movcc	r1, #0
 801561a:	2101      	movcs	r1, #1
 801561c:	0fe4      	lsrs	r4, r4, #31
 801561e:	42a1      	cmp	r1, r4
 8015620:	f040 80ad 	bne.w	801577e <powf+0x286>
 8015624:	ee27 0a07 	vmul.f32	s0, s14, s14
 8015628:	e7de      	b.n	80155e8 <powf+0xf0>
 801562a:	004d      	lsls	r5, r1, #1
 801562c:	1e6b      	subs	r3, r5, #1
 801562e:	4293      	cmp	r3, r2
 8015630:	d31b      	bcc.n	801566a <powf+0x172>
 8015632:	2900      	cmp	r1, #0
 8015634:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015638:	da0e      	bge.n	8015658 <powf+0x160>
 801563a:	4620      	mov	r0, r4
 801563c:	f7ff ff44 	bl	80154c8 <checkint>
 8015640:	2801      	cmp	r0, #1
 8015642:	d109      	bne.n	8015658 <powf+0x160>
 8015644:	eeb1 0a40 	vneg.f32	s0, s0
 8015648:	b945      	cbnz	r5, 801565c <powf+0x164>
 801564a:	2c00      	cmp	r4, #0
 801564c:	dacc      	bge.n	80155e8 <powf+0xf0>
 801564e:	b003      	add	sp, #12
 8015650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015654:	f000 b8dc 	b.w	8015810 <__math_divzerof>
 8015658:	2000      	movs	r0, #0
 801565a:	e7f5      	b.n	8015648 <powf+0x150>
 801565c:	2c00      	cmp	r4, #0
 801565e:	dac3      	bge.n	80155e8 <powf+0xf0>
 8015660:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015664:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015668:	e7be      	b.n	80155e8 <powf+0xf0>
 801566a:	2900      	cmp	r1, #0
 801566c:	da1d      	bge.n	80156aa <powf+0x1b2>
 801566e:	4620      	mov	r0, r4
 8015670:	f7ff ff2a 	bl	80154c8 <checkint>
 8015674:	b920      	cbnz	r0, 8015680 <powf+0x188>
 8015676:	b003      	add	sp, #12
 8015678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801567c:	f000 b8da 	b.w	8015834 <__math_invalidf>
 8015680:	1e43      	subs	r3, r0, #1
 8015682:	4258      	negs	r0, r3
 8015684:	4158      	adcs	r0, r3
 8015686:	0400      	lsls	r0, r0, #16
 8015688:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801568c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8015690:	f4bf af48 	bcs.w	8015524 <powf+0x2c>
 8015694:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80157ac <powf+0x2b4>
 8015698:	ee27 0aa6 	vmul.f32	s0, s15, s13
 801569c:	ee10 3a10 	vmov	r3, s0
 80156a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80156a4:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 80156a8:	e73c      	b.n	8015524 <powf+0x2c>
 80156aa:	2000      	movs	r0, #0
 80156ac:	e7ee      	b.n	801568c <powf+0x194>
 80156ae:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8015790 <powf+0x298>
 80156b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80156b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ba:	dd45      	ble.n	8015748 <powf+0x250>
 80156bc:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 80156c0:	b3d0      	cbz	r0, 8015738 <powf+0x240>
 80156c2:	9301      	str	r3, [sp, #4]
 80156c4:	eddd 6a01 	vldr	s13, [sp, #4]
 80156c8:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 80156cc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80156d0:	eef4 6a46 	vcmp.f32	s13, s12
 80156d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d8:	f47f af6f 	bne.w	80155ba <powf+0xc2>
 80156dc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80156e0:	4b33      	ldr	r3, [pc, #204]	@ (80157b0 <powf+0x2b8>)
 80156e2:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 80156e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80156ea:	ee16 2a10 	vmov	r2, s12
 80156ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80156f2:	f002 011f 	and.w	r1, r2, #31
 80156f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80156fa:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 80156fe:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015702:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8015706:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801570a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801570e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015712:	686d      	ldr	r5, [r5, #4]
 8015714:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8015718:	1880      	adds	r0, r0, r2
 801571a:	2100      	movs	r1, #0
 801571c:	190a      	adds	r2, r1, r4
 801571e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8015722:	eea7 0b05 	vfma.f64	d0, d7, d5
 8015726:	ec43 2b17 	vmov	d7, r2, r3
 801572a:	eea6 0b04 	vfma.f64	d0, d6, d4
 801572e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015732:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015736:	e757      	b.n	80155e8 <powf+0xf0>
 8015738:	9300      	str	r3, [sp, #0]
 801573a:	eddd 6a00 	vldr	s13, [sp]
 801573e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8015742:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015746:	e7c3      	b.n	80156d0 <powf+0x1d8>
 8015748:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8015798 <powf+0x2a0>
 801574c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015754:	d804      	bhi.n	8015760 <powf+0x268>
 8015756:	b003      	add	sp, #12
 8015758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801575c:	f000 b846 	b.w	80157ec <__math_uflowf>
 8015760:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80157a0 <powf+0x2a8>
 8015764:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801576c:	d5b6      	bpl.n	80156dc <powf+0x1e4>
 801576e:	b003      	add	sp, #12
 8015770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015774:	f000 b840 	b.w	80157f8 <__math_may_uflowf>
 8015778:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801577c:	e734      	b.n	80155e8 <powf+0xf0>
 801577e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80157b4 <powf+0x2bc>
 8015782:	e731      	b.n	80155e8 <powf+0xf0>
 8015784:	f3af 8000 	nop.w
 8015788:	ffd1d571 	.word	0xffd1d571
 801578c:	405fffff 	.word	0x405fffff
 8015790:	ffa3aae2 	.word	0xffa3aae2
 8015794:	405fffff 	.word	0x405fffff
 8015798:	00000000 	.word	0x00000000
 801579c:	c062c000 	.word	0xc062c000
 80157a0:	00000000 	.word	0x00000000
 80157a4:	c062a000 	.word	0xc062a000
 80157a8:	0802bff0 	.word	0x0802bff0
 80157ac:	4b000000 	.word	0x4b000000
 80157b0:	0802bea8 	.word	0x0802bea8
 80157b4:	00000000 	.word	0x00000000

080157b8 <with_errnof>:
 80157b8:	b510      	push	{r4, lr}
 80157ba:	ed2d 8b02 	vpush	{d8}
 80157be:	eeb0 8a40 	vmov.f32	s16, s0
 80157c2:	4604      	mov	r4, r0
 80157c4:	f7ff fdd2 	bl	801536c <__errno>
 80157c8:	eeb0 0a48 	vmov.f32	s0, s16
 80157cc:	ecbd 8b02 	vpop	{d8}
 80157d0:	6004      	str	r4, [r0, #0]
 80157d2:	bd10      	pop	{r4, pc}

080157d4 <xflowf>:
 80157d4:	b130      	cbz	r0, 80157e4 <xflowf+0x10>
 80157d6:	eef1 7a40 	vneg.f32	s15, s0
 80157da:	ee27 0a80 	vmul.f32	s0, s15, s0
 80157de:	2022      	movs	r0, #34	@ 0x22
 80157e0:	f7ff bfea 	b.w	80157b8 <with_errnof>
 80157e4:	eef0 7a40 	vmov.f32	s15, s0
 80157e8:	e7f7      	b.n	80157da <xflowf+0x6>
	...

080157ec <__math_uflowf>:
 80157ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80157f4 <__math_uflowf+0x8>
 80157f0:	f7ff bff0 	b.w	80157d4 <xflowf>
 80157f4:	10000000 	.word	0x10000000

080157f8 <__math_may_uflowf>:
 80157f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8015800 <__math_may_uflowf+0x8>
 80157fc:	f7ff bfea 	b.w	80157d4 <xflowf>
 8015800:	1a200000 	.word	0x1a200000

08015804 <__math_oflowf>:
 8015804:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801580c <__math_oflowf+0x8>
 8015808:	f7ff bfe4 	b.w	80157d4 <xflowf>
 801580c:	70000000 	.word	0x70000000

08015810 <__math_divzerof>:
 8015810:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8015830 <__math_divzerof+0x20>
 8015814:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8015818:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801581c:	2800      	cmp	r0, #0
 801581e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8015822:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8015826:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801582a:	f7ff bfc5 	b.w	80157b8 <with_errnof>
 801582e:	bf00      	nop
 8015830:	00000000 	.word	0x00000000

08015834 <__math_invalidf>:
 8015834:	eef0 7a40 	vmov.f32	s15, s0
 8015838:	ee30 7a40 	vsub.f32	s14, s0, s0
 801583c:	eef4 7a67 	vcmp.f32	s15, s15
 8015840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015844:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8015848:	d602      	bvs.n	8015850 <__math_invalidf+0x1c>
 801584a:	2021      	movs	r0, #33	@ 0x21
 801584c:	f7ff bfb4 	b.w	80157b8 <with_errnof>
 8015850:	4770      	bx	lr

08015852 <__ieee754_sqrtf>:
 8015852:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015856:	4770      	bx	lr

08015858 <_init>:
 8015858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801585a:	bf00      	nop
 801585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801585e:	bc08      	pop	{r3}
 8015860:	469e      	mov	lr, r3
 8015862:	4770      	bx	lr

08015864 <_fini>:
 8015864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015866:	bf00      	nop
 8015868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801586a:	bc08      	pop	{r3}
 801586c:	469e      	mov	lr, r3
 801586e:	4770      	bx	lr
